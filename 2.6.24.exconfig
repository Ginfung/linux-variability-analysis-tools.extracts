config 64BIT boolean {
 prompt "64-bit kernel" if [ARCH="x86"]
 default [ARCH="x86_64"] if []
}
config X86_32 boolean {
 default [!64BIT] if []
}
config X86_64 boolean {
 default [64BIT] if []
}
config X86 boolean {
 default [y] if []
}
config GENERIC_TIME boolean {
 default [y] if []
}
config GENERIC_CMOS_UPDATE boolean {
 default [y] if []
}
config CLOCKSOURCE_WATCHDOG boolean {
 default [y] if []
}
config GENERIC_CLOCKEVENTS boolean {
 default [y] if []
}
config GENERIC_CLOCKEVENTS_BROADCAST boolean {
 default [y] if [X86_64 || X86_32 && X86_LOCAL_APIC]
 depends on [X86_64 || X86_32 && X86_LOCAL_APIC]
 inherited [X86_64 || X86_32 && X86_LOCAL_APIC]
}
config LOCKDEP_SUPPORT boolean {
 default [y] if []
}
config STACKTRACE_SUPPORT boolean {
 default [y] if []
}
config SEMAPHORE_SLEEPERS boolean {
 default [y] if []
}
config MMU boolean {
 default [y] if []
}
config ZONE_DMA boolean {
 default [y] if []
}
config QUICKLIST boolean {
 default [X86_32] if []
}
config SBUS boolean {
}
config GENERIC_ISA_DMA boolean {
 default [y] if []
}
config GENERIC_IOMAP boolean {
 default [y] if []
}
config GENERIC_BUG boolean {
 default [y] if [BUG]
 depends on [BUG]
 inherited [BUG]
}
config GENERIC_HWEIGHT boolean {
 default [y] if []
}
config ARCH_MAY_HAVE_PC_FDC boolean {
 default [y] if []
}
config DMI boolean {
 default [y] if []
}
config RWSEM_GENERIC_SPINLOCK boolean {
 default [!X86_XADD] if []
}
config RWSEM_XCHGADD_ALGORITHM boolean {
 default [X86_XADD] if []
}
config ARCH_HAS_ILOG2_U32 boolean {
 default [n] if []
}
config ARCH_HAS_ILOG2_U64 boolean {
 default [n] if []
}
config GENERIC_CALIBRATE_DELAY boolean {
 default [y] if []
}
config GENERIC_TIME_VSYSCALL boolean {
 default [X86_64] if []
}
config ARCH_SUPPORTS_OPROFILE boolean {
 default [y] if []
}
config ZONE_DMA32 boolean {
 default [X86_64] if []
}
config ARCH_POPULATES_NODE_MAP boolean {
 default [y] if []
}
config AUDIT_ARCH boolean {
 default [X86_64] if []
}
config GENERIC_HARDIRQS boolean {
 default [y] if []
}
config GENERIC_IRQ_PROBE boolean {
 default [y] if []
}
config GENERIC_PENDING_IRQ boolean {
 depends on [GENERIC_HARDIRQS && SMP]
 default [y] if [GENERIC_HARDIRQS && SMP]
 inherited [GENERIC_HARDIRQS && SMP]
}
config X86_SMP boolean {
 depends on [X86_32 && SMP && !X86_VOYAGER]
 default [y] if [X86_32 && SMP && !X86_VOYAGER]
 inherited [X86_32 && SMP && !X86_VOYAGER]
}
config X86_HT boolean {
 depends on [SMP]
 depends on [X86_32 && !(X86_VISWS || X86_VOYAGER) || X86_64 && !MK8]
 default [y] if [SMP && (X86_32 && !X86_VISWS && !X86_VOYAGER || X86_64 && !MK8)]
 inherited [SMP && (X86_32 && !X86_VISWS && !X86_VOYAGER || X86_64 && !MK8)]
}
config X86_BIOS_REBOOT boolean {
 depends on [X86_32 && !(X86_VISWS || X86_VOYAGER)]
 default [y] if [X86_32 && !X86_VISWS && !X86_VOYAGER]
 inherited [X86_32 && !X86_VISWS && !X86_VOYAGER]
}
config X86_TRAMPOLINE boolean {
 depends on [X86_SMP || X86_VOYAGER && SMP]
 default [y] if [X86_SMP || X86_VOYAGER && SMP]
 inherited [X86_SMP || X86_VOYAGER && SMP]
}
config KTIME_SCALAR boolean {
 default [X86_32] if []
}
config DEFCONFIG_LIST string {
 depends on [!UML]
 default ["/lib/modules/$UNAME_RELEASE/.config"] if [!UML]
 default ["/etc/kernel-config"] if [!UML]
 default ["/boot/config-$UNAME_RELEASE"] if [!UML]
 default ["arch/$ARCH/defconfig"] if [!UML]
 inherited [!UML]
}
menu "General setup" {
 config EXPERIMENTAL boolean {
  prompt "Prompt for development and/or incomplete code/drivers" if []
 }
 config BROKEN boolean {
 }
 config BROKEN_ON_SMP boolean {
  depends on [BROKEN || !SMP]
  default [y] if [BROKEN || !SMP]
  inherited [BROKEN || !SMP]
 }
 config LOCK_KERNEL boolean {
  depends on [SMP || PREEMPT]
  default [y] if [SMP || PREEMPT]
  inherited [SMP || PREEMPT]
 }
 config INIT_ENV_ARG_LIMIT integer {
  default [32] if [!UML]
  default [128] if [UML]
 }
 config LOCALVERSION string {
  prompt "Local version - append to kernel release" if []
 }
 config LOCALVERSION_AUTO boolean {
  prompt "Automatically append version information to the version string" if []
  default [y] if []
 }
 config SWAP boolean {
  prompt "Support for paging of anonymous memory (swap)" if [MMU && BLOCK]
  depends on [MMU && BLOCK]
  default [y] if [MMU && BLOCK]
  inherited [MMU && BLOCK]
 }
 config SYSVIPC boolean {
  prompt "System V IPC" if []
  config SYSVIPC_SYSCTL boolean {
   depends on [SYSVIPC]
   depends on [SYSCTL]
   default [y] if [SYSVIPC && SYSCTL]
   inherited [SYSVIPC && SYSCTL]
  }
 }
 config POSIX_MQUEUE boolean {
  prompt "POSIX Message Queues" if [NET && EXPERIMENTAL]
  depends on [NET && EXPERIMENTAL]
  inherited [NET && EXPERIMENTAL]
 }
 config BSD_PROCESS_ACCT boolean {
  prompt "BSD Process Accounting" if []
  config BSD_PROCESS_ACCT_V3 boolean {
   prompt "BSD Process Accounting version 3 file format" if [BSD_PROCESS_ACCT]
   depends on [BSD_PROCESS_ACCT]
   default [n] if [BSD_PROCESS_ACCT]
   inherited [BSD_PROCESS_ACCT]
  }
 }
 config TASKSTATS boolean {
  prompt "Export task/process statistics through netlink (EXPERIMENTAL)" if [NET]
  depends on [NET]
  default [n] if [NET]
  inherited [NET]
  config TASK_DELAY_ACCT boolean {
   prompt "Enable per-task delay accounting (EXPERIMENTAL)" if [TASKSTATS]
   depends on [TASKSTATS]
   inherited [TASKSTATS]
  }
  config TASK_XACCT boolean {
   prompt "Enable extended accounting over taskstats (EXPERIMENTAL)" if [TASKSTATS]
   depends on [TASKSTATS]
   inherited [TASKSTATS]
   config TASK_IO_ACCOUNTING boolean {
    prompt "Enable per-task storage I/O accounting (EXPERIMENTAL)" if [TASK_XACCT]
    depends on [TASK_XACCT]
    inherited [TASK_XACCT]
   }
  }
 }
 config USER_NS boolean {
  prompt "User Namespaces (EXPERIMENTAL)" if [EXPERIMENTAL]
  default [n] if [EXPERIMENTAL]
  depends on [EXPERIMENTAL]
  inherited [EXPERIMENTAL]
 }
 config PID_NS boolean {
  prompt "PID Namespaces (EXPERIMENTAL)" if [EXPERIMENTAL]
  default [n] if [EXPERIMENTAL]
  depends on [EXPERIMENTAL]
  inherited [EXPERIMENTAL]
 }
 config AUDIT boolean {
  prompt "Auditing support" if [NET]
  depends on [NET]
  inherited [NET]
  config AUDITSYSCALL boolean {
   prompt "Enable system-call auditing support" if [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64)]
   depends on [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64)]
   default [y] if [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64) && SECURITY_SELINUX]
   inherited [AUDIT && (X86 || PPC || PPC64 || S390 || IA64 || UML || SPARC64)]
   config AUDIT_TREE boolean {
    default [y] if [AUDITSYSCALL && INOTIFY]
    depends on [AUDITSYSCALL && INOTIFY]
    inherited [AUDITSYSCALL && INOTIFY]
   }
  }
 }
 config IKCONFIG tristate {
  prompt "Kernel .config support" if []
  config IKCONFIG_PROC boolean {
   prompt "Enable access to .config through /proc/config.gz" if [IKCONFIG && PROC_FS]
   depends on [IKCONFIG && PROC_FS]
   inherited [IKCONFIG && PROC_FS]
  }
 }
 config LOG_BUF_SHIFT integer {
  prompt "Kernel log buffer size (16 => 64KB, 17 => 128KB)" if []
  range [12 21] if []
  default [17] if [S390 || LOCKDEP]
  default [16] if [X86_NUMAQ || IA64]
  default [15] if [SMP]
  default [14] if []
 }
 config CGROUPS boolean {
  prompt "Control Group support" if []
  config CGROUP_DEBUG boolean {
   prompt "Example debug cgroup subsystem" if [CGROUPS]
   depends on [CGROUPS]
   inherited [CGROUPS]
  }
  config CGROUP_NS boolean {
   prompt "Namespace cgroup subsystem" if [CGROUPS]
   depends on [CGROUPS]
   inherited [CGROUPS]
  }
  config CPUSETS boolean {
   prompt "Cpuset support" if [SMP && CGROUPS]
   depends on [SMP && CGROUPS]
   inherited [SMP && CGROUPS]
  }
 }
 config FAIR_GROUP_SCHED boolean {
  prompt "Fair group CPU scheduler" if []
  default [y] if []
  choice boolean {
   depends on [FAIR_GROUP_SCHED]
   prompt "Basis for grouping tasks" if [FAIR_GROUP_SCHED]
   default [FAIR_USER_SCHED] if [FAIR_GROUP_SCHED]
   config FAIR_USER_SCHED boolean {
    prompt "user id" if [<choice>]
    inherited [<choice>]
   }
   config FAIR_CGROUP_SCHED boolean {
    prompt "Control groups" if [<choice> && CGROUPS]
    depends on [CGROUPS]
    inherited [<choice> && CGROUPS]
   }
  }
 }
 config CGROUP_CPUACCT boolean {
  prompt "Simple CPU accounting cgroup subsystem" if [CGROUPS]
  depends on [CGROUPS]
  inherited [CGROUPS]
 }
 config SYSFS_DEPRECATED boolean {
  prompt "Create deprecated sysfs files" if []
  default [y] if []
 }
 config PROC_PID_CPUSET boolean {
  prompt "Include legacy /proc/<pid>/cpuset file" if [CPUSETS]
  depends on [CPUSETS]
  default [y] if [CPUSETS]
  inherited [CPUSETS]
 }
 config RELAY boolean {
  prompt "Kernel->user space relay support (formerly relayfs)" if []
 }
 config BLK_DEV_INITRD boolean {
  prompt "Initial RAM filesystem and RAM disk (initramfs/initrd) support" if [BROKEN || !FRV]
  depends on [BROKEN || !FRV]
  inherited [BROKEN || !FRV]
  if [BLK_DEV_INITRD] {
   config INITRAMFS_SOURCE string {
    prompt "Initramfs source file(s)" if [BLK_DEV_INITRD]
    default [""] if [BLK_DEV_INITRD]
    inherited [BLK_DEV_INITRD]
    config INITRAMFS_ROOT_UID integer {
     prompt "User ID to map to 0 (user root)" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     depends on [INITRAMFS_SOURCE!=""]
     default [0] if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     inherited [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    }
    config INITRAMFS_ROOT_GID integer {
     prompt "Group ID to map to 0 (group root)" if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     depends on [INITRAMFS_SOURCE!=""]
     default [0] if [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
     inherited [BLK_DEV_INITRD && INITRAMFS_SOURCE!=""]
    }
   }
  }
 }
 config CC_OPTIMIZE_FOR_SIZE boolean {
  prompt "Optimize for size (Look out for broken compilers!)" if [ARM || H8300 || SUPERH || EXPERIMENTAL]
  default [y] if [ARM || H8300 || SUPERH || EXPERIMENTAL]
  depends on [ARM || H8300 || SUPERH || EXPERIMENTAL]
  inherited [ARM || H8300 || SUPERH || EXPERIMENTAL]
 }
 config SYSCTL boolean {
 }
 menuconfig EMBEDDED boolean {
  prompt "Configure standard kernel features (for small systems)" if []
  config UID16 boolean {
   prompt "Enable 16-bit UID system calls" if [(ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION) && EMBEDDED]
   depends on [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION]
   default [y] if [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION]
   inherited [ARM || BLACKFIN || CRIS || FRV || H8300 || X86_32 || M68K || S390 && !64BIT || SUPERH || SPARC32 || SPARC64 && SPARC32_COMPAT || UML || X86_64 && IA32_EMULATION]
  }
  config SYSCTL_SYSCALL boolean {
   prompt "Sysctl syscall support" if [EMBEDDED]
   default [y] if []
   select SYSCTL if []
  }
  config KALLSYMS boolean {
   prompt "Load all symbols for debugging/ksymoops" if [EMBEDDED]
   default [y] if []
   config KALLSYMS_ALL boolean {
    prompt "Include all symbols in kallsyms" if [DEBUG_KERNEL && KALLSYMS]
    depends on [DEBUG_KERNEL && KALLSYMS]
    inherited [DEBUG_KERNEL && KALLSYMS]
   }
   config KALLSYMS_EXTRA_PASS boolean {
    prompt "Do an extra kallsyms pass" if [KALLSYMS]
    depends on [KALLSYMS]
    inherited [KALLSYMS]
   }
  }
  config HOTPLUG boolean {
   prompt "Support for hot-pluggable devices" if [EMBEDDED]
   default [y] if []
  }
  config PRINTK boolean {
   default [y] if []
   prompt "Enable support for printk" if [EMBEDDED]
  }
  config BUG boolean {
   prompt "BUG() support" if [EMBEDDED]
   default [y] if []
  }
  config ELF_CORE boolean {
   default [y] if []
   prompt "Enable ELF core dumps" if [EMBEDDED]
  }
  config BASE_FULL boolean {
   default [y] if []
   prompt "Enable full-sized data structures for core" if [EMBEDDED]
  }
  config FUTEX boolean {
   prompt "Enable futex support" if [EMBEDDED]
   default [y] if []
   select RT_MUTEXES if []
  }
 }
 config ANON_INODES boolean {
 }
 config EPOLL boolean {
  prompt "Enable eventpoll support" if [EMBEDDED]
  default [y] if []
  select ANON_INODES if []
 }
 config SIGNALFD boolean {
  prompt "Enable signalfd() system call" if [EMBEDDED]
  select ANON_INODES if []
  default [y] if []
 }
 config TIMERFD boolean {
  prompt "Enable timerfd() system call" if [BROKEN && EMBEDDED]
  select ANON_INODES if [BROKEN]
  depends on [BROKEN]
  default [y] if [BROKEN]
  inherited [BROKEN]
 }
 config EVENTFD boolean {
  prompt "Enable eventfd() system call" if [EMBEDDED]
  select ANON_INODES if []
  default [y] if []
 }
 config SHMEM boolean {
  prompt "Use full shmem filesystem" if [MMU && EMBEDDED]
  default [y] if [MMU]
  depends on [MMU]
  inherited [MMU]
 }
 config VM_EVENT_COUNTERS boolean {
  default [y] if []
  prompt "Enable VM event counters for /proc/vmstat" if [EMBEDDED]
 }
 config SLUB_DEBUG boolean {
  default [y] if [SLUB]
  prompt "Enable SLUB debugging support" if [SLUB && EMBEDDED]
  depends on [SLUB]
  inherited [SLUB]
 }
 choice boolean {
  prompt "Choose SLAB allocator" if []
  default [SLUB] if []
  config SLAB boolean {
   prompt "SLAB" if [<choice>]
   inherited [<choice>]
  }
  config SLUB boolean {
   prompt "SLUB (Unqueued Allocator)" if [<choice>]
   inherited [<choice>]
  }
  config SLOB boolean {
   depends on [EMBEDDED]
   prompt "SLOB (Simple Allocator)" if [<choice> && EMBEDDED]
   inherited [<choice> && EMBEDDED]
  }
 }
}
config SLABINFO boolean {
 depends on [PROC_FS]
 depends on [SLAB || SLUB]
 default [y] if [PROC_FS && (SLAB || SLUB)]
 inherited [PROC_FS && (SLAB || SLUB)]
}
config RT_MUTEXES boolean {
 select PLIST if []
}
config TINY_SHMEM boolean {
 default [!SHMEM] if []
}
config BASE_SMALL integer {
 default [0] if [BASE_FULL]
 default [1] if [!BASE_FULL]
}
menuconfig MODULES boolean {
 prompt "Enable loadable module support" if []
 config MODULE_UNLOAD boolean {
  prompt "Module unloading" if [MODULES]
  depends on [MODULES]
  inherited [MODULES]
  config MODULE_FORCE_UNLOAD boolean {
   prompt "Forced module unloading" if [MODULE_UNLOAD && EXPERIMENTAL]
   depends on [MODULE_UNLOAD && EXPERIMENTAL]
   inherited [MODULE_UNLOAD && EXPERIMENTAL]
  }
 }
 config MODVERSIONS boolean {
  prompt "Module versioning support" if [MODULES]
  depends on [MODULES]
  inherited [MODULES]
 }
 config MODULE_SRCVERSION_ALL boolean {
  prompt "Source checksum for all modules" if [MODULES]
  depends on [MODULES]
  inherited [MODULES]
 }
 config KMOD boolean {
  prompt "Automatic kernel module loading" if [MODULES]
  depends on [MODULES]
  inherited [MODULES]
 }
}
config STOP_MACHINE boolean {
 default [y] if [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
 depends on [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
 inherited [SMP && MODULE_UNLOAD || HOTPLUG_CPU]
}
menuconfig BLOCK boolean {
 prompt "Enable the block layer" if [EMBEDDED]
 default [y] if []
 if [BLOCK] {
  config LBD boolean {
   prompt "Support for Large Block Devices" if [BLOCK && !64BIT]
   depends on [!64BIT]
   inherited [BLOCK && !64BIT]
  }
  config BLK_DEV_IO_TRACE boolean {
   prompt "Support for tracing block io actions" if [BLOCK && SYSFS]
   depends on [SYSFS]
   select RELAY if [BLOCK && SYSFS]
   select DEBUG_FS if [BLOCK && SYSFS]
   inherited [BLOCK && SYSFS]
  }
  config LSF boolean {
   prompt "Support for Large Single Files" if [BLOCK && !64BIT]
   depends on [!64BIT]
   inherited [BLOCK && !64BIT]
  }
  config BLK_DEV_BSG boolean {
   prompt "Block layer SG support v4 (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
 }
 config BLOCK_COMPAT boolean {
  depends on [BLOCK && COMPAT]
  default [y] if [BLOCK && COMPAT]
  inherited [BLOCK && COMPAT]
 }
 if [BLOCK] {
  menu "IO Schedulers" {
   depends on [BLOCK]
   config IOSCHED_NOOP boolean {
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_AS tristate {
    prompt "Anticipatory I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_DEADLINE tristate {
    prompt "Deadline I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   config IOSCHED_CFQ tristate {
    prompt "CFQ I/O scheduler" if [BLOCK]
    default [y] if [BLOCK]
    inherited [BLOCK]
   }
   choice boolean {
    prompt "Default I/O scheduler" if [BLOCK]
    default [DEFAULT_CFQ] if [BLOCK]
    config DEFAULT_AS boolean {
     prompt "Anticipatory" if [<choice> && IOSCHED_AS="y"]
     inherited [<choice>]
    }
    config DEFAULT_DEADLINE boolean {
     prompt "Deadline" if [<choice> && IOSCHED_DEADLINE="y"]
     inherited [<choice>]
    }
    config DEFAULT_CFQ boolean {
     prompt "CFQ" if [<choice> && IOSCHED_CFQ="y"]
     inherited [<choice>]
    }
    config DEFAULT_NOOP boolean {
     prompt "No-op" if [<choice>]
     inherited [<choice>]
    }
   }
   config DEFAULT_IOSCHED string {
    default ["anticipatory"] if [BLOCK && DEFAULT_AS]
    default ["deadline"] if [BLOCK && DEFAULT_DEADLINE]
    default ["cfq"] if [BLOCK && DEFAULT_CFQ]
    default ["noop"] if [BLOCK && DEFAULT_NOOP]
    inherited [BLOCK]
   }
  }
 }
}
config PREEMPT_NOTIFIERS boolean {
}
menu "Processor type and features" {
 config TICK_ONESHOT boolean {
  default [n] if []
 }
 config NO_HZ boolean {
  prompt "Tickless System (Dynamic Ticks)" if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  depends on [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  select TICK_ONESHOT if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  inherited [GENERIC_TIME && GENERIC_CLOCKEVENTS]
 }
 config HIGH_RES_TIMERS boolean {
  prompt "High Resolution Timer Support" if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  depends on [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  select TICK_ONESHOT if [GENERIC_TIME && GENERIC_CLOCKEVENTS]
  inherited [GENERIC_TIME && GENERIC_CLOCKEVENTS]
 }
 config GENERIC_CLOCKEVENTS_BUILD boolean {
  default [y] if [GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR]
  depends on [GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR]
  inherited [GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR]
 }
 config SMP boolean {
  prompt "Symmetric multi-processing support" if []
 }
 choice boolean {
  prompt "Subarchitecture Type" if []
  default [X86_PC] if []
  config X86_PC boolean {
   prompt "PC-compatible" if [<choice>]
   inherited [<choice>]
  }
  config X86_ELAN boolean {
   prompt "AMD Elan" if [<choice> && X86_32]
   depends on [X86_32]
   inherited [<choice> && X86_32]
  }
  config X86_VOYAGER boolean {
   prompt "Voyager (NCR)" if [<choice> && X86_32]
   depends on [X86_32]
   select SMP if [<choice> && X86_32 && !BROKEN]
   inherited [<choice> && X86_32]
  }
  config X86_NUMAQ boolean {
   prompt "NUMAQ (IBM/Sequent)" if [<choice> && X86_32]
   select SMP if [<choice> && X86_32]
   select NUMA if [<choice> && X86_32]
   depends on [X86_32]
   inherited [<choice> && X86_32]
  }
  config X86_SUMMIT boolean {
   prompt "Summit/EXA (IBM x440)" if [<choice> && X86_32 && SMP]
   depends on [X86_32 && SMP]
   inherited [<choice> && X86_32 && SMP]
  }
  config X86_BIGSMP boolean {
   prompt "Support for other sub-arch SMP systems with more than 8 CPUs" if [<choice> && X86_32 && SMP]
   depends on [X86_32 && SMP]
   inherited [<choice> && X86_32 && SMP]
  }
  config X86_VISWS boolean {
   prompt "SGI 320/540 (Visual Workstation)" if [<choice> && X86_32]
   depends on [X86_32]
   inherited [<choice> && X86_32]
  }
  config X86_GENERICARCH boolean {
   prompt "Generic architecture (Summit, bigsmp, ES7000, default)" if [<choice> && X86_32]
   depends on [X86_32]
   inherited [<choice> && X86_32]
  }
  config X86_ES7000 boolean {
   prompt "Support for Unisys ES7000 IA32 series" if [<choice> && X86_32 && SMP]
   depends on [X86_32 && SMP]
   inherited [<choice> && X86_32 && SMP]
  }
  config X86_VSMP boolean {
   prompt "Support for ScaleMP vSMP" if [<choice> && X86_64 && PCI]
   depends on [X86_64 && PCI]
   inherited [<choice> && X86_64 && PCI]
  }
 }
 config SCHED_NO_NO_OMIT_FRAME_POINTER boolean {
  prompt "Single-depth WCHAN output" if [X86_32]
  default [y] if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config PARAVIRT boolean {
  depends on [X86_32 && !(X86_VISWS || X86_VOYAGER)]
  inherited [X86_32 && !X86_VISWS && !X86_VOYAGER]
 }
 menuconfig PARAVIRT_GUEST boolean {
  prompt "Paravirtualized guest support" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
  if [PARAVIRT_GUEST] {
   config XEN boolean {
    prompt "Xen guest support" if [PARAVIRT_GUEST && X86_CMPXCHG && X86_TSC && !NEED_MULTIPLE_NODES && !X86_VISWS && !X86_VOYAGER]
    select PARAVIRT if [PARAVIRT_GUEST && X86_CMPXCHG && X86_TSC && !NEED_MULTIPLE_NODES && !X86_VISWS && !X86_VOYAGER]
    depends on [X86_CMPXCHG && X86_TSC && !NEED_MULTIPLE_NODES && !(X86_VISWS || X86_VOYAGER)]
    inherited [PARAVIRT_GUEST && X86_CMPXCHG && X86_TSC && !NEED_MULTIPLE_NODES && !X86_VISWS && !X86_VOYAGER]
   }
   config VMI boolean {
    prompt "VMI Guest support" if [PARAVIRT_GUEST && !X86_VISWS && !X86_VOYAGER]
    select PARAVIRT if [PARAVIRT_GUEST && !X86_VISWS && !X86_VOYAGER]
    depends on [!(X86_VISWS || X86_VOYAGER)]
    inherited [PARAVIRT_GUEST && !X86_VISWS && !X86_VOYAGER]
   }
   config LGUEST_GUEST boolean {
    prompt "Lguest guest support" if [PARAVIRT_GUEST && !X86_PAE && !X86_VISWS && !X86_VOYAGER]
    select PARAVIRT if [PARAVIRT_GUEST && !X86_PAE && !X86_VISWS && !X86_VOYAGER]
    depends on [!X86_PAE]
    depends on [!(X86_VISWS || X86_VOYAGER)]
    select VIRTIO if [PARAVIRT_GUEST && !X86_PAE && !X86_VISWS && !X86_VOYAGER]
    select VIRTIO_RING if [PARAVIRT_GUEST && !X86_PAE && !X86_VISWS && !X86_VOYAGER]
    select VIRTIO_CONSOLE if [PARAVIRT_GUEST && !X86_PAE && !X86_VISWS && !X86_VOYAGER]
    inherited [PARAVIRT_GUEST && !X86_PAE && !X86_VISWS && !X86_VOYAGER]
   }
  }
 }
 config ACPI_SRAT boolean {
  default [y] if [X86_32 && ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  depends on [X86_32 && ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  select ACPI_NUMA if [X86_32 && ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  inherited [X86_32 && ACPI && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
 }
 config HAVE_ARCH_PARSE_SRAT boolean {
  default [y] if [ACPI_SRAT]
  depends on [ACPI_SRAT]
  inherited [ACPI_SRAT]
 }
 config X86_SUMMIT_NUMA boolean {
  default [y] if [X86_32 && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  depends on [X86_32 && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
  inherited [X86_32 && NUMA && (X86_SUMMIT || X86_GENERICARCH)]
 }
 config X86_CYCLONE_TIMER boolean {
  default [y] if [X86_32 && X86_SUMMIT || X86_GENERICARCH]
  depends on [X86_32 && X86_SUMMIT || X86_GENERICARCH]
  inherited [X86_32 && X86_SUMMIT || X86_GENERICARCH]
 }
 config ES7000_CLUSTERED_APIC boolean {
  default [y] if [SMP && X86_ES7000 && MPENTIUMIII]
  depends on [SMP && X86_ES7000 && MPENTIUMIII]
  inherited [SMP && X86_ES7000 && MPENTIUMIII]
 }
 if [!X86_ELAN] {
  choice boolean {
   prompt "Processor family" if [!X86_ELAN]
   default [M686] if [!X86_ELAN && X86_32]
   default [GENERIC_CPU] if [!X86_ELAN && X86_64]
   config M386 boolean {
    prompt "386" if [<choice> && X86_32 && !UML]
    depends on [X86_32 && !UML]
    inherited [<choice> && X86_32 && !UML]
   }
   config M486 boolean {
    prompt "486" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M586 boolean {
    prompt "586/K5/5x86/6x86/6x86MX" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M586TSC boolean {
    prompt "Pentium-Classic" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M586MMX boolean {
    prompt "Pentium-MMX" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config M686 boolean {
    prompt "Pentium-Pro" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUMII boolean {
    prompt "Pentium-II/Celeron(pre-Coppermine)" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUMIII boolean {
    prompt "Pentium-III/Celeron(Coppermine)/Pentium-III Xeon" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUMM boolean {
    prompt "Pentium M" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPENTIUM4 boolean {
    prompt "Pentium-4/Celeron(P4-based)/Pentium-4 M/older Xeon" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MK6 boolean {
    prompt "K6/K6-II/K6-III" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MK7 boolean {
    prompt "Athlon/Duron/K7" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MK8 boolean {
    prompt "Opteron/Athlon64/Hammer/K8" if [<choice>]
    inherited [<choice>]
   }
   config MCRUSOE boolean {
    prompt "Crusoe" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MEFFICEON boolean {
    prompt "Efficeon" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MWINCHIPC6 boolean {
    prompt "Winchip-C6" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MWINCHIP2 boolean {
    prompt "Winchip-2" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MWINCHIP3D boolean {
    prompt "Winchip-2A/Winchip-3" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MGEODEGX1 boolean {
    prompt "GeodeGX1" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MGEODE_LX boolean {
    prompt "Geode GX/LX" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MCYRIXIII boolean {
    prompt "CyrixIII/VIA-C3" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MVIAC3_2 boolean {
    prompt "VIA C3-2 (Nehemiah)" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MVIAC7 boolean {
    prompt "VIA C7" if [<choice> && X86_32]
    depends on [X86_32]
    inherited [<choice> && X86_32]
   }
   config MPSC boolean {
    prompt "Intel P4 / older Netburst based Xeon" if [<choice> && X86_64]
    depends on [X86_64]
    inherited [<choice> && X86_64]
   }
   config MCORE2 boolean {
    prompt "Core 2/newer Xeon" if [<choice>]
    inherited [<choice>]
   }
   config GENERIC_CPU boolean {
    prompt "Generic-x86-64" if [<choice> && X86_64]
    depends on [X86_64]
    inherited [<choice> && X86_64]
   }
  }
  config X86_GENERIC boolean {
   prompt "Generic x86 support" if [!X86_ELAN && X86_32]
   depends on [X86_32]
   inherited [!X86_ELAN && X86_32]
  }
 }
 config X86_L1_CACHE_BYTES integer {
  default [128] if [X86_64 && (GENERIC_CPU || MPSC)]
  default [64] if [X86_64 && (MK8 || MCORE2)]
  depends on [X86_64]
  inherited [X86_64]
 }
 config X86_INTERNODE_CACHE_BYTES integer {
  default [4096] if [X86_64 && X86_VSMP]
  default [X86_L1_CACHE_BYTES] if [X86_64 && !X86_VSMP]
  depends on [X86_64]
  inherited [X86_64]
 }
 config X86_CMPXCHG boolean {
  default [X86_64 || X86_32 && !M386] if []
 }
 config X86_L1_CACHE_SHIFT integer {
  default [7] if [MPENTIUM4 || X86_GENERIC || GENERIC_CPU || MPSC]
  default [4] if [X86_ELAN || M486 || M386 || MGEODEGX1]
  default [5] if [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCRUSOE || MEFFICEON || MCYRIXIII || MK6 || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || M586 || MVIAC3_2 || MGEODE_LX]
  default [6] if [MK7 || MK8 || MPENTIUMM || MCORE2 || MVIAC7]
 }
 config X86_XADD boolean {
  depends on [X86_32 && !M386]
  default [y] if [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_PPRO_FENCE boolean {
  depends on [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
  default [y] if [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
  inherited [M686 || M586MMX || M586TSC || M586 || M486 || M386 || MGEODEGX1]
 }
 config X86_F00F_BUG boolean {
  depends on [M586MMX || M586TSC || M586 || M486 || M386]
  default [y] if [M586MMX || M586TSC || M586 || M486 || M386]
  inherited [M586MMX || M586TSC || M586 || M486 || M386]
 }
 config X86_WP_WORKS_OK boolean {
  depends on [X86_32 && !M386]
  default [y] if [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_INVLPG boolean {
  depends on [X86_32 && !M386]
  default [y] if [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_BSWAP boolean {
  depends on [X86_32 && !M386]
  default [y] if [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_POPAD_OK boolean {
  depends on [X86_32 && !M386]
  default [y] if [X86_32 && !M386]
  inherited [X86_32 && !M386]
 }
 config X86_ALIGNMENT_16 boolean {
  depends on [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
  default [y] if [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
  inherited [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || X86_ELAN || MK6 || M586MMX || M586TSC || M586 || M486 || MVIAC3_2 || MGEODEGX1]
 }
 config X86_GOOD_APIC boolean {
  depends on [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || MK8 || MEFFICEON || MCORE2 || MVIAC7 || X86_64]
  default [y] if [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || MK8 || MEFFICEON || MCORE2 || MVIAC7 || X86_64]
  inherited [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || MK8 || MEFFICEON || MCORE2 || MVIAC7 || X86_64]
 }
 config X86_INTEL_USERCOPY boolean {
  depends on [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
  default [y] if [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
  inherited [MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M586MMX || X86_GENERIC || MK8 || MK7 || MEFFICEON || MCORE2]
 }
 config X86_USE_PPRO_CHECKSUM boolean {
  depends on [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2]
  default [y] if [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2]
  inherited [MWINCHIP3D || MWINCHIP2 || MWINCHIPC6 || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MK8 || MVIAC3_2 || MEFFICEON || MGEODE_LX || MCORE2]
 }
 config X86_USE_3DNOW boolean {
  depends on [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
  default [y] if [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
  inherited [(MCYRIXIII || MK7 || MGEODE_LX) && !UML]
 }
 config X86_OOSTORE boolean {
  depends on [(MWINCHIP3D || MWINCHIP2 || MWINCHIPC6) && MTRR]
  default [y] if [(MWINCHIP3D || MWINCHIP2 || MWINCHIPC6) && MTRR]
  inherited [(MWINCHIP3D || MWINCHIP2 || MWINCHIPC6) && MTRR]
 }
 config X86_TSC boolean {
  depends on [(MWINCHIP3D || MWINCHIP2 || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2) && !X86_NUMAQ || X86_64]
  default [y] if [(MWINCHIP3D || MWINCHIP2 || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2) && !X86_NUMAQ || X86_64]
  inherited [(MWINCHIP3D || MWINCHIP2 || MCRUSOE || MEFFICEON || MCYRIXIII || MK7 || MK6 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || M586MMX || M586TSC || MK8 || MVIAC3_2 || MVIAC7 || MGEODEGX1 || MGEODE_LX || MCORE2) && !X86_NUMAQ || X86_64]
 }
 config X86_CMOV boolean {
  depends on [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7]
  default [y] if [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7]
  inherited [MK7 || MPENTIUM4 || MPENTIUMM || MPENTIUMIII || MPENTIUMII || M686 || MVIAC3_2 || MVIAC7]
 }
 config X86_MINIMUM_CPU_FAMILY integer {
  default [64] if [X86_64]
  default [4] if [X86_32 && (X86_XADD || X86_CMPXCHG || X86_BSWAP || X86_WP_WORKS_OK)]
  default [3] if []
 }
 config HPET_TIMER boolean {
  prompt "HPET Timer Support" if [X86_32]
  default [X86_64] if []
  config HPET_EMULATE_RTC boolean {
   depends on [HPET_TIMER && RTC="y"]
   default [y] if [HPET_TIMER && RTC="y"]
   inherited [HPET_TIMER && RTC="y"]
  }
 }
 config GART_IOMMU boolean {
  prompt "GART IOMMU support" if [X86_64 && PCI && EMBEDDED]
  default [y] if [X86_64 && PCI]
  select SWIOTLB if [X86_64 && PCI]
  select AGP if [X86_64 && PCI]
  depends on [X86_64 && PCI]
  inherited [X86_64 && PCI]
 }
 config CALGARY_IOMMU boolean {
  prompt "IBM Calgary IOMMU support" if [X86_64 && PCI && EXPERIMENTAL]
  select SWIOTLB if [X86_64 && PCI && EXPERIMENTAL]
  depends on [X86_64 && PCI && EXPERIMENTAL]
  inherited [X86_64 && PCI && EXPERIMENTAL]
  config CALGARY_IOMMU_ENABLED_BY_DEFAULT boolean {
   prompt "Should Calgary be enabled by default?" if [CALGARY_IOMMU]
   default [y] if [CALGARY_IOMMU]
   depends on [CALGARY_IOMMU]
   inherited [CALGARY_IOMMU]
  }
 }
 config SWIOTLB boolean {
 }
 config NR_CPUS integer {
  prompt "Maximum number of CPUs (2-255)" if [SMP]
  range [2 255] if [SMP]
  depends on [SMP]
  default [32] if [SMP && (X86_NUMAQ || X86_SUMMIT || X86_BIGSMP || X86_ES7000)]
  default [8] if [SMP]
  inherited [SMP]
 }
 config SCHED_SMT boolean {
  prompt "SMT (Hyperthreading) scheduler support" if [X86_64 && SMP || X86_32 && X86_HT]
  depends on [X86_64 && SMP || X86_32 && X86_HT]
  inherited [X86_64 && SMP || X86_32 && X86_HT]
 }
 config SCHED_MC boolean {
  prompt "Multi-core scheduler support" if [X86_64 && SMP || X86_32 && X86_HT]
  depends on [X86_64 && SMP || X86_32 && X86_HT]
  default [y] if [X86_64 && SMP || X86_32 && X86_HT]
  inherited [X86_64 && SMP || X86_32 && X86_HT]
 }
 choice boolean {
  prompt "Preemption Model" if []
  default [PREEMPT_NONE] if []
  config PREEMPT_NONE boolean {
   prompt "No Forced Preemption (Server)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT_VOLUNTARY boolean {
   prompt "Voluntary Kernel Preemption (Desktop)" if [<choice>]
   inherited [<choice>]
  }
  config PREEMPT boolean {
   prompt "Preemptible Kernel (Low-Latency Desktop)" if [<choice>]
   inherited [<choice>]
  }
 }
 config PREEMPT_BKL boolean {
  prompt "Preempt The Big Kernel Lock" if [SMP || PREEMPT]
  depends on [SMP || PREEMPT]
  default [y] if [SMP || PREEMPT]
  inherited [SMP || PREEMPT]
 }
 config X86_UP_APIC boolean {
  prompt "Local APIC support on uniprocessors" if [X86_32 && !SMP && !X86_VISWS && !X86_VOYAGER && !X86_GENERICARCH]
  depends on [X86_32 && !SMP && !(X86_VISWS || X86_VOYAGER || X86_GENERICARCH)]
  inherited [X86_32 && !SMP && !X86_VISWS && !X86_VOYAGER && !X86_GENERICARCH]
  config X86_UP_IOAPIC boolean {
   prompt "IO-APIC support on uniprocessors" if [X86_UP_APIC]
   depends on [X86_UP_APIC]
   inherited [X86_UP_APIC]
  }
 }
 config X86_LOCAL_APIC boolean {
  depends on [X86_64 || X86_32 && (X86_UP_APIC || (X86_VISWS || SMP) && !X86_VOYAGER || X86_GENERICARCH)]
  default [y] if [X86_64 || X86_32 && (X86_UP_APIC || (X86_VISWS || SMP) && !X86_VOYAGER || X86_GENERICARCH)]
  inherited [X86_64 || X86_32 && (X86_UP_APIC || (X86_VISWS || SMP) && !X86_VOYAGER || X86_GENERICARCH)]
 }
 config X86_IO_APIC boolean {
  depends on [X86_64 || X86_32 && (X86_UP_IOAPIC || SMP && !(X86_VISWS || X86_VOYAGER) || X86_GENERICARCH)]
  default [y] if [X86_64 || X86_32 && (X86_UP_IOAPIC || SMP && !X86_VISWS && !X86_VOYAGER || X86_GENERICARCH)]
  inherited [X86_64 || X86_32 && (X86_UP_IOAPIC || SMP && !X86_VISWS && !X86_VOYAGER || X86_GENERICARCH)]
 }
 config X86_VISWS_APIC boolean {
  depends on [X86_32 && X86_VISWS]
  default [y] if [X86_32 && X86_VISWS]
  inherited [X86_32 && X86_VISWS]
 }
 config X86_MCE boolean {
  prompt "Machine Check Exception" if [!X86_VOYAGER]
  depends on [!X86_VOYAGER]
  inherited [!X86_VOYAGER]
  config X86_MCE_INTEL boolean {
   prompt "Intel MCE features" if [X86_64 && X86_MCE && X86_LOCAL_APIC]
   depends on [X86_64 && X86_MCE && X86_LOCAL_APIC]
   default [y] if [X86_64 && X86_MCE && X86_LOCAL_APIC]
   inherited [X86_64 && X86_MCE && X86_LOCAL_APIC]
  }
  config X86_MCE_AMD boolean {
   prompt "AMD MCE features" if [X86_64 && X86_MCE && X86_LOCAL_APIC]
   depends on [X86_64 && X86_MCE && X86_LOCAL_APIC]
   default [y] if [X86_64 && X86_MCE && X86_LOCAL_APIC]
   inherited [X86_64 && X86_MCE && X86_LOCAL_APIC]
  }
  config X86_MCE_NONFATAL tristate {
   prompt "Check for non-fatal errors on AMD Athlon/Duron / Intel Pentium 4" if [X86_32 && X86_MCE]
   depends on [X86_32 && X86_MCE]
   inherited [X86_32 && X86_MCE]
  }
  config X86_MCE_P4THERMAL boolean {
   prompt "check for P4 thermal throttling interrupt." if [X86_32 && X86_MCE && (X86_UP_APIC || SMP) && !X86_VISWS]
   depends on [X86_32 && X86_MCE && (X86_UP_APIC || SMP) && !X86_VISWS]
   inherited [X86_32 && X86_MCE && (X86_UP_APIC || SMP) && !X86_VISWS]
  }
 }
 config VM86 boolean {
  prompt "Enable VM86 support" if [X86_32 && EMBEDDED]
  default [y] if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config TOSHIBA tristate {
  prompt "Toshiba Laptop support" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config I8K tristate {
  prompt "Dell laptop support" if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config X86_REBOOTFIXUPS boolean {
  prompt "Enable X86 board specific fixups for reboot" if [X86_32 && X86]
  depends on [X86_32 && X86]
  default [n] if [X86_32 && X86]
  inherited [X86_32 && X86]
 }
 config MICROCODE tristate {
  prompt "/dev/cpu/microcode - Intel IA32 CPU microcode support" if []
  select FW_LOADER if []
  config MICROCODE_OLD_INTERFACE boolean {
   depends on [MICROCODE]
   default [y] if [MICROCODE]
   inherited [MICROCODE]
  }
 }
 config X86_MSR tristate {
  prompt "/dev/cpu/*/msr - Model-specific register support" if []
 }
 config X86_CPUID tristate {
  prompt "/dev/cpu/*/cpuid - CPU information support" if []
 }
 choice boolean {
  prompt "High Memory Support" if [X86_32]
  default [HIGHMEM4G] if [X86_32 && !X86_NUMAQ]
  default [HIGHMEM64G] if [X86_32 && X86_NUMAQ]
  depends on [X86_32]
  config NOHIGHMEM boolean {
   prompt "off" if [<choice> && !X86_NUMAQ]
   depends on [!X86_NUMAQ]
   inherited [<choice> && !X86_NUMAQ]
  }
  config HIGHMEM4G boolean {
   prompt "4GB" if [<choice> && !X86_NUMAQ]
   depends on [!X86_NUMAQ]
   inherited [<choice> && !X86_NUMAQ]
  }
  config HIGHMEM64G boolean {
   prompt "64GB" if [<choice> && !M386 && !M486]
   depends on [!M386 && !M486]
   select X86_PAE if [<choice> && !M386 && !M486]
   inherited [<choice> && !M386 && !M486]
  }
 }
 choice boolean {
  depends on [EXPERIMENTAL]
  prompt "Memory split" if [EXPERIMENTAL && X86_32 && EMBEDDED]
  default [VMSPLIT_3G] if [EXPERIMENTAL && X86_32]
  depends on [X86_32]
  config VMSPLIT_3G boolean {
   prompt "3G/1G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
  config VMSPLIT_3G_OPT boolean {
   depends on [!X86_PAE]
   prompt "3G/1G user/kernel split (for full 1G low memory)" if [<choice> && !X86_PAE]
   inherited [<choice> && !X86_PAE]
  }
  config VMSPLIT_2G boolean {
   prompt "2G/2G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
  config VMSPLIT_2G_OPT boolean {
   depends on [!X86_PAE]
   prompt "2G/2G user/kernel split (for full 2G low memory)" if [<choice> && !X86_PAE]
   inherited [<choice> && !X86_PAE]
  }
  config VMSPLIT_1G boolean {
   prompt "1G/3G user/kernel split" if [<choice>]
   inherited [<choice>]
  }
 }
 config PAGE_OFFSET hex {
  default [0xB0000000] if [X86_32 && VMSPLIT_3G_OPT]
  default [0x80000000] if [X86_32 && VMSPLIT_2G]
  default [0x78000000] if [X86_32 && VMSPLIT_2G_OPT]
  default [0x40000000] if [X86_32 && VMSPLIT_1G]
  default [0xC0000000] if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
 config HIGHMEM boolean {
  depends on [X86_32 && (HIGHMEM64G || HIGHMEM4G)]
  default [y] if [X86_32 && (HIGHMEM64G || HIGHMEM4G)]
  inherited [X86_32 && (HIGHMEM64G || HIGHMEM4G)]
 }
 config X86_PAE boolean {
  prompt "PAE (Physical Address Extension) Support" if [X86_32 && !HIGHMEM4G]
  default [n] if [X86_32 && !HIGHMEM4G]
  depends on [X86_32 && !HIGHMEM4G]
  select RESOURCES_64BIT if [X86_32 && !HIGHMEM4G]
  inherited [X86_32 && !HIGHMEM4G]
 }
 config NUMA boolean {
  prompt "Numa Memory Allocation and Scheduler Support (EXPERIMENTAL)" if [SMP && (X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI) && EXPERIMENTAL)]
  depends on [SMP]
  depends on [X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI) && EXPERIMENTAL]
  default [n] if [SMP && (X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI) && EXPERIMENTAL) && X86_PC]
  default [y] if [SMP && (X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI) && EXPERIMENTAL) && (X86_NUMAQ || X86_SUMMIT)]
  inherited [SMP && (X86_64 || X86_32 && HIGHMEM64G && (X86_NUMAQ || (X86_SUMMIT || X86_GENERICARCH) && ACPI) && EXPERIMENTAL)]
 }
 config K8_NUMA boolean {
  prompt "Old style AMD Opteron NUMA detection" if [X86_64 && NUMA && PCI]
  depends on [X86_64 && NUMA && PCI]
  default [y] if [X86_64 && NUMA && PCI]
  inherited [X86_64 && NUMA && PCI]
 }
 config X86_64_ACPI_NUMA boolean {
  prompt "ACPI NUMA detection" if [X86_64 && NUMA && ACPI && PCI]
  depends on [X86_64 && NUMA && ACPI && PCI]
  select ACPI_NUMA if [X86_64 && NUMA && ACPI && PCI]
  default [y] if [X86_64 && NUMA && ACPI && PCI]
  inherited [X86_64 && NUMA && ACPI && PCI]
 }
 config NUMA_EMU boolean {
  prompt "NUMA emulation" if [X86_64 && NUMA]
  depends on [X86_64 && NUMA]
  inherited [X86_64 && NUMA]
 }
 config NODES_SHIFT integer {
  default [6] if [NEED_MULTIPLE_NODES && X86_64]
  default [4] if [NEED_MULTIPLE_NODES && X86_NUMAQ]
  default [3] if [NEED_MULTIPLE_NODES]
  depends on [NEED_MULTIPLE_NODES]
  inherited [NEED_MULTIPLE_NODES]
 }
 config HAVE_ARCH_BOOTMEM_NODE boolean {
  depends on [X86_32 && NUMA]
  default [y] if [X86_32 && NUMA]
  inherited [X86_32 && NUMA]
 }
 config ARCH_HAVE_MEMORY_PRESENT boolean {
  depends on [X86_32 && DISCONTIGMEM]
  default [y] if [X86_32 && DISCONTIGMEM]
  inherited [X86_32 && DISCONTIGMEM]
 }
 config NEED_NODE_MEMMAP_SIZE boolean {
  depends on [X86_32 && (DISCONTIGMEM || SPARSEMEM)]
  default [y] if [X86_32 && (DISCONTIGMEM || SPARSEMEM)]
  inherited [X86_32 && (DISCONTIGMEM || SPARSEMEM)]
 }
 config HAVE_ARCH_ALLOC_REMAP boolean {
  depends on [X86_32 && NUMA]
  default [y] if [X86_32 && NUMA]
  inherited [X86_32 && NUMA]
 }
 config ARCH_FLATMEM_ENABLE boolean {
  default [y] if [X86_32 && ARCH_SELECT_MEMORY_MODEL && X86_PC || X86_64 && !NUMA]
  depends on [X86_32 && ARCH_SELECT_MEMORY_MODEL && X86_PC || X86_64 && !NUMA]
  inherited [X86_32 && ARCH_SELECT_MEMORY_MODEL && X86_PC || X86_64 && !NUMA]
 }
 config ARCH_DISCONTIGMEM_ENABLE boolean {
  default [y] if [NUMA]
  depends on [NUMA]
  inherited [NUMA]
 }
 config ARCH_DISCONTIGMEM_DEFAULT boolean {
  default [y] if [NUMA]
  depends on [NUMA]
  inherited [NUMA]
 }
 config ARCH_SPARSEMEM_ENABLE boolean {
  default [y] if [NUMA || EXPERIMENTAL && (X86_PC || X86_64)]
  depends on [NUMA || EXPERIMENTAL && (X86_PC || X86_64)]
  select SPARSEMEM_STATIC if [(NUMA || EXPERIMENTAL && (X86_PC || X86_64)) && X86_32]
  select SPARSEMEM_VMEMMAP_ENABLE if [(NUMA || EXPERIMENTAL && (X86_PC || X86_64)) && X86_64]
  inherited [NUMA || EXPERIMENTAL && (X86_PC || X86_64)]
 }
 config ARCH_SELECT_MEMORY_MODEL boolean {
  default [y] if [X86_32 && ARCH_SPARSEMEM_ENABLE]
  depends on [X86_32 && ARCH_SPARSEMEM_ENABLE]
  inherited [X86_32 && ARCH_SPARSEMEM_ENABLE]
 }
 config ARCH_MEMORY_PROBE boolean {
  default [X86_64] if [MEMORY_HOTPLUG]
  depends on [MEMORY_HOTPLUG]
  inherited [MEMORY_HOTPLUG]
 }
 config SELECT_MEMORY_MODEL boolean {
  default [y] if [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  depends on [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
  inherited [EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL]
 }
 choice boolean {
  prompt "Memory model" if [SELECT_MEMORY_MODEL]
  depends on [SELECT_MEMORY_MODEL]
  default [DISCONTIGMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_DEFAULT]
  default [SPARSEMEM_MANUAL] if [SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_DEFAULT]
  default [FLATMEM_MANUAL] if [SELECT_MEMORY_MODEL]
  config FLATMEM_MANUAL boolean {
   prompt "Flat Memory" if [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
   depends on [!(ARCH_DISCONTIGMEM_ENABLE || ARCH_SPARSEMEM_ENABLE) || ARCH_FLATMEM_ENABLE]
   inherited [<choice> && (!ARCH_DISCONTIGMEM_ENABLE && !ARCH_SPARSEMEM_ENABLE || ARCH_FLATMEM_ENABLE)]
  }
  config DISCONTIGMEM_MANUAL boolean {
   prompt "Discontiguous Memory" if [<choice> && ARCH_DISCONTIGMEM_ENABLE]
   depends on [ARCH_DISCONTIGMEM_ENABLE]
   inherited [<choice> && ARCH_DISCONTIGMEM_ENABLE]
  }
  config SPARSEMEM_MANUAL boolean {
   prompt "Sparse Memory" if [<choice> && ARCH_SPARSEMEM_ENABLE]
   depends on [ARCH_SPARSEMEM_ENABLE]
   inherited [<choice> && ARCH_SPARSEMEM_ENABLE]
  }
 }
 config DISCONTIGMEM boolean {
  default [y] if [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  depends on [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
  inherited [!SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE || DISCONTIGMEM_MANUAL]
 }
 config SPARSEMEM boolean {
  default [y] if [SPARSEMEM_MANUAL]
  depends on [SPARSEMEM_MANUAL]
  inherited [SPARSEMEM_MANUAL]
 }
 config FLATMEM boolean {
  default [y] if [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  depends on [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
  inherited [!DISCONTIGMEM && !SPARSEMEM || FLATMEM_MANUAL]
 }
 config FLAT_NODE_MEM_MAP boolean {
  default [y] if [!SPARSEMEM]
  depends on [!SPARSEMEM]
  inherited [!SPARSEMEM]
 }
 config NEED_MULTIPLE_NODES boolean {
  default [y] if [DISCONTIGMEM || NUMA]
  depends on [DISCONTIGMEM || NUMA]
  inherited [DISCONTIGMEM || NUMA]
 }
 config HAVE_MEMORY_PRESENT boolean {
  default [y] if [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  depends on [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
  inherited [ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM]
 }
 config SPARSEMEM_STATIC boolean {
  default [n] if []
 }
 config SPARSEMEM_EXTREME boolean {
  default [y] if [SPARSEMEM && !SPARSEMEM_STATIC]
  depends on [SPARSEMEM && !SPARSEMEM_STATIC]
  inherited [SPARSEMEM && !SPARSEMEM_STATIC]
 }
 config SPARSEMEM_VMEMMAP_ENABLE boolean {
  default [n] if []
 }
 config SPARSEMEM_VMEMMAP boolean {
  prompt "Sparse Memory virtual memmap" if [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  depends on [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  default [y] if [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
  inherited [SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE]
 }
 config MEMORY_HOTPLUG boolean {
  prompt "Allow for memory hot-add" if [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && !HIBERNATION && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC64 || SUPERH)]
  depends on [SPARSEMEM || X86_64_ACPI_NUMA]
  depends on [HOTPLUG && !HIBERNATION && ARCH_ENABLE_MEMORY_HOTPLUG]
  depends on [IA64 || X86 || PPC64 || SUPERH]
  inherited [(SPARSEMEM || X86_64_ACPI_NUMA) && HOTPLUG && !HIBERNATION && ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || X86 || PPC64 || SUPERH)]
 }
 config MEMORY_HOTPLUG_SPARSE boolean {
  default [y] if [SPARSEMEM && MEMORY_HOTPLUG]
  depends on [SPARSEMEM && MEMORY_HOTPLUG]
  inherited [SPARSEMEM && MEMORY_HOTPLUG]
 }
 config MEMORY_HOTREMOVE boolean {
  prompt "Allow for memory hot remove" if [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE && MIGRATION]
  depends on [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE]
  depends on [MIGRATION]
  inherited [MEMORY_HOTPLUG && ARCH_ENABLE_MEMORY_HOTREMOVE && MIGRATION]
 }
 config SPLIT_PTLOCK_CPUS integer {
  default [4096] if [ARM && !CPU_CACHE_VIPT]
  default [4096] if [PARISC && !PA20]
  default [4] if []
 }
 config MIGRATION boolean {
  prompt "Page migration" if [NUMA]
  default [y] if [NUMA]
  depends on [NUMA]
  inherited [NUMA]
 }
 config RESOURCES_64BIT boolean {
  prompt "64 bit Memory and IO resources (EXPERIMENTAL)" if [!64BIT && EXPERIMENTAL]
  default [64BIT] if []
 }
 config ZONE_DMA_FLAG integer {
  default [0] if [!ZONE_DMA]
  default [1] if []
 }
 config BOUNCE boolean {
  default [y] if [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
  depends on [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
  inherited [BLOCK && MMU && (ZONE_DMA || HIGHMEM)]
 }
 config NR_QUICK integer {
  depends on [QUICKLIST]
  default [2] if [QUICKLIST && SUPERH && !SUPERH64]
  default [1] if [QUICKLIST]
  inherited [QUICKLIST]
 }
 config VIRT_TO_BUS boolean {
  default [y] if [!ARCH_NO_VIRT_TO_BUS]
  depends on [!ARCH_NO_VIRT_TO_BUS]
  inherited [!ARCH_NO_VIRT_TO_BUS]
 }
 config HIGHPTE boolean {
  prompt "Allocate 3rd-level pagetables from highmem" if [X86_32 && (HIGHMEM4G || HIGHMEM64G)]
  depends on [X86_32 && (HIGHMEM4G || HIGHMEM64G)]
  inherited [X86_32 && (HIGHMEM4G || HIGHMEM64G)]
 }
 config MATH_EMULATION boolean {
  prompt "Math emulation" if [X86_32]
 }
 config MTRR boolean {
  prompt "MTRR (Memory Type Range Register) support" if []
 }
 config EFI boolean {
  prompt "Boot from EFI support" if [X86_32 && ACPI]
  depends on [X86_32 && ACPI]
  default [n] if [X86_32 && ACPI]
  inherited [X86_32 && ACPI]
 }
 config IRQBALANCE boolean {
  prompt "Enable kernel irq balancing" if [X86_32 && SMP && X86_IO_APIC]
  depends on [X86_32 && SMP && X86_IO_APIC]
  default [y] if [X86_32 && SMP && X86_IO_APIC]
  inherited [X86_32 && SMP && X86_IO_APIC]
 }
 config BOOT_IOREMAP boolean {
  depends on [X86_32 && ((X86_SUMMIT || X86_GENERICARCH) && NUMA || X86 && EFI)]
  default [y] if [X86_32 && ((X86_SUMMIT || X86_GENERICARCH) && NUMA || X86 && EFI)]
  inherited [X86_32 && ((X86_SUMMIT || X86_GENERICARCH) && NUMA || X86 && EFI)]
 }
 config SECCOMP boolean {
  prompt "Enable seccomp to safely compute untrusted bytecode" if [PROC_FS]
  depends on [PROC_FS]
  default [y] if [PROC_FS]
  inherited [PROC_FS]
 }
 config CC_STACKPROTECTOR boolean {
  prompt "Enable -fstack-protector buffer overflow detection (EXPERIMENTAL)" if [X86_64 && EXPERIMENTAL]
  depends on [X86_64 && EXPERIMENTAL]
  inherited [X86_64 && EXPERIMENTAL]
  config CC_STACKPROTECTOR_ALL boolean {
   prompt "Use stack-protector for all functions" if [CC_STACKPROTECTOR]
   depends on [CC_STACKPROTECTOR]
   inherited [CC_STACKPROTECTOR]
  }
 }
 choice boolean {
  prompt "Timer frequency" if []
  default [HZ_250] if []
  config HZ_100 boolean {
   prompt "100 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_250 boolean {
   prompt "250 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_300 boolean {
   prompt "300 HZ" if [<choice>]
   inherited [<choice>]
  }
  config HZ_1000 boolean {
   prompt "1000 HZ" if [<choice>]
   inherited [<choice>]
  }
 }
 config HZ integer {
  default [100] if [HZ_100]
  default [250] if [HZ_250]
  default [300] if [HZ_300]
  default [1000] if [HZ_1000]
 }
 config KEXEC boolean {
  prompt "kexec system call" if []
 }
 config CRASH_DUMP boolean {
  prompt "kernel crash dumps (EXPERIMENTAL)" if [EXPERIMENTAL && (X86_64 || X86_32 && HIGHMEM)]
  depends on [EXPERIMENTAL]
  depends on [X86_64 || X86_32 && HIGHMEM]
  inherited [EXPERIMENTAL && (X86_64 || X86_32 && HIGHMEM)]
 }
 config PHYSICAL_START hex {
  prompt "Physical address where the kernel is loaded" if [EMBEDDED || CRASH_DUMP]
  default [0x1000000] if [X86_NUMAQ]
  default [0x200000] if [X86_64]
  default [0x100000] if []
 }
 config RELOCATABLE boolean {
  prompt "Build a relocatable kernel (EXPERIMENTAL)" if [EXPERIMENTAL]
  depends on [EXPERIMENTAL]
  inherited [EXPERIMENTAL]
 }
 config PHYSICAL_ALIGN hex {
  prompt "Alignment value to which kernel should be aligned" if [X86_32]
  default [0x100000] if [X86_32]
  default [0x200000] if [X86_64]
  range [0x2000 0x400000] if []
 }
 config HOTPLUG_CPU boolean {
  prompt "Support for suspend on SMP and hot-pluggable CPUs (EXPERIMENTAL)" if [SMP && HOTPLUG && EXPERIMENTAL && !X86_VOYAGER]
  depends on [SMP && HOTPLUG && EXPERIMENTAL && !X86_VOYAGER]
  inherited [SMP && HOTPLUG && EXPERIMENTAL && !X86_VOYAGER]
 }
 config COMPAT_VDSO boolean {
  prompt "Compat VDSO support" if [X86_32]
  default [y] if [X86_32]
  depends on [X86_32]
  inherited [X86_32]
 }
}
config ARCH_ENABLE_MEMORY_HOTPLUG boolean {
 default [y] if [X86_64 || X86_32 && HIGHMEM]
 depends on [X86_64 || X86_32 && HIGHMEM]
 inherited [X86_64 || X86_32 && HIGHMEM]
}
config MEMORY_HOTPLUG_RESERVE boolean {
 default [X86_64] if [MEMORY_HOTPLUG && DISCONTIGMEM]
 depends on [MEMORY_HOTPLUG && DISCONTIGMEM]
 inherited [MEMORY_HOTPLUG && DISCONTIGMEM]
}
config HAVE_ARCH_EARLY_PFN_TO_NID boolean {
 default [X86_64] if [NUMA]
 depends on [NUMA]
 inherited [NUMA]
}
config OUT_OF_LINE_PFN_TO_PAGE boolean {
 default [X86_64] if [DISCONTIGMEM]
 depends on [DISCONTIGMEM]
 inherited [DISCONTIGMEM]
}
menu "Power management options" {
 depends on [!X86_VOYAGER]
 config ARCH_HIBERNATION_HEADER boolean {
  depends on [X86_64 && HIBERNATION]
  default [y] if [!X86_VOYAGER && X86_64 && HIBERNATION]
  inherited [!X86_VOYAGER && X86_64 && HIBERNATION]
 }
 config PM boolean {
  prompt "Power Management support" if [!X86_VOYAGER && !IA64_HP_SIM]
  depends on [!IA64_HP_SIM]
  inherited [!X86_VOYAGER && !IA64_HP_SIM]
  config PM_LEGACY boolean {
   prompt "Legacy Power Management API (DEPRECATED)" if [!X86_VOYAGER && PM]
   depends on [PM]
   default [n] if [!X86_VOYAGER && PM]
   inherited [!X86_VOYAGER && PM]
  }
  config PM_DEBUG boolean {
   prompt "Power Management Debug Support" if [!X86_VOYAGER && PM]
   depends on [PM]
   inherited [!X86_VOYAGER && PM]
   config PM_VERBOSE boolean {
    prompt "Verbose Power Management debugging" if [!X86_VOYAGER && PM_DEBUG]
    depends on [PM_DEBUG]
    default [n] if [!X86_VOYAGER && PM_DEBUG]
    inherited [!X86_VOYAGER && PM_DEBUG]
   }
   config PM_TRACE boolean {
    prompt "Suspend/resume event tracing" if [!X86_VOYAGER && PM_DEBUG && X86 && PM_SLEEP && EXPERIMENTAL]
    depends on [PM_DEBUG && X86 && PM_SLEEP && EXPERIMENTAL]
    default [n] if [!X86_VOYAGER && PM_DEBUG && X86 && PM_SLEEP && EXPERIMENTAL]
    inherited [!X86_VOYAGER && PM_DEBUG && X86 && PM_SLEEP && EXPERIMENTAL]
   }
  }
 }
 config PM_SLEEP_SMP boolean {
  depends on [SUSPEND_SMP_POSSIBLE || HIBERNATION_SMP_POSSIBLE]
  depends on [PM_SLEEP]
  select HOTPLUG_CPU if [!X86_VOYAGER && (SUSPEND_SMP_POSSIBLE || HIBERNATION_SMP_POSSIBLE) && PM_SLEEP]
  default [y] if [!X86_VOYAGER && (SUSPEND_SMP_POSSIBLE || HIBERNATION_SMP_POSSIBLE) && PM_SLEEP]
  inherited [!X86_VOYAGER && (SUSPEND_SMP_POSSIBLE || HIBERNATION_SMP_POSSIBLE) && PM_SLEEP]
 }
 config PM_SLEEP boolean {
  depends on [SUSPEND || HIBERNATION]
  default [y] if [!X86_VOYAGER && (SUSPEND || HIBERNATION)]
  inherited [!X86_VOYAGER && (SUSPEND || HIBERNATION)]
 }
 config SUSPEND_UP_POSSIBLE boolean {
  depends on [X86 && !X86_VOYAGER || PPC || ARM || BLACKFIN || MIPS || SUPERH || FRV]
  depends on [!SMP]
  default [y] if [!X86_VOYAGER && (X86 && !X86_VOYAGER || PPC || ARM || BLACKFIN || MIPS || SUPERH || FRV) && !SMP]
  inherited [!X86_VOYAGER && (X86 && !X86_VOYAGER || PPC || ARM || BLACKFIN || MIPS || SUPERH || FRV) && !SMP]
 }
 config SUSPEND_SMP_POSSIBLE boolean {
  depends on [X86 && !X86_VOYAGER || PPC && (PPC_PSERIES || PPC_PMAC) || ARM]
  depends on [SMP]
  default [y] if [!X86_VOYAGER && (X86 && !X86_VOYAGER || PPC && (PPC_PSERIES || PPC_PMAC) || ARM) && SMP]
  inherited [!X86_VOYAGER && (X86 && !X86_VOYAGER || PPC && (PPC_PSERIES || PPC_PMAC) || ARM) && SMP]
 }
 config SUSPEND boolean {
  prompt "Suspend to RAM and standby" if [!X86_VOYAGER && PM && (SUSPEND_UP_POSSIBLE || SUSPEND_SMP_POSSIBLE)]
  depends on [PM]
  depends on [SUSPEND_UP_POSSIBLE || SUSPEND_SMP_POSSIBLE]
  default [y] if [!X86_VOYAGER && PM && (SUSPEND_UP_POSSIBLE || SUSPEND_SMP_POSSIBLE)]
  inherited [!X86_VOYAGER && PM && (SUSPEND_UP_POSSIBLE || SUSPEND_SMP_POSSIBLE)]
 }
 config HIBERNATION_UP_POSSIBLE boolean {
  depends on [X86 || PPC64_SWSUSP || PPC32]
  depends on [!SMP]
  default [y] if [!X86_VOYAGER && (X86 || PPC64_SWSUSP || PPC32) && !SMP]
  inherited [!X86_VOYAGER && (X86 || PPC64_SWSUSP || PPC32) && !SMP]
 }
 config HIBERNATION_SMP_POSSIBLE boolean {
  depends on [X86 && !X86_VOYAGER || PPC64_SWSUSP]
  depends on [SMP]
  default [y] if [!X86_VOYAGER && (X86 && !X86_VOYAGER || PPC64_SWSUSP) && SMP]
  inherited [!X86_VOYAGER && (X86 && !X86_VOYAGER || PPC64_SWSUSP) && SMP]
 }
 config HIBERNATION boolean {
  prompt "Hibernation (aka 'suspend to disk')" if [!X86_VOYAGER && PM && SWAP && (HIBERNATION_UP_POSSIBLE || HIBERNATION_SMP_POSSIBLE)]
  depends on [PM && SWAP]
  depends on [HIBERNATION_UP_POSSIBLE || HIBERNATION_SMP_POSSIBLE]
  inherited [!X86_VOYAGER && PM && SWAP && (HIBERNATION_UP_POSSIBLE || HIBERNATION_SMP_POSSIBLE)]
  config PM_STD_PARTITION string {
   prompt "Default resume partition" if [!X86_VOYAGER && HIBERNATION]
   depends on [HIBERNATION]
   default [""] if [!X86_VOYAGER && HIBERNATION]
   inherited [!X86_VOYAGER && HIBERNATION]
  }
 }
 config APM_EMULATION tristate {
  prompt "Advanced Power Management Emulation" if [!X86_VOYAGER && PM && SYS_SUPPORTS_APM_EMULATION]
  depends on [PM && SYS_SUPPORTS_APM_EMULATION]
  inherited [!X86_VOYAGER && PM && SYS_SUPPORTS_APM_EMULATION]
 }
 menuconfig ACPI boolean {
  prompt "ACPI (Advanced Configuration and Power Interface) Support" if [!X86_VOYAGER && !X86_NUMAQ && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  depends on [!X86_NUMAQ]
  depends on [!X86_VISWS]
  depends on [!IA64_HP_SIM]
  depends on [IA64 || X86]
  depends on [PCI]
  depends on [PM]
  select PNP if [!X86_VOYAGER && !X86_NUMAQ && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  default [y] if [!X86_VOYAGER && !X86_NUMAQ && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  inherited [!X86_VOYAGER && !X86_NUMAQ && !X86_VISWS && !IA64_HP_SIM && (IA64 || X86) && PCI && PM]
  if [!X86_VOYAGER && ACPI] {
   config ACPI_SLEEP boolean {
    depends on [PM_SLEEP]
    default [y] if [!X86_VOYAGER && ACPI && PM_SLEEP]
    inherited [!X86_VOYAGER && ACPI && PM_SLEEP]
   }
   config ACPI_PROCFS boolean {
    prompt "Deprecated /proc/acpi files" if [!X86_VOYAGER && ACPI && PROC_FS]
    depends on [PROC_FS]
    inherited [!X86_VOYAGER && ACPI && PROC_FS]
   }
   config ACPI_PROCFS_POWER boolean {
    prompt "Deprecated power /proc/acpi folders" if [!X86_VOYAGER && ACPI && PROC_FS]
    depends on [PROC_FS]
    default [y] if [!X86_VOYAGER && ACPI && PROC_FS]
    inherited [!X86_VOYAGER && ACPI && PROC_FS]
   }
   config ACPI_SYSFS_POWER boolean {
    prompt "Future power /sys interface" if [!X86_VOYAGER && ACPI]
    select POWER_SUPPLY if [!X86_VOYAGER && ACPI]
    default [y] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
   }
   config ACPI_PROC_EVENT boolean {
    prompt "Deprecated /proc/acpi/event support" if [!X86_VOYAGER && ACPI && PROC_FS]
    depends on [PROC_FS]
    default [y] if [!X86_VOYAGER && ACPI && PROC_FS]
    inherited [!X86_VOYAGER && ACPI && PROC_FS]
   }
   config ACPI_AC tristate {
    prompt "AC Adapter" if [!X86_VOYAGER && ACPI && X86]
    depends on [X86]
    default [y] if [!X86_VOYAGER && ACPI && X86]
    inherited [!X86_VOYAGER && ACPI && X86]
   }
   config ACPI_BATTERY tristate {
    prompt "Battery" if [!X86_VOYAGER && ACPI && X86]
    depends on [X86]
    default [y] if [!X86_VOYAGER && ACPI && X86]
    inherited [!X86_VOYAGER && ACPI && X86]
   }
   config ACPI_BUTTON tristate {
    prompt "Button" if [!X86_VOYAGER && ACPI && INPUT]
    depends on [INPUT]
    default [y] if [!X86_VOYAGER && ACPI && INPUT]
    inherited [!X86_VOYAGER && ACPI && INPUT]
   }
   config ACPI_VIDEO tristate {
    prompt "Video" if [!X86_VOYAGER && ACPI && X86 && BACKLIGHT_CLASS_DEVICE && VIDEO_OUTPUT_CONTROL && INPUT]
    depends on [X86 && BACKLIGHT_CLASS_DEVICE && VIDEO_OUTPUT_CONTROL]
    depends on [INPUT]
    inherited [!X86_VOYAGER && ACPI && X86 && BACKLIGHT_CLASS_DEVICE && VIDEO_OUTPUT_CONTROL && INPUT]
   }
   config ACPI_FAN tristate {
    prompt "Fan" if [!X86_VOYAGER && ACPI]
    default [y] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
   }
   config ACPI_DOCK tristate {
    prompt "Dock" if [!X86_VOYAGER && ACPI && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [!X86_VOYAGER && ACPI && EXPERIMENTAL]
    config ACPI_BAY tristate {
     prompt "Removable Drive Bay (EXPERIMENTAL)" if [!X86_VOYAGER && ACPI && EXPERIMENTAL && ACPI_DOCK]
     depends on [EXPERIMENTAL]
     depends on [ACPI_DOCK]
     inherited [!X86_VOYAGER && ACPI && EXPERIMENTAL && ACPI_DOCK]
    }
   }
   config ACPI_PROCESSOR tristate {
    prompt "Processor" if [!X86_VOYAGER && ACPI]
    default [y] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
    config ACPI_HOTPLUG_CPU boolean {
     depends on [ACPI_PROCESSOR && HOTPLUG_CPU]
     select ACPI_CONTAINER if [!X86_VOYAGER && ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
     default [y] if [!X86_VOYAGER && ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
     inherited [!X86_VOYAGER && ACPI && ACPI_PROCESSOR && HOTPLUG_CPU]
    }
    config ACPI_THERMAL tristate {
     prompt "Thermal Zone" if [!X86_VOYAGER && ACPI && ACPI_PROCESSOR]
     depends on [ACPI_PROCESSOR]
     default [y] if [!X86_VOYAGER && ACPI && ACPI_PROCESSOR]
     inherited [!X86_VOYAGER && ACPI && ACPI_PROCESSOR]
    }
   }
   config ACPI_NUMA boolean {
    prompt "NUMA support" if [!X86_VOYAGER && ACPI && NUMA && (X86 || IA64)]
    depends on [NUMA]
    depends on [X86 || IA64]
    default [y] if [!X86_VOYAGER && ACPI && NUMA && (X86 || IA64) && (IA64_GENERIC || IA64_SGI_SN2)]
    inherited [!X86_VOYAGER && ACPI && NUMA && (X86 || IA64)]
   }
   config ACPI_ASUS tristate {
    prompt "ASUS/Medion Laptop Extras" if [!X86_VOYAGER && ACPI && X86]
    depends on [X86]
    select BACKLIGHT_CLASS_DEVICE if [!X86_VOYAGER && ACPI && X86]
    inherited [!X86_VOYAGER && ACPI && X86]
   }
   config ACPI_TOSHIBA tristate {
    prompt "Toshiba Laptop Extras" if [!X86_VOYAGER && ACPI && X86]
    depends on [X86]
    select BACKLIGHT_CLASS_DEVICE if [!X86_VOYAGER && ACPI && X86]
    inherited [!X86_VOYAGER && ACPI && X86]
   }
   config ACPI_CUSTOM_DSDT boolean {
    prompt "Include Custom DSDT" if [!X86_VOYAGER && ACPI && !STANDALONE]
    depends on [!STANDALONE]
    default [n] if [!X86_VOYAGER && ACPI && !STANDALONE]
    inherited [!X86_VOYAGER && ACPI && !STANDALONE]
    config ACPI_CUSTOM_DSDT_FILE string {
     prompt "Custom DSDT Table file to include" if [!X86_VOYAGER && ACPI && ACPI_CUSTOM_DSDT]
     depends on [ACPI_CUSTOM_DSDT]
     default [""] if [!X86_VOYAGER && ACPI && ACPI_CUSTOM_DSDT]
     inherited [!X86_VOYAGER && ACPI && ACPI_CUSTOM_DSDT]
    }
   }
   config ACPI_BLACKLIST_YEAR integer {
    prompt "Disable ACPI for systems before Jan 1st this year" if [!X86_VOYAGER && ACPI && X86_32]
    default [0] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
   }
   config ACPI_DEBUG boolean {
    prompt "Debug Statements" if [!X86_VOYAGER && ACPI]
    default [n] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
    config ACPI_DEBUG_FUNC_TRACE boolean {
     prompt "Additionally enable ACPI function tracing" if [!X86_VOYAGER && ACPI && ACPI_DEBUG]
     default [n] if [!X86_VOYAGER && ACPI && ACPI_DEBUG]
     depends on [ACPI_DEBUG]
     inherited [!X86_VOYAGER && ACPI && ACPI_DEBUG]
    }
   }
   config ACPI_EC boolean {
    default [y] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
   }
   config ACPI_POWER boolean {
    default [y] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
   }
   config ACPI_SYSTEM boolean {
    default [y] if [!X86_VOYAGER && ACPI]
    inherited [!X86_VOYAGER && ACPI]
   }
   config X86_PM_TIMER boolean {
    prompt "Power Management Timer Support" if [!X86_VOYAGER && ACPI && X86 && EMBEDDED]
    depends on [X86]
    default [y] if [!X86_VOYAGER && ACPI && X86]
    inherited [!X86_VOYAGER && ACPI && X86]
   }
   config ACPI_CONTAINER tristate {
    prompt "ACPI0004,PNP0A05 and PNP0A06 Container Driver (EXPERIMENTAL)" if [!X86_VOYAGER && ACPI && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    default [ACPI_HOTPLUG_MEMORY || ACPI_HOTPLUG_CPU || ACPI_HOTPLUG_IO] if [!X86_VOYAGER && ACPI && EXPERIMENTAL]
    inherited [!X86_VOYAGER && ACPI && EXPERIMENTAL]
   }
   config ACPI_HOTPLUG_MEMORY tristate {
    prompt "Memory Hotplug" if [!X86_VOYAGER && ACPI && MEMORY_HOTPLUG]
    depends on [MEMORY_HOTPLUG]
    default [n] if [!X86_VOYAGER && ACPI && MEMORY_HOTPLUG]
    inherited [!X86_VOYAGER && ACPI && MEMORY_HOTPLUG]
   }
   config ACPI_SBS tristate {
    prompt "Smart Battery System" if [!X86_VOYAGER && ACPI && X86]
    depends on [X86]
    inherited [!X86_VOYAGER && ACPI && X86]
   }
  }
 }
 menuconfig APM tristate {
  prompt "APM (Advanced Power Management) BIOS support" if [!X86_VOYAGER && X86_32 && PM_SLEEP && !X86_VISWS]
  depends on [X86_32 && PM_SLEEP && !X86_VISWS]
  inherited [!X86_VOYAGER && X86_32 && PM_SLEEP && !X86_VISWS]
  if [!X86_VOYAGER && APM] {
   config APM_IGNORE_USER_SUSPEND boolean {
    prompt "Ignore USER SUSPEND" if [!X86_VOYAGER && APM]
    inherited [!X86_VOYAGER && APM]
   }
   config APM_DO_ENABLE boolean {
    prompt "Enable PM at boot time" if [!X86_VOYAGER && APM]
    inherited [!X86_VOYAGER && APM]
   }
   config APM_CPU_IDLE boolean {
    prompt "Make CPU Idle calls when idle" if [!X86_VOYAGER && APM]
    inherited [!X86_VOYAGER && APM]
   }
   config APM_DISPLAY_BLANK boolean {
    prompt "Enable console blanking using APM" if [!X86_VOYAGER && APM]
    inherited [!X86_VOYAGER && APM]
   }
   config APM_ALLOW_INTS boolean {
    prompt "Allow interrupts during APM BIOS calls" if [!X86_VOYAGER && APM]
    inherited [!X86_VOYAGER && APM]
   }
   config APM_REAL_MODE_POWER_OFF boolean {
    prompt "Use real mode APM BIOS call to power off" if [!X86_VOYAGER && APM]
    inherited [!X86_VOYAGER && APM]
   }
  }
 }
 menu "CPU Frequency scaling" {
  depends on [!X86_VOYAGER]
  config CPU_FREQ boolean {
   prompt "CPU Frequency scaling" if [!X86_VOYAGER]
   inherited [!X86_VOYAGER]
   if [!X86_VOYAGER && CPU_FREQ] {
    config CPU_FREQ_TABLE tristate {
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_DEBUG boolean {
     prompt "Enable CPUfreq debugging" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_STAT tristate {
     prompt "CPU frequency translation statistics" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     default [y] if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
     config CPU_FREQ_STAT_DETAILS boolean {
      prompt "CPU frequency translation statistics details" if [!X86_VOYAGER && CPU_FREQ && CPU_FREQ_STAT]
      depends on [CPU_FREQ_STAT]
      inherited [!X86_VOYAGER && CPU_FREQ && CPU_FREQ_STAT]
     }
    }
    choice boolean {
     prompt "Default CPUFreq governor" if [!X86_VOYAGER && CPU_FREQ]
     default [CPU_FREQ_DEFAULT_GOV_USERSPACE] if [!X86_VOYAGER && CPU_FREQ && (CPU_FREQ_SA1100 || CPU_FREQ_SA1110)]
     default [CPU_FREQ_DEFAULT_GOV_PERFORMANCE] if [!X86_VOYAGER && CPU_FREQ]
     config CPU_FREQ_DEFAULT_GOV_PERFORMANCE boolean {
      prompt "performance" if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_USERSPACE boolean {
      prompt "userspace" if [<choice>]
      select CPU_FREQ_GOV_USERSPACE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_ONDEMAND boolean {
      prompt "ondemand" if [<choice>]
      select CPU_FREQ_GOV_ONDEMAND if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
     config CPU_FREQ_DEFAULT_GOV_CONSERVATIVE boolean {
      prompt "conservative" if [<choice>]
      select CPU_FREQ_GOV_CONSERVATIVE if [<choice>]
      select CPU_FREQ_GOV_PERFORMANCE if [<choice>]
      inherited [<choice>]
     }
    }
    config CPU_FREQ_GOV_PERFORMANCE tristate {
     prompt "'performance' governor" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_POWERSAVE tristate {
     prompt "'powersave' governor" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_USERSPACE tristate {
     prompt "'userspace' governor for userspace frequency scaling" if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_ONDEMAND tristate {
     prompt "'ondemand' cpufreq policy governor" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config CPU_FREQ_GOV_CONSERVATIVE tristate {
     prompt "'conservative' cpufreq governor" if [!X86_VOYAGER && CPU_FREQ]
     depends on [CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
   }
   if [!X86_VOYAGER && CPU_FREQ] {
    config X86_ACPI_CPUFREQ tristate {
     prompt "ACPI Processor P-States driver" if [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
     depends on [ACPI_PROCESSOR]
     inherited [!X86_VOYAGER && CPU_FREQ && ACPI_PROCESSOR]
    }
    config ELAN_CPUFREQ tristate {
     prompt "AMD Elan SC400 and SC410" if [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_ELAN]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_ELAN]
     depends on [X86_32 && X86_ELAN]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_ELAN]
    }
    config SC520_CPUFREQ tristate {
     prompt "AMD Elan SC520" if [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_ELAN]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_ELAN]
     depends on [X86_32 && X86_ELAN]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_ELAN]
    }
    config X86_POWERNOW_K6 tristate {
     prompt "AMD Mobile K6-2/K6-3 PowerNow!" if [!X86_VOYAGER && CPU_FREQ && X86_32]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32]
    }
    config X86_POWERNOW_K7 tristate {
     prompt "AMD Mobile Athlon/Duron PowerNow!" if [!X86_VOYAGER && CPU_FREQ && X86_32]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32]
     config X86_POWERNOW_K7_ACPI boolean {
      depends on [X86_POWERNOW_K7 && ACPI_PROCESSOR]
      depends on [!(X86_POWERNOW_K7="y" && ACPI_PROCESSOR="m")]
      depends on [X86_32]
      default [y] if [!X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K7 && ACPI_PROCESSOR && (X86_POWERNOW_K7!="y" || ACPI_PROCESSOR!="m") && X86_32]
      inherited [!X86_VOYAGER && CPU_FREQ && X86_POWERNOW_K7 && ACPI_PROCESSOR && (X86_POWERNOW_K7!="y" || ACPI_PROCESSOR!="m") && X86_32]
     }
    }
    config X86_POWERNOW_K8 tristate {
     prompt "AMD Opteron/Athlon64 PowerNow!" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
     config X86_POWERNOW_K8_ACPI boolean {
      prompt "ACPI Support" if [!X86_VOYAGER && CPU_FREQ && ACPI && X86_POWERNOW_K8 && ACPI_PROCESSOR && (X86_POWERNOW_K8!="y" || ACPI_PROCESSOR!="m") && X86_32]
      depends on [ACPI && X86_POWERNOW_K8 && ACPI_PROCESSOR]
      depends on [!(X86_POWERNOW_K8="y" && ACPI_PROCESSOR="m")]
      default [y] if [!X86_VOYAGER && CPU_FREQ && ACPI && X86_POWERNOW_K8 && ACPI_PROCESSOR && (X86_POWERNOW_K8!="y" || ACPI_PROCESSOR!="m")]
      inherited [!X86_VOYAGER && CPU_FREQ && ACPI && X86_POWERNOW_K8 && ACPI_PROCESSOR && (X86_POWERNOW_K8!="y" || ACPI_PROCESSOR!="m")]
     }
    }
    config X86_GX_SUSPMOD tristate {
     prompt "Cyrix MediaGX/NatSemi Geode Suspend Modulation" if [!X86_VOYAGER && CPU_FREQ && X86_32 && PCI]
     depends on [X86_32 && PCI]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && PCI]
    }
    config X86_SPEEDSTEP_CENTRINO tristate {
     prompt "Intel Enhanced SpeedStep (deprecated)" if [!X86_VOYAGER && CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR)]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR)]
     select X86_SPEEDSTEP_CENTRINO_TABLE if [!X86_VOYAGER && CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR) && X86_32]
     depends on [X86_32 || X86_64 && ACPI_PROCESSOR]
     inherited [!X86_VOYAGER && CPU_FREQ && (X86_32 || X86_64 && ACPI_PROCESSOR)]
     config X86_SPEEDSTEP_CENTRINO_TABLE boolean {
      prompt "Built-in tables for Banias CPUs" if [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_SPEEDSTEP_CENTRINO]
      depends on [X86_32 && X86_SPEEDSTEP_CENTRINO]
      default [y] if [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_SPEEDSTEP_CENTRINO]
      inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && X86_SPEEDSTEP_CENTRINO]
     }
    }
    config X86_SPEEDSTEP_ICH tristate {
     prompt "Intel Speedstep on ICH-M chipsets (ioport interface)" if [!X86_VOYAGER && CPU_FREQ && X86_32]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32]
    }
    config X86_SPEEDSTEP_SMI tristate {
     prompt "Intel SpeedStep on 440BX/ZX/MX chipsets (SMI interface)" if [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
     depends on [X86_32 && EXPERIMENTAL]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
    }
    config X86_P4_CLOCKMOD tristate {
     prompt "Intel Pentium 4 clock modulation" if [!X86_VOYAGER && CPU_FREQ]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config X86_CPUFREQ_NFORCE2 tristate {
     prompt "nVidia nForce2 FSB changing" if [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
     depends on [X86_32 && EXPERIMENTAL]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
    }
    config X86_LONGRUN tristate {
     prompt "Transmeta LongRun" if [!X86_VOYAGER && CPU_FREQ && X86_32]
     depends on [X86_32]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32]
    }
    config X86_LONGHAUL tristate {
     prompt "VIA Cyrix III Longhaul" if [!X86_VOYAGER && CPU_FREQ && X86_32 && ACPI_PROCESSOR]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32 && ACPI_PROCESSOR]
     depends on [X86_32 && ACPI_PROCESSOR]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && ACPI_PROCESSOR]
    }
    config X86_E_POWERSAVER tristate {
     prompt "VIA C7 Enhanced PowerSaver (EXPERIMENTAL)" if [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
     select CPU_FREQ_TABLE if [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
     depends on [X86_32 && EXPERIMENTAL]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && EXPERIMENTAL]
    }
    config X86_ACPI_CPUFREQ_PROC_INTF boolean {
     prompt "/proc/acpi/processor/../performance interface (deprecated)" if [!X86_VOYAGER && CPU_FREQ && PROC_FS && (X86_ACPI_CPUFREQ || X86_POWERNOW_K7_ACPI || X86_POWERNOW_K8_ACPI)]
     depends on [PROC_FS]
     depends on [X86_ACPI_CPUFREQ || X86_POWERNOW_K7_ACPI || X86_POWERNOW_K8_ACPI]
     inherited [!X86_VOYAGER && CPU_FREQ && PROC_FS && (X86_ACPI_CPUFREQ || X86_POWERNOW_K7_ACPI || X86_POWERNOW_K8_ACPI)]
    }
    config X86_SPEEDSTEP_LIB tristate {
     default [X86_SPEEDSTEP_ICH || X86_SPEEDSTEP_SMI || X86_P4_CLOCKMOD] if [!X86_VOYAGER && CPU_FREQ]
     inherited [!X86_VOYAGER && CPU_FREQ]
    }
    config X86_SPEEDSTEP_RELAXED_CAP_CHECK boolean {
     prompt "Relaxed speedstep capability checks" if [!X86_VOYAGER && CPU_FREQ && X86_32 && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
     depends on [X86_32 && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
     inherited [!X86_VOYAGER && CPU_FREQ && X86_32 && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH)]
    }
   }
  }
 }
 config CPU_IDLE boolean {
  prompt "CPU idle PM support" if [!X86_VOYAGER]
  inherited [!X86_VOYAGER]
  config CPU_IDLE_GOV_LADDER boolean {
   depends on [CPU_IDLE]
   default [y] if [!X86_VOYAGER && CPU_IDLE]
   inherited [!X86_VOYAGER && CPU_IDLE]
  }
  config CPU_IDLE_GOV_MENU boolean {
   depends on [CPU_IDLE && NO_HZ]
   default [y] if [!X86_VOYAGER && CPU_IDLE && NO_HZ]
   inherited [!X86_VOYAGER && CPU_IDLE && NO_HZ]
  }
 }
}
menu "Bus options (PCI etc.)" {
 config PCI boolean {
  prompt "PCI support" if [!X86_VOYAGER && !X86_VISWS]
  depends on [!X86_VOYAGER]
  default [y] if [!X86_VOYAGER && X86_VISWS]
  select ARCH_SUPPORTS_MSI if [!X86_VOYAGER && X86_LOCAL_APIC && X86_IO_APIC]
  inherited [!X86_VOYAGER]
  choice boolean {
   prompt "PCI access mode" if [X86_32 && PCI && !X86_VISWS]
   depends on [X86_32 && PCI && !X86_VISWS]
   default [PCI_GOANY] if [X86_32 && PCI && !X86_VISWS]
   config PCI_GOBIOS boolean {
    prompt "BIOS" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GOMMCONFIG boolean {
    prompt "MMConfig" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GODIRECT boolean {
    prompt "Direct" if [<choice>]
    inherited [<choice>]
   }
   config PCI_GOANY boolean {
    prompt "Any" if [<choice>]
    inherited [<choice>]
   }
  }
  config PCI_BIOS boolean {
   depends on [X86_32 && !X86_VISWS && PCI && (PCI_GOBIOS || PCI_GOANY)]
   default [y] if [X86_32 && !X86_VISWS && PCI && (PCI_GOBIOS || PCI_GOANY)]
   inherited [X86_32 && !X86_VISWS && PCI && (PCI_GOBIOS || PCI_GOANY)]
  }
  config PCI_DIRECT boolean {
   depends on [PCI && (X86_64 || PCI_GODIRECT || PCI_GOANY || X86_VISWS)]
   default [y] if [PCI && (X86_64 || PCI_GODIRECT || PCI_GOANY || X86_VISWS)]
   inherited [PCI && (X86_64 || PCI_GODIRECT || PCI_GOANY || X86_VISWS)]
  }
  config PCI_MMCONFIG boolean {
   depends on [X86_32 && PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
   default [y] if [X86_32 && PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
   prompt "Support mmconfig PCI config space access" if [X86_64 && PCI && ACPI]
   depends on [X86_64 && PCI && ACPI]
   inherited [X86_32 && PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
  }
  config PCI_DOMAINS boolean {
   depends on [PCI]
   default [y] if [PCI]
   inherited [PCI]
  }
  config PCI_MMCONFIG boolean {
   depends on [X86_32 && PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
   default [y] if [X86_32 && PCI && ACPI && (PCI_GOMMCONFIG || PCI_GOANY)]
   prompt "Support mmconfig PCI config space access" if [X86_64 && PCI && ACPI]
   depends on [X86_64 && PCI && ACPI]
   inherited [X86_64 && PCI && ACPI]
  }
 }
 config DMAR boolean {
  prompt "Support for DMA Remapping Devices (EXPERIMENTAL)" if [X86_64 && PCI_MSI && ACPI && EXPERIMENTAL]
  depends on [X86_64 && PCI_MSI && ACPI && EXPERIMENTAL]
  inherited [X86_64 && PCI_MSI && ACPI && EXPERIMENTAL]
  config DMAR_GFX_WA boolean {
   prompt "Support for Graphics workaround" if [DMAR]
   depends on [DMAR]
   default [y] if [DMAR]
   inherited [DMAR]
  }
  config DMAR_FLOPPY_WA boolean {
   depends on [DMAR]
   default [y] if [DMAR]
   inherited [DMAR]
  }
 }
 config PCIEPORTBUS boolean {
  prompt "PCI Express support" if [PCI]
  depends on [PCI]
  inherited [PCI]
  config HOTPLUG_PCI_PCIE tristate {
   prompt "PCI Express Hotplug driver" if [HOTPLUG_PCI && PCIEPORTBUS]
   depends on [HOTPLUG_PCI && PCIEPORTBUS]
   inherited [HOTPLUG_PCI && PCIEPORTBUS]
  }
  config PCIEAER boolean {
   prompt "Root Port Advanced Error Reporting support" if [PCIEPORTBUS]
   depends on [PCIEPORTBUS]
   default [y] if [PCIEPORTBUS]
   inherited [PCIEPORTBUS]
  }
 }
 config ARCH_SUPPORTS_MSI boolean {
  default [n] if []
 }
 config PCI_MSI boolean {
  prompt "Message Signaled Interrupts (MSI and MSI-X)" if [PCI && ARCH_SUPPORTS_MSI]
  depends on [PCI]
  depends on [ARCH_SUPPORTS_MSI]
  inherited [PCI && ARCH_SUPPORTS_MSI]
 }
 config PCI_LEGACY boolean {
  prompt "Enable deprecated pci_find_* API" if [PCI]
  depends on [PCI]
  default [y] if [PCI]
  inherited [PCI]
 }
 config PCI_DEBUG boolean {
  prompt "PCI Debugging" if [PCI && DEBUG_KERNEL]
  depends on [PCI && DEBUG_KERNEL]
  inherited [PCI && DEBUG_KERNEL]
 }
 config HT_IRQ boolean {
  prompt "Interrupts on hypertransport devices" if [PCI && X86_LOCAL_APIC && X86_IO_APIC]
  default [y] if [PCI && X86_LOCAL_APIC && X86_IO_APIC]
  depends on [PCI && X86_LOCAL_APIC && X86_IO_APIC]
  inherited [PCI && X86_LOCAL_APIC && X86_IO_APIC]
 }
 config ISA_DMA_API boolean {
  default [y] if []
 }
 if [X86_32] {
  config ISA boolean {
   prompt "ISA support" if [X86_32 && !X86_VOYAGER && !X86_VISWS]
   depends on [!(X86_VOYAGER || X86_VISWS)]
   inherited [X86_32 && !X86_VOYAGER && !X86_VISWS]
   config EISA boolean {
    prompt "EISA support" if [X86_32 && ISA]
    depends on [ISA]
    inherited [X86_32 && ISA]
    config EISA_VLB_PRIMING boolean {
     prompt "Vesa Local Bus priming" if [X86_32 && X86_PC && EISA]
     depends on [X86_PC && EISA]
     default [n] if [X86_32 && X86_PC && EISA]
     inherited [X86_32 && X86_PC && EISA]
    }
    config EISA_PCI_EISA boolean {
     prompt "Generic PCI/EISA bridge" if [X86_32 && !PARISC && PCI && EISA]
     depends on [!PARISC && PCI && EISA]
     default [y] if [X86_32 && !PARISC && PCI && EISA]
     inherited [X86_32 && !PARISC && PCI && EISA]
    }
    config EISA_VIRTUAL_ROOT boolean {
     prompt "EISA virtual root device" if [X86_32 && EISA && (ALPHA || X86_PC)]
     depends on [EISA && (ALPHA || X86_PC)]
     default [y] if [X86_32 && EISA && (ALPHA || X86_PC)]
     inherited [X86_32 && EISA && (ALPHA || X86_PC)]
    }
    config EISA_NAMES boolean {
     prompt "EISA device name database" if [X86_32 && EISA]
     depends on [EISA]
     default [y] if [X86_32 && EISA]
     inherited [X86_32 && EISA]
    }
   }
  }
  config MCA boolean {
   prompt "MCA support" if [X86_32 && !X86_VISWS && !X86_VOYAGER]
   default [y] if [X86_32 && X86_VOYAGER]
   inherited [X86_32]
   config MCA_LEGACY boolean {
    prompt "Legacy MCA API Support" if [X86_32 && MCA]
    depends on [MCA]
    inherited [X86_32 && MCA]
    config MCA_PROC_FS boolean {
     prompt "Support for the mca entry in /proc" if [X86_32 && MCA_LEGACY && PROC_FS]
     depends on [MCA_LEGACY && PROC_FS]
     inherited [X86_32 && MCA_LEGACY && PROC_FS]
    }
   }
  }
  config SCx200 tristate {
   prompt "NatSemi SCx200 support" if [X86_32 && !X86_VOYAGER]
   depends on [!X86_VOYAGER]
   inherited [X86_32 && !X86_VOYAGER]
   config SCx200HR_TIMER tristate {
    prompt "NatSemi SCx200 27MHz High-Resolution Timer Support" if [X86_32 && SCx200 && GENERIC_TIME]
    depends on [SCx200 && GENERIC_TIME]
    default [y] if [X86_32 && SCx200 && GENERIC_TIME]
    inherited [X86_32 && SCx200 && GENERIC_TIME]
   }
  }
  config GEODE_MFGPT_TIMER boolean {
   prompt "Geode Multi-Function General Purpose Timer (MFGPT) events" if [X86_32 && MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
   depends on [MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
   default [y] if [X86_32 && MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
   inherited [X86_32 && MGEODE_LX && GENERIC_TIME && GENERIC_CLOCKEVENTS]
  }
 }
 config K8_NB boolean {
  default [y] if [AGP_AMD64 || X86_64 && (GART_IOMMU || PCI && NUMA)]
  depends on [AGP_AMD64 || X86_64 && (GART_IOMMU || PCI && NUMA)]
  inherited [AGP_AMD64 || X86_64 && (GART_IOMMU || PCI && NUMA)]
 }
 menuconfig PCCARD tristate {
  prompt "PCCard (PCMCIA/CardBus) support" if [HOTPLUG]
  depends on [HOTPLUG]
  inherited [HOTPLUG]
  if [PCCARD] {
   config PCMCIA_DEBUG boolean {
    prompt "Enable PCCARD debugging" if [PCCARD]
    inherited [PCCARD]
   }
   config PCMCIA tristate {
    prompt "16-bit PCMCIA support" if [PCCARD]
    select CRC32 if [PCCARD]
    default [y] if [PCCARD]
    inherited [PCCARD]
    config PCMCIA_LOAD_CIS boolean {
     prompt "Load CIS updates from userspace (EXPERIMENTAL)" if [PCCARD && PCMCIA && EXPERIMENTAL]
     depends on [PCMCIA && EXPERIMENTAL]
     select FW_LOADER if [PCCARD && PCMCIA && EXPERIMENTAL]
     default [y] if [PCCARD && PCMCIA && EXPERIMENTAL]
     inherited [PCCARD && PCMCIA && EXPERIMENTAL]
    }
    config PCMCIA_IOCTL boolean {
     prompt "PCMCIA control ioctl (obsolete)" if [PCCARD && PCMCIA]
     depends on [PCMCIA]
     default [y] if [PCCARD && PCMCIA]
     inherited [PCCARD && PCMCIA]
    }
   }
   config CARDBUS boolean {
    prompt "32-bit CardBus support" if [PCCARD && PCI]
    depends on [PCI]
    default [y] if [PCCARD && PCI]
    inherited [PCCARD && PCI]
   }
   config YENTA tristate {
    prompt "CardBus yenta-compatible bridge support" if [PCCARD && PCI]
    depends on [PCI]
    select CARDBUS if [PCCARD && PCI && !EMBEDDED]
    select PCCARD_NONSTATIC if [PCCARD && PCI]
    inherited [PCCARD && PCI]
    config YENTA_O2 boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for O2Micro bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
    }
    config YENTA_RICOH boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for Ricoh bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
    }
    config YENTA_TI boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for TI and EnE bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
     config YENTA_ENE_TUNE boolean {
      default [y] if [PCCARD && YENTA_TI && CARDBUS]
      prompt "Auto-tune EnE bridges for CB cards" if [PCCARD && YENTA_TI && CARDBUS && EMBEDDED]
      depends on [YENTA_TI && CARDBUS]
      inherited [PCCARD && YENTA_TI && CARDBUS]
     }
    }
    config YENTA_TOSHIBA boolean {
     default [y] if [PCCARD && YENTA]
     prompt "Special initialization for Toshiba ToPIC bridges" if [PCCARD && YENTA && EMBEDDED]
     depends on [YENTA]
     inherited [PCCARD && YENTA]
    }
   }
   config PD6729 tristate {
    prompt "Cirrus PD6729 compatible bridge support" if [PCCARD && PCMCIA && PCI]
    depends on [PCMCIA && PCI]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PCI]
    inherited [PCCARD && PCMCIA && PCI]
   }
   config I82092 tristate {
    prompt "i82092 compatible bridge support" if [PCCARD && PCMCIA && PCI]
    depends on [PCMCIA && PCI]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PCI]
    inherited [PCCARD && PCMCIA && PCI]
   }
   config I82365 tristate {
    prompt "i82365 compatible bridge support" if [PCCARD && PCMCIA && ISA]
    depends on [PCMCIA && ISA]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && ISA]
    inherited [PCCARD && PCMCIA && ISA]
   }
   config TCIC tristate {
    prompt "Databook TCIC host bridge support" if [PCCARD && PCMCIA && ISA]
    depends on [PCMCIA && ISA]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && ISA]
    inherited [PCCARD && PCMCIA && ISA]
   }
   config PCMCIA_M8XX tristate {
    prompt "MPC8xx PCMCIA support" if [PCCARD && PCMCIA && PPC && 8xx]
    depends on [PCMCIA && PPC && 8xx]
    select PCCARD_IODYN if [PCCARD && PCMCIA && PPC && 8xx]
    select PCCARD_NONSTATIC if [PCCARD && PCMCIA && PPC && 8xx]
    inherited [PCCARD && PCMCIA && PPC && 8xx]
   }
   config HD64465_PCMCIA tristate {
    prompt "HD64465 host bridge support" if [PCCARD && HD64465 && PCMCIA]
    depends on [HD64465 && PCMCIA]
    inherited [PCCARD && HD64465 && PCMCIA]
   }
   config PCMCIA_AU1X00 tristate {
    prompt "Au1x00 pcmcia support" if [PCCARD && SOC_AU1X00 && PCMCIA]
    depends on [SOC_AU1X00 && PCMCIA]
    inherited [PCCARD && SOC_AU1X00 && PCMCIA]
   }
   config PCMCIA_SA1100 tristate {
    prompt "SA1100 support" if [PCCARD && ARM && ARCH_SA1100 && PCMCIA]
    depends on [ARM && ARCH_SA1100 && PCMCIA]
    inherited [PCCARD && ARM && ARCH_SA1100 && PCMCIA]
   }
   config PCMCIA_SA1111 tristate {
    prompt "SA1111 support" if [PCCARD && ARM && ARCH_SA1100 && SA1111 && PCMCIA]
    depends on [ARM && ARCH_SA1100 && SA1111 && PCMCIA]
    inherited [PCCARD && ARM && ARCH_SA1100 && SA1111 && PCMCIA]
   }
   config PCMCIA_PXA2XX tristate {
    prompt "PXA2xx support" if [PCCARD && ARM && ARCH_PXA && PCMCIA]
    depends on [ARM && ARCH_PXA && PCMCIA]
    inherited [PCCARD && ARM && ARCH_PXA && PCMCIA]
   }
   config PCMCIA_PROBE boolean {
    default [y] if [PCCARD && ISA && !ARCH_SA1100 && !ARCH_CLPS711X && !PARISC]
    inherited [PCCARD]
   }
   config M32R_PCC boolean {
    prompt "M32R PCMCIA I/F" if [PCCARD && M32R && CHIP_M32700 && PCMCIA]
    depends on [M32R && CHIP_M32700 && PCMCIA]
    select PCCARD_NONSTATIC if [PCCARD && M32R && CHIP_M32700 && PCMCIA]
    inherited [PCCARD && M32R && CHIP_M32700 && PCMCIA]
   }
   config M32R_CFC boolean {
    prompt "M32R CF I/F Controller" if [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    depends on [M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    select PCCARD_NONSTATIC if [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    inherited [PCCARD && M32R && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
    config M32R_CFC_NUM integer {
     prompt "M32R CF I/F number" if [PCCARD && M32R_CFC]
     depends on [M32R_CFC]
     default [1] if [PCCARD && M32R_CFC && (PLAT_USRV || PLAT_M32700UT || PLAT_MAPPI2 || PLAT_MAPPI3 || PLAT_OPSPUT)]
     inherited [PCCARD && M32R_CFC]
    }
   }
   config PCMCIA_VRC4171 tristate {
    prompt "NEC VRC4171 Card Controllers support" if [PCCARD && CPU_VR41XX && ISA && PCMCIA]
    depends on [CPU_VR41XX && ISA && PCMCIA]
    inherited [PCCARD && CPU_VR41XX && ISA && PCMCIA]
   }
   config PCMCIA_VRC4173 tristate {
    prompt "NEC VRC4173 CARDU support" if [PCCARD && CPU_VR41XX && PCI && PCMCIA]
    depends on [CPU_VR41XX && PCI && PCMCIA]
    inherited [PCCARD && CPU_VR41XX && PCI && PCMCIA]
   }
   config OMAP_CF tristate {
    prompt "OMAP CompactFlash Controller" if [PCCARD && PCMCIA && ARCH_OMAP16XX]
    depends on [PCMCIA && ARCH_OMAP16XX]
    inherited [PCCARD && PCMCIA && ARCH_OMAP16XX]
   }
   config AT91_CF tristate {
    prompt "AT91 CompactFlash Controller" if [PCCARD && PCMCIA && ARCH_AT91RM9200]
    depends on [PCMCIA && ARCH_AT91RM9200]
    inherited [PCCARD && PCMCIA && ARCH_AT91RM9200]
   }
   config ELECTRA_CF tristate {
    prompt "Electra CompactFlash Controller" if [PCCARD && PCMCIA && PPC_PASEMI]
    depends on [PCMCIA && PPC_PASEMI]
    inherited [PCCARD && PCMCIA && PPC_PASEMI]
   }
   config PCCARD_NONSTATIC tristate {
    inherited [PCCARD]
   }
   config PCCARD_IODYN boolean {
    inherited [PCCARD]
   }
  }
 }
 menuconfig HOTPLUG_PCI tristate {
  prompt "Support for PCI Hotplug (EXPERIMENTAL)" if [PCI && EXPERIMENTAL && HOTPLUG]
  depends on [PCI && EXPERIMENTAL && HOTPLUG]
  inherited [PCI && EXPERIMENTAL && HOTPLUG]
  if [HOTPLUG_PCI] {
   config HOTPLUG_PCI_FAKE tristate {
    prompt "Fake PCI Hotplug driver" if [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
   }
   config HOTPLUG_PCI_COMPAQ tristate {
    prompt "Compaq PCI Hotplug driver" if [HOTPLUG_PCI && X86 && PCI_BIOS && PCI_LEGACY]
    depends on [X86 && PCI_BIOS && PCI_LEGACY]
    inherited [HOTPLUG_PCI && X86 && PCI_BIOS && PCI_LEGACY]
    config HOTPLUG_PCI_COMPAQ_NVRAM boolean {
     prompt "Save configuration into NVRAM on Compaq servers" if [HOTPLUG_PCI && HOTPLUG_PCI_COMPAQ]
     depends on [HOTPLUG_PCI_COMPAQ]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_COMPAQ]
    }
   }
   config HOTPLUG_PCI_IBM tristate {
    prompt "IBM PCI Hotplug driver" if [HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS && PCI_LEGACY]
    depends on [X86_IO_APIC && X86 && PCI_BIOS && PCI_LEGACY]
    inherited [HOTPLUG_PCI && X86_IO_APIC && X86 && PCI_BIOS && PCI_LEGACY]
   }
   config HOTPLUG_PCI_ACPI tristate {
    prompt "ACPI PCI Hotplug driver" if [HOTPLUG_PCI && (!ACPI_DOCK && ACPI || ACPI_DOCK)]
    depends on [!ACPI_DOCK && ACPI || ACPI_DOCK]
    inherited [HOTPLUG_PCI && (!ACPI_DOCK && ACPI || ACPI_DOCK)]
    config HOTPLUG_PCI_ACPI_IBM tristate {
     prompt "ACPI PCI Hotplug driver IBM extensions" if [HOTPLUG_PCI && HOTPLUG_PCI_ACPI]
     depends on [HOTPLUG_PCI_ACPI]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_ACPI]
    }
   }
   config HOTPLUG_PCI_CPCI boolean {
    prompt "CompactPCI Hotplug driver" if [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
    config HOTPLUG_PCI_CPCI_ZT5550 tristate {
     prompt "Ziatech ZT5550 CompactPCI Hotplug driver" if [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
     depends on [HOTPLUG_PCI_CPCI && X86]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86]
    }
    config HOTPLUG_PCI_CPCI_GENERIC tristate {
     prompt "Generic port I/O CompactPCI Hotplug driver" if [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86 && PCI_LEGACY]
     depends on [HOTPLUG_PCI_CPCI && X86 && PCI_LEGACY]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_CPCI && X86 && PCI_LEGACY]
    }
   }
   config HOTPLUG_PCI_SHPC tristate {
    prompt "SHPC PCI Hotplug driver" if [HOTPLUG_PCI]
    inherited [HOTPLUG_PCI]
   }
   config HOTPLUG_PCI_RPA tristate {
    prompt "RPA PCI Hotplug driver" if [HOTPLUG_PCI && PPC_PSERIES && PPC64 && !HOTPLUG_PCI_FAKE]
    depends on [PPC_PSERIES && PPC64 && !HOTPLUG_PCI_FAKE]
    inherited [HOTPLUG_PCI && PPC_PSERIES && PPC64 && !HOTPLUG_PCI_FAKE]
    config HOTPLUG_PCI_RPA_DLPAR tristate {
     prompt "RPA Dynamic Logical Partitioning for I/O slots" if [HOTPLUG_PCI && HOTPLUG_PCI_RPA]
     depends on [HOTPLUG_PCI_RPA]
     inherited [HOTPLUG_PCI && HOTPLUG_PCI_RPA]
    }
   }
   config HOTPLUG_PCI_SGI tristate {
    prompt "SGI PCI Hotplug Support" if [HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)]
    depends on [IA64_SGI_SN2 || IA64_GENERIC]
    inherited [HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)]
   }
  }
 }
}
menu "Executable file formats / Emulations" {
 config BINFMT_ELF boolean {
  prompt "Kernel support for ELF binaries" if [MMU && (BROKEN || !FRV)]
  depends on [MMU && (BROKEN || !FRV)]
  default [y] if [MMU && (BROKEN || !FRV)]
  inherited [MMU && (BROKEN || !FRV)]
 }
 config BINFMT_ELF_FDPIC boolean {
  prompt "Kernel support for FDPIC ELF binaries" if [FRV || BLACKFIN]
  default [y] if [FRV || BLACKFIN]
  depends on [FRV || BLACKFIN]
  inherited [FRV || BLACKFIN]
 }
 config BINFMT_FLAT tristate {
  prompt "Kernel support for flat binaries" if [!MMU]
  depends on [!MMU]
  inherited [!MMU]
  config BINFMT_ZFLAT boolean {
   prompt "Enable ZFLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   select ZLIB_INFLATE if [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
  config BINFMT_SHARED_FLAT boolean {
   prompt "Enable shared FLAT support" if [BINFMT_FLAT]
   depends on [BINFMT_FLAT]
   inherited [BINFMT_FLAT]
  }
 }
 config BINFMT_AOUT tristate {
  prompt "Kernel support for a.out and ECOFF binaries" if [X86_32 || ALPHA || ARM || M68K || SPARC32]
  depends on [X86_32 || ALPHA || ARM || M68K || SPARC32]
  inherited [X86_32 || ALPHA || ARM || M68K || SPARC32]
  config OSF4_COMPAT boolean {
   prompt "OSF/1 v4 readv/writev compatibility" if [ALPHA && BINFMT_AOUT]
   depends on [ALPHA && BINFMT_AOUT]
   inherited [ALPHA && BINFMT_AOUT]
  }
 }
 config BINFMT_EM86 tristate {
  prompt "Kernel support for Linux/Intel ELF binaries" if [ALPHA]
  depends on [ALPHA]
  inherited [ALPHA]
 }
 config BINFMT_SOM tristate {
  prompt "Kernel support for SOM binaries" if [PARISC && HPUX]
  depends on [PARISC && HPUX]
  inherited [PARISC && HPUX]
 }
 config BINFMT_MISC tristate {
  prompt "Kernel support for MISC binaries" if []
 }
 config IA32_EMULATION boolean {
  prompt "IA32 Emulation" if [X86_64]
  depends on [X86_64]
  inherited [X86_64]
  config IA32_AOUT tristate {
   prompt "IA32 a.out support" if [IA32_EMULATION]
   depends on [IA32_EMULATION]
   inherited [IA32_EMULATION]
  }
  config COMPAT boolean {
   depends on [IA32_EMULATION]
   default [y] if [IA32_EMULATION]
   inherited [IA32_EMULATION]
  }
 }
 config COMPAT_FOR_U64_ALIGNMENT boolean {
  default [COMPAT] if [X86_64]
  depends on [X86_64]
  inherited [X86_64]
 }
 config SYSVIPC_COMPAT boolean {
  depends on [X86_64 && COMPAT && SYSVIPC]
  default [y] if [X86_64 && COMPAT && SYSVIPC]
  inherited [X86_64 && COMPAT && SYSVIPC]
 }
}
menu "Networking" {
 config NET boolean {
  prompt "Networking support" if []
  if [NET] {
   menu "Networking options" {
    depends on [NET]
    config NET_NS boolean {
     prompt "Network namespace support" if [NET && EXPERIMENTAL && !SYSFS]
     default [n] if [NET && EXPERIMENTAL && !SYSFS]
     depends on [EXPERIMENTAL && !SYSFS]
     inherited [NET && EXPERIMENTAL && !SYSFS]
    }
    config PACKET tristate {
     prompt "Packet socket" if [NET]
     inherited [NET]
     config PACKET_MMAP boolean {
      prompt "Packet socket: mmapped IO" if [NET && PACKET]
      depends on [PACKET]
      inherited [NET && PACKET]
     }
    }
    config UNIX tristate {
     prompt "Unix domain sockets" if [NET]
     inherited [NET]
    }
    config XFRM boolean {
     depends on [NET]
     inherited [NET]
    }
    config XFRM_USER tristate {
     prompt "Transformation user configuration interface" if [NET && INET && XFRM]
     depends on [INET && XFRM]
     inherited [NET && INET && XFRM]
    }
    config XFRM_SUB_POLICY boolean {
     prompt "Transformation sub policy support (EXPERIMENTAL)" if [NET && XFRM && EXPERIMENTAL]
     depends on [XFRM && EXPERIMENTAL]
     inherited [NET && XFRM && EXPERIMENTAL]
    }
    config XFRM_MIGRATE boolean {
     prompt "Transformation migrate database (EXPERIMENTAL)" if [NET && XFRM && EXPERIMENTAL]
     depends on [XFRM && EXPERIMENTAL]
     inherited [NET && XFRM && EXPERIMENTAL]
    }
    config NET_KEY tristate {
     prompt "PF_KEY sockets" if [NET]
     select XFRM if [NET]
     inherited [NET]
     config NET_KEY_MIGRATE boolean {
      prompt "PF_KEY MIGRATE (EXPERIMENTAL)" if [NET && NET_KEY && EXPERIMENTAL]
      depends on [NET_KEY && EXPERIMENTAL]
      select XFRM_MIGRATE if [NET && NET_KEY && EXPERIMENTAL]
      inherited [NET && NET_KEY && EXPERIMENTAL]
     }
    }
    config IUCV tristate {
     prompt "IUCV support (S390 - z/VM only)" if [NET && S390]
     depends on [S390]
     inherited [NET && S390]
     config AFIUCV tristate {
      prompt "AF_IUCV support (S390 - z/VM only)" if [NET && IUCV]
      depends on [IUCV]
      inherited [NET && IUCV]
     }
    }
    config INET boolean {
     prompt "TCP/IP networking" if [NET]
     inherited [NET]
     if [NET && INET] {
      config IP_MULTICAST boolean {
       prompt "IP: multicasting" if [NET && INET]
       inherited [NET && INET]
      }
      config IP_ADVANCED_ROUTER boolean {
       prompt "IP: advanced router" if [NET && INET]
       inherited [NET && INET]
       choice boolean {
        prompt "Choose IP: FIB lookup algorithm (choose FIB_HASH if unsure)" if [NET && INET && IP_ADVANCED_ROUTER]
        depends on [IP_ADVANCED_ROUTER]
        default [ASK_IP_FIB_HASH] if [NET && INET && IP_ADVANCED_ROUTER]
        config ASK_IP_FIB_HASH boolean {
         prompt "FIB_HASH" if [<choice>]
         inherited [<choice>]
        }
        config IP_FIB_TRIE boolean {
         prompt "FIB_TRIE" if [<choice>]
         inherited [<choice>]
        }
       }
      }
      config IP_FIB_HASH boolean {
       default [ASK_IP_FIB_HASH || !IP_ADVANCED_ROUTER] if [NET && INET]
       inherited [NET && INET]
      }
      config IP_MULTIPLE_TABLES boolean {
       prompt "IP: policy routing" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       select FIB_RULES if [NET && INET && IP_ADVANCED_ROUTER]
       inherited [NET && INET && IP_ADVANCED_ROUTER]
      }
      config IP_ROUTE_MULTIPATH boolean {
       prompt "IP: equal cost multipath" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       inherited [NET && INET && IP_ADVANCED_ROUTER]
      }
      config IP_ROUTE_VERBOSE boolean {
       prompt "IP: verbose route monitoring" if [NET && INET && IP_ADVANCED_ROUTER]
       depends on [IP_ADVANCED_ROUTER]
       inherited [NET && INET && IP_ADVANCED_ROUTER]
      }
      config IP_PNP boolean {
       prompt "IP: kernel level autoconfiguration" if [NET && INET]
       inherited [NET && INET]
       config IP_PNP_DHCP boolean {
        prompt "IP: DHCP support" if [NET && INET && IP_PNP]
        depends on [IP_PNP]
        inherited [NET && INET && IP_PNP]
       }
       config IP_PNP_BOOTP boolean {
        prompt "IP: BOOTP support" if [NET && INET && IP_PNP]
        depends on [IP_PNP]
        inherited [NET && INET && IP_PNP]
       }
       config IP_PNP_RARP boolean {
        prompt "IP: RARP support" if [NET && INET && IP_PNP]
        depends on [IP_PNP]
        inherited [NET && INET && IP_PNP]
       }
      }
      config NET_IPIP tristate {
       prompt "IP: tunneling" if [NET && INET]
       select INET_TUNNEL if [NET && INET]
       inherited [NET && INET]
      }
      config NET_IPGRE tristate {
       prompt "IP: GRE tunnels over IP" if [NET && INET]
       inherited [NET && INET]
       config NET_IPGRE_BROADCAST boolean {
        prompt "IP: broadcast GRE over IP" if [NET && INET && IP_MULTICAST && NET_IPGRE]
        depends on [IP_MULTICAST && NET_IPGRE]
        inherited [NET && INET && IP_MULTICAST && NET_IPGRE]
       }
      }
      config IP_MROUTE boolean {
       prompt "IP: multicast routing" if [NET && INET && IP_MULTICAST]
       depends on [IP_MULTICAST]
       inherited [NET && INET && IP_MULTICAST]
       config IP_PIMSM_V1 boolean {
        prompt "IP: PIM-SM version 1 support" if [NET && INET && IP_MROUTE]
        depends on [IP_MROUTE]
        inherited [NET && INET && IP_MROUTE]
       }
       config IP_PIMSM_V2 boolean {
        prompt "IP: PIM-SM version 2 support" if [NET && INET && IP_MROUTE]
        depends on [IP_MROUTE]
        inherited [NET && INET && IP_MROUTE]
       }
      }
      config ARPD boolean {
       prompt "IP: ARP daemon support (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       inherited [NET && INET && EXPERIMENTAL]
      }
      config SYN_COOKIES boolean {
       prompt "IP: TCP syncookie support (disabled per default)" if [NET && INET]
       inherited [NET && INET]
      }
      config INET_AH tristate {
       prompt "IP: AH transformation" if [NET && INET]
       select XFRM if [NET && INET]
       select CRYPTO if [NET && INET]
       select CRYPTO_HMAC if [NET && INET]
       select CRYPTO_MD5 if [NET && INET]
       select CRYPTO_SHA1 if [NET && INET]
       inherited [NET && INET]
      }
      config INET_ESP tristate {
       prompt "IP: ESP transformation" if [NET && INET]
       select XFRM if [NET && INET]
       select CRYPTO if [NET && INET]
       select CRYPTO_HMAC if [NET && INET]
       select CRYPTO_MD5 if [NET && INET]
       select CRYPTO_CBC if [NET && INET]
       select CRYPTO_SHA1 if [NET && INET]
       select CRYPTO_DES if [NET && INET]
       inherited [NET && INET]
      }
      config INET_IPCOMP tristate {
       prompt "IP: IPComp transformation" if [NET && INET]
       select XFRM if [NET && INET]
       select INET_XFRM_TUNNEL if [NET && INET]
       select CRYPTO if [NET && INET]
       select CRYPTO_DEFLATE if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_TUNNEL tristate {
       select INET_TUNNEL if [NET && INET]
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET_TUNNEL tristate {
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_MODE_TRANSPORT tristate {
       prompt "IP: IPsec transport mode" if [NET && INET]
       default [y] if [NET && INET]
       select XFRM if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_MODE_TUNNEL tristate {
       prompt "IP: IPsec tunnel mode" if [NET && INET]
       default [y] if [NET && INET]
       select XFRM if [NET && INET]
       inherited [NET && INET]
      }
      config INET_XFRM_MODE_BEET tristate {
       prompt "IP: IPsec BEET mode" if [NET && INET]
       default [y] if [NET && INET]
       select XFRM if [NET && INET]
       inherited [NET && INET]
      }
      config INET_LRO tristate {
       prompt "Large Receive Offload (ipv4/tcp)" if [NET && INET]
       inherited [NET && INET]
      }
      config INET_DIAG tristate {
       prompt "INET: socket monitoring interface" if [NET && INET]
       default [y] if [NET && INET]
       inherited [NET && INET]
       config INET_TCP_DIAG tristate {
        depends on [INET_DIAG]
        default [INET_DIAG] if [NET && INET && INET_DIAG]
        inherited [NET && INET && INET_DIAG]
       }
      }
      menuconfig TCP_CONG_ADVANCED boolean {
       prompt "TCP: advanced congestion control" if [NET && INET]
       inherited [NET && INET]
       if [NET && INET && TCP_CONG_ADVANCED] {
        config TCP_CONG_BIC tristate {
         prompt "Binary Increase Congestion (BIC) control" if [NET && INET && TCP_CONG_ADVANCED]
         default [m] if [NET && INET && TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_CUBIC tristate {
         prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
         default [y] if [NET && INET && TCP_CONG_ADVANCED]
         depends on [!TCP_CONG_ADVANCED]
         default [y] if [NET && INET && !TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_WESTWOOD tristate {
         prompt "TCP Westwood+" if [NET && INET && TCP_CONG_ADVANCED]
         default [m] if [NET && INET && TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_HTCP tristate {
         prompt "H-TCP" if [NET && INET && TCP_CONG_ADVANCED]
         default [m] if [NET && INET && TCP_CONG_ADVANCED]
         inherited [NET && INET && TCP_CONG_ADVANCED]
        }
        config TCP_CONG_HSTCP tristate {
         prompt "High Speed TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_HYBLA tristate {
         prompt "TCP-Hybla congestion control algorithm" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_VEGAS tristate {
         prompt "TCP Vegas" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_SCALABLE tristate {
         prompt "Scalable TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_LP tristate {
         prompt "TCP Low Priority" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_VENO tristate {
         prompt "TCP Veno" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_YEAH tristate {
         prompt "YeAH TCP" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         select TCP_CONG_VEGAS if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        config TCP_CONG_ILLINOIS tristate {
         prompt "TCP Illinois" if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         default [n] if [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
         inherited [NET && INET && TCP_CONG_ADVANCED && EXPERIMENTAL]
        }
        choice boolean {
         prompt "Default TCP congestion control" if [NET && INET && TCP_CONG_ADVANCED]
         default [DEFAULT_CUBIC] if [NET && INET && TCP_CONG_ADVANCED]
         config DEFAULT_BIC boolean {
          prompt "Bic" if [<choice> && TCP_CONG_BIC="y"]
          inherited [<choice>]
         }
         config DEFAULT_CUBIC boolean {
          prompt "Cubic" if [<choice> && TCP_CONG_CUBIC="y"]
          inherited [<choice>]
         }
         config DEFAULT_HTCP boolean {
          prompt "Htcp" if [<choice> && TCP_CONG_HTCP="y"]
          inherited [<choice>]
         }
         config DEFAULT_VEGAS boolean {
          prompt "Vegas" if [<choice> && TCP_CONG_VEGAS="y"]
          inherited [<choice>]
         }
         config DEFAULT_WESTWOOD boolean {
          prompt "Westwood" if [<choice> && TCP_CONG_WESTWOOD="y"]
          inherited [<choice>]
         }
         config DEFAULT_RENO boolean {
          prompt "Reno" if [<choice>]
          inherited [<choice>]
         }
        }
       }
       config TCP_CONG_CUBIC tristate {
        prompt "CUBIC TCP" if [NET && INET && TCP_CONG_ADVANCED]
        default [y] if [NET && INET && TCP_CONG_ADVANCED]
        depends on [!TCP_CONG_ADVANCED]
        default [y] if [NET && INET && !TCP_CONG_ADVANCED]
        inherited [NET && INET && !TCP_CONG_ADVANCED]
       }
      }
      config DEFAULT_TCP_CONG string {
       default ["bic"] if [NET && INET && DEFAULT_BIC]
       default ["cubic"] if [NET && INET && DEFAULT_CUBIC]
       default ["htcp"] if [NET && INET && DEFAULT_HTCP]
       default ["vegas"] if [NET && INET && DEFAULT_VEGAS]
       default ["westwood"] if [NET && INET && DEFAULT_WESTWOOD]
       default ["reno"] if [NET && INET && DEFAULT_RENO]
       default ["cubic"] if [NET && INET]
       inherited [NET && INET]
      }
      config TCP_MD5SIG boolean {
       prompt "TCP: MD5 Signature Option support (RFC2385) (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       select CRYPTO if [NET && INET && EXPERIMENTAL]
       select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL]
       inherited [NET && INET && EXPERIMENTAL]
      }
      menuconfig IP_VS tristate {
       prompt "IP virtual server support (EXPERIMENTAL)" if [NET && INET && NETFILTER]
       depends on [NETFILTER]
       inherited [NET && INET && NETFILTER]
       if [NET && INET && IP_VS] {
        config IP_VS_DEBUG boolean {
         prompt "IP virtual server debugging" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_TAB_BITS integer {
         prompt "IPVS connection table size (the Nth power of 2)" if [NET && INET && IP_VS]
         default [12] if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_PROTO_TCP boolean {
         prompt "TCP load balancing support" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_PROTO_UDP boolean {
         prompt "UDP load balancing support" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_PROTO_ESP boolean {
         prompt "ESP load balancing support" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_PROTO_AH boolean {
         prompt "AH load balancing support" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_RR tristate {
         prompt "round-robin scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_WRR tristate {
         prompt "weighted round-robin scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_LC tristate {
         prompt "least-connection scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_WLC tristate {
         prompt "weighted least-connection scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_LBLC tristate {
         prompt "locality-based least-connection scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_LBLCR tristate {
         prompt "locality-based least-connection with replication scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_DH tristate {
         prompt "destination hashing scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_SH tristate {
         prompt "source hashing scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_SED tristate {
         prompt "shortest expected delay scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_NQ tristate {
         prompt "never queue scheduling" if [NET && INET && IP_VS]
         inherited [NET && INET && IP_VS]
        }
        config IP_VS_FTP tristate {
         prompt "FTP protocol helper" if [NET && INET && IP_VS && IP_VS_PROTO_TCP]
         depends on [IP_VS_PROTO_TCP]
         inherited [NET && INET && IP_VS && IP_VS_PROTO_TCP]
        }
       }
      }
      config IPV6 tristate {
       prompt "The IPv6 protocol" if [NET && INET]
       default [m] if [NET && INET]
       inherited [NET && INET]
       config IPV6_PRIVACY boolean {
        prompt "IPv6: Privacy Extensions support" if [NET && INET && IPV6]
        depends on [IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_ROUTER_PREF boolean {
        prompt "IPv6: Router Preference (RFC 4191) support" if [NET && INET && IPV6]
        depends on [IPV6]
        inherited [NET && INET && IPV6]
        config IPV6_ROUTE_INFO boolean {
         prompt "IPv6: Route Information (RFC 4191) support (EXPERIMENTAL)" if [NET && INET && IPV6_ROUTER_PREF && EXPERIMENTAL]
         depends on [IPV6_ROUTER_PREF && EXPERIMENTAL]
         inherited [NET && INET && IPV6_ROUTER_PREF && EXPERIMENTAL]
        }
       }
       config IPV6_OPTIMISTIC_DAD boolean {
        prompt "IPv6: Enable RFC 4429 Optimistic DAD (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
       config INET6_AH tristate {
        prompt "IPv6: AH transformation" if [NET && INET && IPV6]
        depends on [IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_ESP tristate {
        prompt "IPv6: ESP transformation" if [NET && INET && IPV6]
        depends on [IPV6]
        select XFRM if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_HMAC if [NET && INET && IPV6]
        select CRYPTO_MD5 if [NET && INET && IPV6]
        select CRYPTO_CBC if [NET && INET && IPV6]
        select CRYPTO_SHA1 if [NET && INET && IPV6]
        select CRYPTO_DES if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config INET6_IPCOMP tristate {
        prompt "IPv6: IPComp transformation" if [NET && INET && IPV6]
        depends on [IPV6]
        select XFRM if [NET && INET && IPV6]
        select INET6_XFRM_TUNNEL if [NET && INET && IPV6]
        select CRYPTO if [NET && INET && IPV6]
        select CRYPTO_DEFLATE if [NET && INET && IPV6]
        inherited [NET && INET && IPV6]
       }
       config IPV6_MIP6 tristate {
        prompt "IPv6: Mobility (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
        depends on [IPV6 && EXPERIMENTAL]
        select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && EXPERIMENTAL]
       }
      }
      config INET6_XFRM_TUNNEL tristate {
       select INET6_TUNNEL if [NET && INET]
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET6_TUNNEL tristate {
       default [n] if [NET && INET]
       inherited [NET && INET]
      }
      config INET6_XFRM_MODE_TRANSPORT tristate {
       prompt "IPv6: IPsec transport mode" if [NET && INET && IPV6]
       depends on [IPV6]
       default [IPV6] if [NET && INET && IPV6]
       select XFRM if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config INET6_XFRM_MODE_TUNNEL tristate {
       prompt "IPv6: IPsec tunnel mode" if [NET && INET && IPV6]
       depends on [IPV6]
       default [IPV6] if [NET && INET && IPV6]
       select XFRM if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config INET6_XFRM_MODE_BEET tristate {
       prompt "IPv6: IPsec BEET mode" if [NET && INET && IPV6]
       depends on [IPV6]
       default [IPV6] if [NET && INET && IPV6]
       select XFRM if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config INET6_XFRM_MODE_ROUTEOPTIMIZATION tristate {
       prompt "IPv6: MIPv6 route optimization mode (EXPERIMENTAL)" if [NET && INET && IPV6 && EXPERIMENTAL]
       depends on [IPV6 && EXPERIMENTAL]
       select XFRM if [NET && INET && IPV6 && EXPERIMENTAL]
       inherited [NET && INET && IPV6 && EXPERIMENTAL]
      }
      config IPV6_SIT tristate {
       prompt "IPv6: IPv6-in-IPv4 tunnel (SIT driver)" if [NET && INET && IPV6]
       depends on [IPV6]
       select INET_TUNNEL if [NET && INET && IPV6]
       default [y] if [NET && INET && IPV6]
       inherited [NET && INET && IPV6]
      }
      config IPV6_TUNNEL tristate {
       prompt "IPv6: IPv6-in-IPv6 tunnel" if [NET && INET && IPV6]
       select INET6_TUNNEL if [NET && INET && IPV6]
       depends on [IPV6]
       inherited [NET && INET && IPV6]
      }
      config IPV6_MULTIPLE_TABLES boolean {
       prompt "IPv6: Multiple Routing Tables" if [NET && INET && IPV6 && EXPERIMENTAL]
       depends on [IPV6 && EXPERIMENTAL]
       select FIB_RULES if [NET && INET && IPV6 && EXPERIMENTAL]
       inherited [NET && INET && IPV6 && EXPERIMENTAL]
       config IPV6_SUBTREES boolean {
        prompt "IPv6: source address based routing" if [NET && INET && IPV6_MULTIPLE_TABLES]
        depends on [IPV6_MULTIPLE_TABLES]
        inherited [NET && INET && IPV6_MULTIPLE_TABLES]
       }
      }
      config NETLABEL boolean {
       prompt "NetLabel subsystem support" if [NET && INET && SECURITY]
       depends on [SECURITY]
       default [n] if [NET && INET && SECURITY]
       inherited [NET && INET && SECURITY]
      }
     }
    }
    config NETWORK_SECMARK boolean {
     prompt "Security Marking" if [NET]
     inherited [NET]
    }
    menuconfig NETFILTER boolean {
     prompt "Network packet filtering framework (Netfilter)" if [NET]
     inherited [NET]
     if [NET && NETFILTER] {
      config NETFILTER_DEBUG boolean {
       prompt "Network packet filtering debugging" if [NET && NETFILTER]
       depends on [NETFILTER]
       inherited [NET && NETFILTER]
      }
      config BRIDGE_NETFILTER boolean {
       prompt "Bridged IP/ARP packets filtering" if [NET && BRIDGE && NETFILTER && INET]
       depends on [BRIDGE && NETFILTER && INET]
       default [y] if [NET && BRIDGE && NETFILTER && INET]
       inherited [NET && BRIDGE && NETFILTER && INET]
      }
      menu "Core Netfilter Configuration" {
       depends on [NET && INET && NETFILTER]
       config NETFILTER_NETLINK tristate {
        prompt "Netfilter netlink interface" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
        config NETFILTER_NETLINK_QUEUE tristate {
         prompt "Netfilter NFQUEUE over NFNETLINK interface" if [NET && INET && NETFILTER && NETFILTER_NETLINK]
         depends on [NETFILTER_NETLINK]
         inherited [NET && INET && NETFILTER && NETFILTER_NETLINK]
        }
        config NETFILTER_NETLINK_LOG tristate {
         prompt "Netfilter LOG over NFNETLINK interface" if [NET && INET && NETFILTER && NETFILTER_NETLINK]
         depends on [NETFILTER_NETLINK]
         inherited [NET && INET && NETFILTER && NETFILTER_NETLINK]
        }
       }
       config NF_CONNTRACK_ENABLED tristate {
        prompt "Netfilter connection tracking support" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
       }
       config NF_CONNTRACK tristate {
        default [NF_CONNTRACK_ENABLED] if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
       }
       config NF_CT_ACCT boolean {
        prompt "Connection tracking flow accounting" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_MARK boolean {
        prompt "Connection mark tracking support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_SECMARK boolean {
        prompt "Connection tracking security mark support" if [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
        depends on [NF_CONNTRACK && NETWORK_SECMARK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK && NETWORK_SECMARK]
       }
       config NF_CONNTRACK_EVENTS boolean {
        prompt "Connection tracking events (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CT_PROTO_GRE tristate {
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CT_PROTO_SCTP tristate {
        prompt "SCTP protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        default [n] if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CT_PROTO_UDPLITE tristate {
        prompt "UDP-Lite protocol connection tracking support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CONNTRACK_AMANDA tristate {
        prompt "Amanda backup protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        select TEXTSEARCH if [NET && INET && NETFILTER && NF_CONNTRACK]
        select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_FTP tristate {
        prompt "FTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_H323 tristate {
        prompt "H.323 protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && (IPV6 || IPV6="n")]
        depends on [EXPERIMENTAL && NF_CONNTRACK && (IPV6 || IPV6="n")]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && (IPV6 || IPV6="n")]
       }
       config NF_CONNTRACK_IRC tristate {
        prompt "IRC protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_NETBIOS_NS tristate {
        prompt "NetBIOS name service protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CONNTRACK_PPTP tristate {
        prompt "PPtP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        select NF_CT_PROTO_GRE if [NET && INET && NETFILTER && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CONNTRACK_SANE tristate {
        prompt "SANE protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CONNTRACK_SIP tristate {
        prompt "SIP protocol support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
        depends on [EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK]
       }
       config NF_CONNTRACK_TFTP tristate {
        prompt "TFTP protocol support" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
       }
       config NF_CT_NETLINK tristate {
        prompt "Connection tracking netlink interface (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && NETFILTER_NETLINK && (NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m") && (NF_NAT="n" || NF_NAT)]
        depends on [EXPERIMENTAL && NF_CONNTRACK && NETFILTER_NETLINK]
        depends on [NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m"]
        depends on [NF_NAT="n" || NF_NAT]
        inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_CONNTRACK && NETFILTER_NETLINK && (NF_CONNTRACK!="y" || NETFILTER_NETLINK!="m") && (NF_NAT="n" || NF_NAT)]
       }
       config NETFILTER_XTABLES tristate {
        prompt "Netfilter Xtables support (required for ip_tables)" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
        config NETFILTER_XT_TARGET_CLASSIFY tristate {
         prompt "\"CLASSIFY\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_CONNMARK tristate {
         prompt "\"CONNMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         depends on [NF_CONNTRACK]
         select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE) && NF_CONNTRACK]
        }
        config NETFILTER_XT_TARGET_DSCP tristate {
         prompt "\"DSCP\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_MANGLE || IP6_NF_MANGLE]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_MANGLE || IP6_NF_MANGLE)]
        }
        config NETFILTER_XT_TARGET_MARK tristate {
         prompt "\"MARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFQUEUE tristate {
         prompt "\"NFQUEUE\" target Support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NFLOG tristate {
         prompt "\"NFLOG\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_TARGET_NOTRACK tristate {
         prompt "\"NOTRACK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_RAW || IP6_NF_RAW]
         depends on [NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW) && NF_CONNTRACK]
        }
        config NETFILTER_XT_TARGET_TRACE tristate {
         prompt "\"TRACE\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW)]
         depends on [NETFILTER_XTABLES]
         depends on [IP_NF_RAW || IP6_NF_RAW]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP_NF_RAW || IP6_NF_RAW)]
        }
        config NETFILTER_XT_TARGET_SECMARK tristate {
         prompt "\"SECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
         depends on [NETFILTER_XTABLES && NETWORK_SECMARK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NETWORK_SECMARK]
        }
        config NETFILTER_XT_TARGET_CONNSECMARK tristate {
         prompt "\"CONNSECMARK\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK]
         depends on [NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK && NF_CONNTRACK_SECMARK]
        }
        config NETFILTER_XT_TARGET_TCPMSS tristate {
         prompt "\"TCPMSS\" target support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n")]
         depends on [NETFILTER_XTABLES && (IPV6 || IPV6="n")]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IPV6 || IPV6="n")]
        }
        config NETFILTER_XT_MATCH_COMMENT tristate {
         prompt "\"comment\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_CONNBYTES tristate {
         prompt "\"connbytes\" per-connection counter match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [NF_CONNTRACK]
         select NF_CT_ACCT if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_CONNLIMIT tristate {
         prompt "\"connlimit\" match support\"" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_CONNMARK tristate {
         prompt "\"connmark\" connection mark match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [NF_CONNTRACK]
         select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_CONNTRACK tristate {
         prompt "\"conntrack\" connection tracking match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_DCCP tristate {
         prompt "\"DCCP\" protocol match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_DSCP tristate {
         prompt "\"DSCP\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_ESP tristate {
         prompt "\"ESP\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_HELPER tristate {
         prompt "\"helper\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_LENGTH tristate {
         prompt "\"length\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_LIMIT tristate {
         prompt "\"limit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_MAC tristate {
         prompt "\"mac\" address match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_MARK tristate {
         prompt "\"mark\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_POLICY tristate {
         prompt "IPsec \"policy\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
         depends on [NETFILTER_XTABLES && XFRM]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && XFRM]
        }
        config NETFILTER_XT_MATCH_MULTIPORT tristate {
         prompt "Multiple port match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_PHYSDEV tristate {
         prompt "\"physdev\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER]
         depends on [NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && BRIDGE && BRIDGE_NETFILTER]
        }
        config NETFILTER_XT_MATCH_PKTTYPE tristate {
         prompt "\"pkttype\" packet type match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_QUOTA tristate {
         prompt "\"quota\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_REALM tristate {
         prompt "\"realm\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         select NET_CLS_ROUTE if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_SCTP tristate {
         prompt "\"sctp\" protocol match support (EXPERIMENTAL)" if [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL]
         depends on [NETFILTER_XTABLES && EXPERIMENTAL]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && EXPERIMENTAL]
        }
        config NETFILTER_XT_MATCH_STATE tristate {
         prompt "\"state\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
         depends on [NETFILTER_XTABLES]
         depends on [NF_CONNTRACK]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && NF_CONNTRACK]
        }
        config NETFILTER_XT_MATCH_STATISTIC tristate {
         prompt "\"statistic\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_STRING tristate {
         prompt "\"string\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         select TEXTSEARCH if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         select TEXTSEARCH_KMP if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         select TEXTSEARCH_BM if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         select TEXTSEARCH_FSM if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_TCPMSS tristate {
         prompt "\"tcpmss\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_TIME tristate {
         prompt "\"time\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_U32 tristate {
         prompt "\"u32\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES]
         depends on [NETFILTER_XTABLES]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES]
        }
        config NETFILTER_XT_MATCH_HASHLIMIT tristate {
         prompt "\"hashlimit\" match support" if [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n")]
         depends on [NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n")]
         inherited [NET && INET && NETFILTER && NETFILTER_XTABLES && (IP6_NF_IPTABLES || IP6_NF_IPTABLES="n")]
        }
       }
      }
      menu "IP: Netfilter Configuration" {
       depends on [NET && INET && NETFILTER]
       config NF_CONNTRACK_IPV4 tristate {
        prompt "IPv4 connection tracking support (required for NAT)" if [NET && INET && NETFILTER && NF_CONNTRACK]
        depends on [NF_CONNTRACK]
        inherited [NET && INET && NETFILTER && NF_CONNTRACK]
        config NF_CONNTRACK_PROC_COMPAT boolean {
         prompt "proc/sysctl compatibility with old connection tracking" if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
         depends on [NF_CONNTRACK_IPV4]
         default [y] if [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
         inherited [NET && INET && NETFILTER && NF_CONNTRACK_IPV4]
        }
       }
       config IP_NF_QUEUE tristate {
        prompt "IP Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
       }
       config IP_NF_IPTABLES tristate {
        prompt "IP tables support (required for filtering/masq/NAT)" if [NET && INET && NETFILTER]
        select NETFILTER_XTABLES if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
        config IP_NF_MATCH_IPRANGE tristate {
         prompt "IP range match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_TOS tristate {
         prompt "TOS match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_RECENT tristate {
         prompt "recent match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_ECN tristate {
         prompt "ECN match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_AH tristate {
         prompt "AH match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_TTL tristate {
         prompt "TTL match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_OWNER tristate {
         prompt "Owner match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_MATCH_ADDRTYPE tristate {
         prompt "address type match support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
         config IP_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && NETFILTER && IP_NF_FILTER]
          depends on [IP_NF_FILTER]
          inherited [NET && INET && NETFILTER && IP_NF_FILTER]
         }
        }
        config IP_NF_TARGET_LOG tristate {
         prompt "LOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config IP_NF_TARGET_ULOG tristate {
         prompt "ULOG target support" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
        config NF_NAT tristate {
         prompt "Full NAT" if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         depends on [IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK_IPV4]
         config NF_NAT_NEEDED boolean {
          depends on [NF_NAT]
          default [y] if [NET && INET && NETFILTER && NF_NAT]
          inherited [NET && INET && NETFILTER && NF_NAT]
         }
         config IP_NF_TARGET_MASQUERADE tristate {
          prompt "MASQUERADE target support" if [NET && INET && NETFILTER && NF_NAT]
          depends on [NF_NAT]
          inherited [NET && INET && NETFILTER && NF_NAT]
         }
         config IP_NF_TARGET_REDIRECT tristate {
          prompt "REDIRECT target support" if [NET && INET && NETFILTER && NF_NAT]
          depends on [NF_NAT]
          inherited [NET && INET && NETFILTER && NF_NAT]
         }
         config IP_NF_TARGET_NETMAP tristate {
          prompt "NETMAP target support" if [NET && INET && NETFILTER && NF_NAT]
          depends on [NF_NAT]
          inherited [NET && INET && NETFILTER && NF_NAT]
         }
         config IP_NF_TARGET_SAME tristate {
          prompt "SAME target support (OBSOLETE)" if [NET && INET && NETFILTER && NF_NAT]
          depends on [NF_NAT]
          inherited [NET && INET && NETFILTER && NF_NAT]
         }
         config NF_NAT_SNMP_BASIC tristate {
          prompt "Basic SNMP-ALG support (EXPERIMENTAL)" if [NET && INET && NETFILTER && EXPERIMENTAL && NF_NAT]
          depends on [EXPERIMENTAL && NF_NAT]
          inherited [NET && INET && NETFILTER && EXPERIMENTAL && NF_NAT]
         }
         config NF_NAT_PROTO_GRE tristate {
          depends on [NF_NAT && NF_CT_PROTO_GRE]
          inherited [NET && INET && NETFILTER && NF_NAT && NF_CT_PROTO_GRE]
         }
         config NF_NAT_FTP tristate {
          depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_FTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_IRC tristate {
          depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_IRC] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_TFTP tristate {
          depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_TFTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_AMANDA tristate {
          depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_AMANDA] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_PPTP tristate {
          depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_PPTP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          select NF_NAT_PROTO_GRE if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_H323 tristate {
          depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_H323] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
         config NF_NAT_SIP tristate {
          depends on [IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          default [NF_NAT && NF_CONNTRACK_SIP] if [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
          inherited [NET && INET && NETFILTER && IP_NF_IPTABLES && NF_CONNTRACK && NF_NAT]
         }
        }
        config IP_NF_MANGLE tristate {
         prompt "Packet mangling" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
         config IP_NF_TARGET_TOS tristate {
          prompt "TOS target support" if [NET && INET && NETFILTER && IP_NF_MANGLE]
          depends on [IP_NF_MANGLE]
          inherited [NET && INET && NETFILTER && IP_NF_MANGLE]
         }
         config IP_NF_TARGET_ECN tristate {
          prompt "ECN target support" if [NET && INET && NETFILTER && IP_NF_MANGLE]
          depends on [IP_NF_MANGLE]
          inherited [NET && INET && NETFILTER && IP_NF_MANGLE]
         }
         config IP_NF_TARGET_TTL tristate {
          prompt "TTL target support" if [NET && INET && NETFILTER && IP_NF_MANGLE]
          depends on [IP_NF_MANGLE]
          inherited [NET && INET && NETFILTER && IP_NF_MANGLE]
         }
         config IP_NF_TARGET_CLUSTERIP tristate {
          prompt "CLUSTERIP target support (EXPERIMENTAL)" if [NET && INET && NETFILTER && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4]
          depends on [IP_NF_MANGLE && EXPERIMENTAL]
          depends on [NF_CONNTRACK_IPV4]
          select NF_CONNTRACK_MARK if [NET && INET && NETFILTER && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4]
          inherited [NET && INET && NETFILTER && IP_NF_MANGLE && EXPERIMENTAL && NF_CONNTRACK_IPV4]
         }
        }
        config IP_NF_RAW tristate {
         prompt "raw table support (required for NOTRACK/TRACE)" if [NET && INET && NETFILTER && IP_NF_IPTABLES]
         depends on [IP_NF_IPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_IPTABLES]
        }
       }
       config IP_NF_ARPTABLES tristate {
        prompt "ARP tables support" if [NET && INET && NETFILTER]
        select NETFILTER_XTABLES if [NET && INET && NETFILTER]
        inherited [NET && INET && NETFILTER]
        config IP_NF_ARPFILTER tristate {
         prompt "ARP packet filtering" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         depends on [IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
        config IP_NF_ARP_MANGLE tristate {
         prompt "ARP payload mangling" if [NET && INET && NETFILTER && IP_NF_ARPTABLES]
         depends on [IP_NF_ARPTABLES]
         inherited [NET && INET && NETFILTER && IP_NF_ARPTABLES]
        }
       }
      }
      menu "IPv6: Netfilter Configuration (EXPERIMENTAL)" {
       depends on [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL]
       config NF_CONNTRACK_IPV6 tristate {
        prompt "IPv6 connection tracking support (EXPERIMENTAL)" if [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL && NF_CONNTRACK]
        depends on [INET && IPV6 && EXPERIMENTAL && NF_CONNTRACK]
        inherited [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL && NF_CONNTRACK]
       }
       config IP6_NF_QUEUE tristate {
        prompt "IP6 Userspace queueing via NETLINK (OBSOLETE)" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL]
        depends on [INET && IPV6 && NETFILTER && EXPERIMENTAL]
        inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL]
       }
       config IP6_NF_IPTABLES tristate {
        prompt "IP6 tables support (required for filtering)" if [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL]
        depends on [INET && IPV6 && EXPERIMENTAL]
        select NETFILTER_XTABLES if [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL]
        inherited [NET && NETFILTER && INET && IPV6 && EXPERIMENTAL]
        config IP6_NF_MATCH_RT tristate {
         prompt "Routing header match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_OPTS tristate {
         prompt "Hop-by-hop and Dst opts header match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_FRAG tristate {
         prompt "Fragmentation header match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_HL tristate {
         prompt "HL match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_OWNER tristate {
         prompt "Owner match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_IPV6HEADER tristate {
         prompt "IPv6 Extension Headers Match" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_AH tristate {
         prompt "AH match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_MH tristate {
         prompt "MH match support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_MATCH_EUI64 tristate {
         prompt "EUI64 address check" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
        config IP6_NF_FILTER tristate {
         prompt "Packet filtering" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         config IP6_NF_TARGET_LOG tristate {
          prompt "LOG target support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
          depends on [IP6_NF_FILTER]
          inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
         }
         config IP6_NF_TARGET_REJECT tristate {
          prompt "REJECT target support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
          depends on [IP6_NF_FILTER]
          inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_FILTER]
         }
        }
        config IP6_NF_MANGLE tristate {
         prompt "Packet mangling" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         config IP6_NF_TARGET_HL tristate {
          prompt "HL (hoplimit) target support" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_MANGLE]
          depends on [IP6_NF_MANGLE]
          inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_MANGLE]
         }
        }
        config IP6_NF_RAW tristate {
         prompt "raw table support (required for TRACE)" if [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
         depends on [IP6_NF_IPTABLES]
         inherited [NET && INET && IPV6 && NETFILTER && EXPERIMENTAL && IP6_NF_IPTABLES]
        }
       }
      }
      menu "DECnet: Netfilter Configuration" {
       depends on [NET && DECNET && NETFILTER && EXPERIMENTAL]
       config DECNET_NF_GRABULATOR tristate {
        prompt "Routing message grabulator (for userland routing daemon)" if [NET && DECNET && NETFILTER && EXPERIMENTAL]
        inherited [NET && DECNET && NETFILTER && EXPERIMENTAL]
       }
      }
      menu "Bridge: Netfilter Configuration" {
       depends on [NET && BRIDGE && NETFILTER]
       config BRIDGE_NF_EBTABLES tristate {
        prompt "Ethernet Bridge tables (ebtables) support" if [NET && BRIDGE && NETFILTER]
        inherited [NET && BRIDGE && NETFILTER]
        config BRIDGE_EBT_BROUTE tristate {
         prompt "ebt: broute table support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_T_FILTER tristate {
         prompt "ebt: filter table support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_T_NAT tristate {
         prompt "ebt: nat table support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_802_3 tristate {
         prompt "ebt: 802.3 filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_AMONG tristate {
         prompt "ebt: among filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_ARP tristate {
         prompt "ebt: ARP filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_IP tristate {
         prompt "ebt: IP filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_LIMIT tristate {
         prompt "ebt: limit match support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_MARK tristate {
         prompt "ebt: mark filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_PKTTYPE tristate {
         prompt "ebt: packet type filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_STP tristate {
         prompt "ebt: STP filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_VLAN tristate {
         prompt "ebt: 802.1Q VLAN filter support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_ARPREPLY tristate {
         prompt "ebt: arp reply target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES && INET]
         depends on [BRIDGE_NF_EBTABLES && INET]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES && INET]
        }
        config BRIDGE_EBT_DNAT tristate {
         prompt "ebt: dnat target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_MARK_T tristate {
         prompt "ebt: mark target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_REDIRECT tristate {
         prompt "ebt: redirect target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_SNAT tristate {
         prompt "ebt: snat target support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_LOG tristate {
         prompt "ebt: log support" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
        config BRIDGE_EBT_ULOG tristate {
         prompt "ebt: ulog support (OBSOLETE)" if [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
         depends on [BRIDGE_NF_EBTABLES]
         inherited [NET && BRIDGE && NETFILTER && BRIDGE_NF_EBTABLES]
        }
       }
      }
     }
    }
    menuconfig IP_DCCP tristate {
     prompt "The DCCP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
     depends on [INET && EXPERIMENTAL]
     inherited [NET && INET && EXPERIMENTAL]
     if [NET && IP_DCCP] {
      config INET_DCCP_DIAG tristate {
       depends on [INET_DIAG]
       default [y] if [NET && IP_DCCP="y" && INET_DIAG="y"]
       default [m] if [NET && IP_DCCP && INET_DIAG]
       inherited [NET && IP_DCCP && INET_DIAG]
      }
      config IP_DCCP_ACKVEC boolean {
       inherited [NET && IP_DCCP]
      }
      menu "DCCP CCIDs Configuration (EXPERIMENTAL)" {
       depends on [NET && IP_DCCP && EXPERIMENTAL]
       config IP_DCCP_CCID2 tristate {
        prompt "CCID2 (TCP-Like) (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IP_DCCP]
        depends on [IP_DCCP]
        default [IP_DCCP] if [NET && EXPERIMENTAL && IP_DCCP]
        select IP_DCCP_ACKVEC if [NET && EXPERIMENTAL && IP_DCCP]
        inherited [NET && EXPERIMENTAL && IP_DCCP]
        config IP_DCCP_CCID2_DEBUG boolean {
         prompt "CCID2 debugging messages" if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID2]
         depends on [IP_DCCP_CCID2]
         inherited [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID2]
        }
       }
       config IP_DCCP_CCID3 tristate {
        prompt "CCID3 (TCP-Friendly) (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IP_DCCP]
        depends on [IP_DCCP]
        default [IP_DCCP] if [NET && EXPERIMENTAL && IP_DCCP]
        inherited [NET && EXPERIMENTAL && IP_DCCP]
        config IP_DCCP_TFRC_LIB tristate {
         depends on [IP_DCCP_CCID3]
         default [IP_DCCP_CCID3] if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
         inherited [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
        }
        config IP_DCCP_CCID3_DEBUG boolean {
         prompt "CCID3 debugging messages" if [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
         depends on [IP_DCCP_CCID3]
         inherited [NET && IP_DCCP && EXPERIMENTAL && IP_DCCP_CCID3]
        }
        config IP_DCCP_CCID3_RTO integer {
         prompt "Use higher bound for nofeedback timer" if [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
         default [100] if [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
         depends on [IP_DCCP_CCID3 && EXPERIMENTAL]
         inherited [NET && IP_DCCP && IP_DCCP_CCID3 && EXPERIMENTAL]
        }
       }
      }
      menu "DCCP Kernel Hacking" {
       depends on [NET && IP_DCCP && DEBUG_KERNEL]
       config IP_DCCP_DEBUG boolean {
        prompt "DCCP debug messages" if [NET && IP_DCCP && DEBUG_KERNEL]
        inherited [NET && IP_DCCP && DEBUG_KERNEL]
       }
       config NET_DCCPPROBE tristate {
        prompt "DCCP connection probing" if [NET && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
        depends on [PROC_FS && KPROBES]
        inherited [NET && IP_DCCP && DEBUG_KERNEL && PROC_FS && KPROBES]
       }
      }
     }
    }
    menuconfig IP_SCTP tristate {
     prompt "The SCTP Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
     depends on [INET && EXPERIMENTAL]
     depends on [IPV6 || IPV6="n"]
     select CRYPTO if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
     select CRYPTO_HMAC if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
     select CRYPTO_SHA1 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
     select CRYPTO_MD5 if [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n") && SCTP_HMAC_MD5]
     inherited [NET && INET && EXPERIMENTAL && (IPV6 || IPV6="n")]
     if [NET && IP_SCTP] {
      config SCTP_DBG_MSG boolean {
       prompt "SCTP: Debug messages" if [NET && IP_SCTP]
       inherited [NET && IP_SCTP]
      }
      config SCTP_DBG_OBJCNT boolean {
       prompt "SCTP: Debug object counts" if [NET && IP_SCTP]
       inherited [NET && IP_SCTP]
      }
      choice boolean {
       prompt "SCTP: Cookie HMAC Algorithm" if [NET && IP_SCTP]
       default [SCTP_HMAC_MD5] if [NET && IP_SCTP]
       config SCTP_HMAC_NONE boolean {
        prompt "None" if [<choice>]
        inherited [<choice>]
       }
       config SCTP_HMAC_SHA1 boolean {
        prompt "HMAC-SHA1" if [<choice>]
        inherited [<choice>]
       }
       config SCTP_HMAC_MD5 boolean {
        prompt "HMAC-MD5" if [<choice>]
        inherited [<choice>]
       }
      }
     }
    }
    menuconfig TIPC tristate {
     prompt "The TIPC Protocol (EXPERIMENTAL)" if [NET && INET && EXPERIMENTAL]
     depends on [INET && EXPERIMENTAL]
     inherited [NET && INET && EXPERIMENTAL]
     if [NET && TIPC] {
      config TIPC_ADVANCED boolean {
       prompt "TIPC: Advanced configuration" if [NET && TIPC]
       default [n] if [NET && TIPC]
       inherited [NET && TIPC]
       config TIPC_ZONES integer {
        prompt "Maximum number of zones in network" if [NET && TIPC && TIPC_ADVANCED]
        depends on [TIPC_ADVANCED]
        default [3] if [NET && TIPC && TIPC_ADVANCED]
        inherited [NET && TIPC && TIPC_ADVANCED]
       }
       config TIPC_CLUSTERS integer {
        prompt "Maximum number of clusters in a zone" if [NET && TIPC && TIPC_ADVANCED]
        depends on [TIPC_ADVANCED]
        default [1] if [NET && TIPC && TIPC_ADVANCED]
        inherited [NET && TIPC && TIPC_ADVANCED]
       }
       config TIPC_NODES integer {
        prompt "Maximum number of nodes in cluster" if [NET && TIPC && TIPC_ADVANCED]
        depends on [TIPC_ADVANCED]
        default [255] if [NET && TIPC && TIPC_ADVANCED]
        inherited [NET && TIPC && TIPC_ADVANCED]
       }
       config TIPC_SLAVE_NODES integer {
        prompt "Maximum number of slave nodes in cluster" if [NET && TIPC && TIPC_ADVANCED]
        depends on [TIPC_ADVANCED]
        default [0] if [NET && TIPC && TIPC_ADVANCED]
        inherited [NET && TIPC && TIPC_ADVANCED]
       }
       config TIPC_PORTS integer {
        prompt "Maximum number of ports in a node" if [NET && TIPC && TIPC_ADVANCED]
        depends on [TIPC_ADVANCED]
        default [8191] if [NET && TIPC && TIPC_ADVANCED]
        inherited [NET && TIPC && TIPC_ADVANCED]
       }
       config TIPC_LOG integer {
        prompt "Size of log buffer" if [NET && TIPC && TIPC_ADVANCED]
        depends on [TIPC_ADVANCED]
        default [0] if [NET && TIPC && TIPC_ADVANCED]
        inherited [NET && TIPC && TIPC_ADVANCED]
       }
      }
      config TIPC_DEBUG boolean {
       prompt "Enable debugging support" if [NET && TIPC]
       default [n] if [NET && TIPC]
       inherited [NET && TIPC]
      }
     }
    }
    config ATM tristate {
     prompt "Asynchronous Transfer Mode (ATM) (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
     config ATM_CLIP tristate {
      prompt "Classical IP over ATM (EXPERIMENTAL)" if [NET && ATM && INET]
      depends on [ATM && INET]
      inherited [NET && ATM && INET]
      config ATM_CLIP_NO_ICMP boolean {
       prompt "Do NOT send ICMP if no neighbour (EXPERIMENTAL)" if [NET && ATM_CLIP]
       depends on [ATM_CLIP]
       inherited [NET && ATM_CLIP]
      }
     }
     config ATM_LANE tristate {
      prompt "LAN Emulation (LANE) support (EXPERIMENTAL)" if [NET && ATM]
      depends on [ATM]
      inherited [NET && ATM]
      config ATM_MPOA tristate {
       prompt "Multi-Protocol Over ATM (MPOA) support (EXPERIMENTAL)" if [NET && ATM && INET && ATM_LANE!="n"]
       depends on [ATM && INET && ATM_LANE!="n"]
       inherited [NET && ATM && INET && ATM_LANE!="n"]
      }
     }
     config ATM_BR2684 tristate {
      prompt "RFC1483/2684 Bridged protocols" if [NET && ATM && INET]
      depends on [ATM && INET]
      inherited [NET && ATM && INET]
      config ATM_BR2684_IPFILTER boolean {
       prompt "Per-VC IP filter kludge" if [NET && ATM_BR2684]
       depends on [ATM_BR2684]
       inherited [NET && ATM_BR2684]
      }
     }
    }
    config BRIDGE tristate {
     prompt "802.1d Ethernet Bridging" if [NET]
     select LLC if [NET]
     inherited [NET]
    }
    config VLAN_8021Q tristate {
     prompt "802.1Q VLAN Support" if [NET]
     inherited [NET]
    }
    config DECNET tristate {
     prompt "DECnet Support" if [NET]
     inherited [NET]
     config DECNET_ROUTER boolean {
      prompt "DECnet: router support (EXPERIMENTAL)" if [NET && DECNET && EXPERIMENTAL]
      depends on [DECNET && EXPERIMENTAL]
      select FIB_RULES if [NET && DECNET && EXPERIMENTAL]
      inherited [NET && DECNET && EXPERIMENTAL]
     }
    }
    config LLC tristate {
     depends on [NET]
     inherited [NET]
    }
    config LLC2 tristate {
     prompt "ANSI/IEEE 802.2 LLC type 2 Support" if [NET]
     select LLC if [NET]
     inherited [NET]
    }
    config IPX tristate {
     prompt "The IPX protocol" if [NET]
     select LLC if [NET]
     inherited [NET]
     config IPX_INTERN boolean {
      prompt "IPX: Full internal IPX network" if [NET && IPX]
      depends on [IPX]
      inherited [NET && IPX]
     }
    }
    config ATALK tristate {
     prompt "Appletalk protocol support" if [NET]
     select LLC if [NET]
     inherited [NET]
     config DEV_APPLETALK tristate {
      prompt "Appletalk interfaces support" if [NET && ATALK]
      depends on [ATALK]
      inherited [NET && ATALK]
      config LTPC tristate {
       prompt "Apple/Farallon LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
       depends on [DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
       inherited [NET && DEV_APPLETALK && (ISA || EISA) && ISA_DMA_API]
      }
      config COPS tristate {
       prompt "COPS LocalTalk PC support" if [NET && DEV_APPLETALK && (ISA || EISA)]
       depends on [DEV_APPLETALK && (ISA || EISA)]
       inherited [NET && DEV_APPLETALK && (ISA || EISA)]
       config COPS_DAYNA boolean {
        prompt "Dayna firmware support" if [NET && COPS]
        depends on [COPS]
        inherited [NET && COPS]
       }
       config COPS_TANGENT boolean {
        prompt "Tangent firmware support" if [NET && COPS]
        depends on [COPS]
        inherited [NET && COPS]
       }
      }
      config IPDDP tristate {
       prompt "Appletalk-IP driver support" if [NET && DEV_APPLETALK && ATALK]
       depends on [DEV_APPLETALK && ATALK]
       inherited [NET && DEV_APPLETALK && ATALK]
       config IPDDP_ENCAP boolean {
        prompt "IP to Appletalk-IP Encapsulation support" if [NET && IPDDP]
        depends on [IPDDP]
        inherited [NET && IPDDP]
       }
       config IPDDP_DECAP boolean {
        prompt "Appletalk-IP to IP Decapsulation support" if [NET && IPDDP]
        depends on [IPDDP]
        inherited [NET && IPDDP]
       }
      }
     }
    }
    config X25 tristate {
     prompt "CCITT X.25 Packet Layer (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
    }
    config LAPB tristate {
     prompt "LAPB Data Link Driver (EXPERIMENTAL)" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
    }
    config ECONET tristate {
     prompt "Acorn Econet/AUN protocols (EXPERIMENTAL)" if [NET && EXPERIMENTAL && INET]
     depends on [EXPERIMENTAL && INET]
     inherited [NET && EXPERIMENTAL && INET]
     config ECONET_AUNUDP boolean {
      prompt "AUN over UDP" if [NET && ECONET]
      depends on [ECONET]
      inherited [NET && ECONET]
     }
     config ECONET_NATIVE boolean {
      prompt "Native Econet" if [NET && ECONET]
      depends on [ECONET]
      inherited [NET && ECONET]
     }
    }
    config WAN_ROUTER tristate {
     prompt "WAN router" if [NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [NET && EXPERIMENTAL]
    }
    menuconfig NET_SCHED boolean {
     prompt "QoS and/or fair queueing" if [NET]
     select NET_SCH_FIFO if [NET]
     inherited [NET]
     if [NET && NET_SCHED] {
      config NET_SCH_CBQ tristate {
       prompt "Class Based Queueing (CBQ)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_HTB tristate {
       prompt "Hierarchical Token Bucket (HTB)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_HFSC tristate {
       prompt "Hierarchical Fair Service Curve (HFSC)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_ATM tristate {
       prompt "ATM Virtual Circuits (ATM)" if [NET && NET_SCHED && ATM]
       depends on [ATM]
       inherited [NET && NET_SCHED && ATM]
      }
      config NET_SCH_PRIO tristate {
       prompt "Multi Band Priority Queueing (PRIO)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_RR tristate {
       prompt "Multi Band Round Robin Queuing (RR)" if [NET && NET_SCHED]
       select NET_SCH_PRIO if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_RED tristate {
       prompt "Random Early Detection (RED)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_SFQ tristate {
       prompt "Stochastic Fairness Queueing (SFQ)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_TEQL tristate {
       prompt "True Link Equalizer (TEQL)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_TBF tristate {
       prompt "Token Bucket Filter (TBF)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_GRED tristate {
       prompt "Generic Random Early Detection (GRED)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_DSMARK tristate {
       prompt "Differentiated Services marker (DSMARK)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_NETEM tristate {
       prompt "Network emulator (NETEM)" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_SCH_INGRESS tristate {
       prompt "Ingress Qdisc" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS boolean {
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_BASIC tristate {
       prompt "Elementary classification (BASIC)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_TCINDEX tristate {
       prompt "Traffic-Control Index (TCINDEX)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_ROUTE4 tristate {
       prompt "Routing decision (ROUTE)" if [NET && NET_SCHED]
       select NET_CLS_ROUTE if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_ROUTE boolean {
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_FW tristate {
       prompt "Netfilter mark (FW)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_U32 tristate {
       prompt "Universal 32bit comparisons w/ hashing (U32)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
       config CLS_U32_PERF boolean {
        prompt "Performance counters support" if [NET && NET_SCHED && NET_CLS_U32]
        depends on [NET_CLS_U32]
        inherited [NET && NET_SCHED && NET_CLS_U32]
       }
       config CLS_U32_MARK boolean {
        prompt "Netfilter marks support" if [NET && NET_SCHED && NET_CLS_U32]
        depends on [NET_CLS_U32]
        inherited [NET && NET_SCHED && NET_CLS_U32]
       }
      }
      config NET_CLS_RSVP tristate {
       prompt "IPv4 Resource Reservation Protocol (RSVP)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_RSVP6 tristate {
       prompt "IPv6 Resource Reservation Protocol (RSVP6)" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_EMATCH boolean {
       prompt "Extended Matches" if [NET && NET_SCHED]
       select NET_CLS if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
       config NET_EMATCH_STACK integer {
        prompt "Stack size" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        default [32] if [NET && NET_SCHED && NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_CMP tristate {
        prompt "Simple packet data comparison" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_NBYTE tristate {
        prompt "Multi byte comparison" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_U32 tristate {
        prompt "U32 key" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_META tristate {
        prompt "Metadata" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
       config NET_EMATCH_TEXT tristate {
        prompt "Textsearch" if [NET && NET_SCHED && NET_EMATCH]
        depends on [NET_EMATCH]
        select TEXTSEARCH if [NET && NET_SCHED && NET_EMATCH]
        select TEXTSEARCH_KMP if [NET && NET_SCHED && NET_EMATCH]
        select TEXTSEARCH_BM if [NET && NET_SCHED && NET_EMATCH]
        select TEXTSEARCH_FSM if [NET && NET_SCHED && NET_EMATCH]
        inherited [NET && NET_SCHED && NET_EMATCH]
       }
      }
      config NET_CLS_ACT boolean {
       prompt "Actions" if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
       config NET_ACT_POLICE tristate {
        prompt "Traffic Policing" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_ACT_GACT tristate {
        prompt "Generic actions" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
        config GACT_PROB boolean {
         prompt "Probability support" if [NET && NET_SCHED && NET_ACT_GACT]
         depends on [NET_ACT_GACT]
         inherited [NET && NET_SCHED && NET_ACT_GACT]
        }
       }
       config NET_ACT_MIRRED tristate {
        prompt "Redirecting and Mirroring" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_ACT_IPT tristate {
        prompt "IPtables targets" if [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
        depends on [NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
        inherited [NET && NET_SCHED && NET_CLS_ACT && NETFILTER && IP_NF_IPTABLES]
       }
       config NET_ACT_NAT tristate {
        prompt "Stateless NAT" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        select NETFILTER if [NET && NET_SCHED && NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_ACT_PEDIT tristate {
        prompt "Packet Editing" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
       config NET_ACT_SIMP tristate {
        prompt "Simple Example (Debug)" if [NET && NET_SCHED && NET_CLS_ACT]
        depends on [NET_CLS_ACT]
        inherited [NET && NET_SCHED && NET_CLS_ACT]
       }
      }
      config NET_CLS_POLICE boolean {
       prompt "Traffic Policing (obsolete)" if [NET && NET_SCHED]
       select NET_CLS_ACT if [NET && NET_SCHED]
       select NET_ACT_POLICE if [NET && NET_SCHED]
       inherited [NET && NET_SCHED]
      }
      config NET_CLS_IND boolean {
       prompt "Incoming device classification" if [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
       depends on [NET_CLS_U32 || NET_CLS_FW]
       inherited [NET && NET_SCHED && (NET_CLS_U32 || NET_CLS_FW)]
      }
     }
    }
    config NET_SCH_FIFO boolean {
     inherited [NET]
    }
    menu "Network testing" {
     depends on [NET]
     config NET_PKTGEN tristate {
      prompt "Packet Generator (USE WITH CAUTION)" if [NET && PROC_FS]
      depends on [PROC_FS]
      inherited [NET && PROC_FS]
     }
     config NET_TCPPROBE tristate {
      prompt "TCP connection probing" if [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
      depends on [INET && EXPERIMENTAL && PROC_FS && KPROBES]
      inherited [NET && INET && EXPERIMENTAL && PROC_FS && KPROBES]
     }
    }
   }
   menuconfig HAMRADIO boolean {
    depends on [NET && !S390]
    prompt "Amateur Radio support" if [NET && !S390]
    inherited [NET && !S390]
    config AX25 tristate {
     prompt "Amateur Radio AX.25 Level 2 protocol" if [NET && HAMRADIO]
     depends on [HAMRADIO]
     inherited [NET && HAMRADIO]
     config AX25_DAMA_SLAVE boolean {
      prompt "AX.25 DAMA Slave support" if [NET && AX25]
      default [y] if [NET && AX25]
      depends on [AX25]
      inherited [NET && AX25]
      config AX25_DAMA_MASTER boolean {
       prompt "AX.25 DAMA Master support" if [NET && AX25_DAMA_SLAVE && BROKEN]
       depends on [AX25_DAMA_SLAVE && BROKEN]
       inherited [NET && AX25_DAMA_SLAVE && BROKEN]
      }
     }
     config NETROM tristate {
      prompt "Amateur Radio NET/ROM protocol" if [NET && AX25]
      depends on [AX25]
      inherited [NET && AX25]
     }
     config ROSE tristate {
      prompt "Amateur Radio X.25 PLP (Rose)" if [NET && AX25]
      depends on [AX25]
      inherited [NET && AX25]
     }
     menu "AX.25 network device drivers" {
      depends on [NET && HAMRADIO && AX25]
      config MKISS tristate {
       prompt "Serial port KISS driver" if [NET && HAMRADIO && AX25]
       depends on [AX25]
       select CRC16 if [NET && HAMRADIO && AX25]
       inherited [NET && HAMRADIO && AX25]
      }
      config 6PACK tristate {
       prompt "Serial port 6PACK driver" if [NET && HAMRADIO && AX25]
       depends on [AX25]
       inherited [NET && HAMRADIO && AX25]
      }
      config BPQETHER tristate {
       prompt "BPQ Ethernet driver" if [NET && HAMRADIO && AX25]
       depends on [AX25]
       inherited [NET && HAMRADIO && AX25]
      }
      config DMASCC tristate {
       prompt "High-speed (DMA) SCC driver for AX.25" if [NET && HAMRADIO && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
       depends on [ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
       inherited [NET && HAMRADIO && ISA && AX25 && BROKEN_ON_SMP && ISA_DMA_API]
      }
      config SCC tristate {
       prompt "Z8530 SCC driver" if [NET && HAMRADIO && ISA && AX25 && ISA_DMA_API]
       depends on [ISA && AX25 && ISA_DMA_API]
       inherited [NET && HAMRADIO && ISA && AX25 && ISA_DMA_API]
       config SCC_DELAY boolean {
        prompt "additional delay for PA0HZP OptoSCC compatible boards" if [NET && HAMRADIO && AX25 && SCC]
        depends on [SCC]
        inherited [NET && HAMRADIO && AX25 && SCC]
       }
       config SCC_TRXECHO boolean {
        prompt "support for TRX that feedback the tx signal to rx" if [NET && HAMRADIO && AX25 && SCC]
        depends on [SCC]
        inherited [NET && HAMRADIO && AX25 && SCC]
       }
      }
      config BAYCOM_SER_FDX tristate {
       prompt "BAYCOM ser12 fullduplex driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
       depends on [AX25 && !S390]
       select CRC_CCITT if [NET && HAMRADIO && AX25 && !S390]
       inherited [NET && HAMRADIO && AX25 && !S390]
      }
      config BAYCOM_SER_HDX tristate {
       prompt "BAYCOM ser12 halfduplex driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
       depends on [AX25 && !S390]
       select CRC_CCITT if [NET && HAMRADIO && AX25 && !S390]
       inherited [NET && HAMRADIO && AX25 && !S390]
      }
      config BAYCOM_PAR tristate {
       prompt "BAYCOM picpar and par96 driver for AX.25" if [NET && HAMRADIO && PARPORT && AX25]
       depends on [PARPORT && AX25]
       select CRC_CCITT if [NET && HAMRADIO && PARPORT && AX25]
       inherited [NET && HAMRADIO && PARPORT && AX25]
      }
      config BAYCOM_EPP tristate {
       prompt "BAYCOM epp driver for AX.25" if [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
       depends on [PARPORT && AX25 && !64BIT]
       select CRC_CCITT if [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
       inherited [NET && HAMRADIO && PARPORT && AX25 && !64BIT]
      }
      config YAM tristate {
       prompt "YAM driver for AX.25" if [NET && HAMRADIO && AX25 && !S390]
       depends on [AX25 && !S390]
       inherited [NET && HAMRADIO && AX25 && !S390]
      }
     }
    }
   }
   menuconfig IRDA tristate {
    depends on [NET && !S390]
    prompt "IrDA (infrared) subsystem support" if [NET && !S390]
    select CRC_CCITT if [NET && !S390]
    inherited [NET && !S390]
    config IRLAN tristate {
     prompt "IrLAN protocol" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRNET tristate {
     prompt "IrNET protocol" if [NET && IRDA && PPP]
     depends on [IRDA && PPP]
     inherited [NET && IRDA && PPP]
    }
    config IRCOMM tristate {
     prompt "IrCOMM protocol" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_ULTRA boolean {
     prompt "Ultra (connectionless) protocol" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_CACHE_LAST_LSAP boolean {
     prompt "Cache last LSAP" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_FAST_RR boolean {
     prompt "Fast RRs (low latency)" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    config IRDA_DEBUG boolean {
     prompt "Debug information" if [NET && IRDA]
     depends on [IRDA]
     inherited [NET && IRDA]
    }
    menu "Infrared-port device drivers" {
     depends on [NET && IRDA!="n"]
     config IRTTY_SIR tristate {
      prompt "IrTTY (uses Linux serial driver)" if [NET && IRDA]
      depends on [IRDA]
      inherited [NET && IRDA]
     }
     config DONGLE boolean {
      prompt "Serial dongle support" if [NET && IRDA && IRTTY_SIR]
      depends on [IRTTY_SIR]
      inherited [NET && IRDA && IRTTY_SIR]
      config ESI_DONGLE tristate {
       prompt "ESI JetEye PC dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config ACTISYS_DONGLE tristate {
       prompt "ACTiSYS IR-220L and IR220L+ dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config TEKRAM_DONGLE tristate {
       prompt "Tekram IrMate 210B dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config TOIM3232_DONGLE tristate {
       prompt "TOIM3232 IrDa dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config LITELINK_DONGLE tristate {
       prompt "Parallax LiteLink dongle" if [NET && IRTTY_SIR && DONGLE && IRDA]
       depends on [IRTTY_SIR && DONGLE && IRDA]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA]
      }
      config MA600_DONGLE tristate {
       prompt "Mobile Action MA600 dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config GIRBIL_DONGLE tristate {
       prompt "Greenwich GIrBIL dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config MCP2120_DONGLE tristate {
       prompt "Microchip MCP2120" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config OLD_BELKIN_DONGLE tristate {
       prompt "Old Belkin dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
      config ACT200L_DONGLE tristate {
       prompt "ACTiSYS IR-200L dongle" if [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       depends on [IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
       inherited [NET && IRTTY_SIR && DONGLE && IRDA && EXPERIMENTAL]
      }
     }
     config KINGSUN_DONGLE tristate {
      prompt "KingSun/DonShine DS-620 IrDA-USB dongle" if [NET && IRDA && USB && EXPERIMENTAL]
      depends on [IRDA && USB && EXPERIMENTAL]
      inherited [NET && IRDA && USB && EXPERIMENTAL]
     }
     config EP7211_DONGLE tristate {
      prompt "EP7211 I/R support" if [NET && IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
      depends on [IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
      inherited [NET && IRTTY_SIR && ARCH_EP7211 && IRDA && EXPERIMENTAL]
     }
     config KSDAZZLE_DONGLE tristate {
      prompt "KingSun Dazzle IrDA-USB dongle (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
      depends on [IRDA && USB && EXPERIMENTAL]
      inherited [NET && IRDA && USB && EXPERIMENTAL]
     }
     config KS959_DONGLE tristate {
      prompt "KingSun KS-959 IrDA-USB dongle (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
      depends on [IRDA && USB && EXPERIMENTAL]
      inherited [NET && IRDA && USB && EXPERIMENTAL]
     }
     config IRPORT_SIR tristate {
      prompt "IrPORT (IrDA serial driver)" if [NET && IRDA && BROKEN_ON_SMP]
      depends on [IRDA && BROKEN_ON_SMP]
      inherited [NET && IRDA && BROKEN_ON_SMP]
     }
     config DONGLE_OLD boolean {
      prompt "Old Serial dongle support" if [NET && IRDA && IRPORT_SIR && BROKEN_ON_SMP]
      depends on [IRPORT_SIR && BROKEN_ON_SMP]
      inherited [NET && IRDA && IRPORT_SIR && BROKEN_ON_SMP]
      config ESI_DONGLE_OLD tristate {
       prompt "ESI JetEye PC dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config ACTISYS_DONGLE_OLD tristate {
       prompt "ACTiSYS IR-220L and IR220L+ dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config TEKRAM_DONGLE_OLD tristate {
       prompt "Tekram IrMate 210B dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config GIRBIL_DONGLE_OLD tristate {
       prompt "Greenwich GIrBIL dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config LITELINK_DONGLE_OLD tristate {
       prompt "Parallax LiteLink dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config MCP2120_DONGLE_OLD tristate {
       prompt "Microchip MCP2120" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config OLD_BELKIN_DONGLE_OLD tristate {
       prompt "Old Belkin dongle" if [NET && DONGLE_OLD && IRDA]
       depends on [DONGLE_OLD && IRDA]
       inherited [NET && DONGLE_OLD && IRDA]
      }
      config ACT200L_DONGLE_OLD tristate {
       prompt "ACTiSYS IR-200L dongle (EXPERIMENTAL)" if [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
       depends on [DONGLE_OLD && EXPERIMENTAL && IRDA]
       inherited [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
      }
      config MA600_DONGLE_OLD tristate {
       prompt "Mobile Action MA600 dongle (EXPERIMENTAL)" if [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
       depends on [DONGLE_OLD && EXPERIMENTAL && IRDA]
       inherited [NET && DONGLE_OLD && EXPERIMENTAL && IRDA]
      }
      config EP7211_IR tristate {
       prompt "EP7211 I/R support" if [NET && DONGLE_OLD && ARCH_EP7211 && IRDA]
       depends on [DONGLE_OLD && ARCH_EP7211 && IRDA]
       inherited [NET && DONGLE_OLD && ARCH_EP7211 && IRDA]
      }
     }
     config USB_IRDA tristate {
      prompt "IrDA USB dongles" if [NET && IRDA && USB]
      depends on [IRDA && USB]
      select FW_LOADER if [NET && IRDA && USB]
      inherited [NET && IRDA && USB]
     }
     config SIGMATEL_FIR tristate {
      prompt "SigmaTel STIr4200 bridge (EXPERIMENTAL)" if [NET && IRDA && USB && EXPERIMENTAL]
      depends on [IRDA && USB && EXPERIMENTAL]
      select CRC32 if [NET && IRDA && USB && EXPERIMENTAL]
      inherited [NET && IRDA && USB && EXPERIMENTAL]
     }
     config NSC_FIR tristate {
      prompt "NSC PC87108/PC87338" if [NET && IRDA && ISA_DMA_API]
      depends on [IRDA && ISA_DMA_API]
      inherited [NET && IRDA && ISA_DMA_API]
     }
     config WINBOND_FIR tristate {
      prompt "Winbond W83977AF (IR)" if [NET && IRDA && ISA_DMA_API]
      depends on [IRDA && ISA_DMA_API]
      inherited [NET && IRDA && ISA_DMA_API]
     }
     config TOSHIBA_FIR tristate {
      prompt "Toshiba Type-O IR Port" if [NET && IRDA && PCI && !64BIT && VIRT_TO_BUS]
      depends on [IRDA && PCI && !64BIT && VIRT_TO_BUS]
      inherited [NET && IRDA && PCI && !64BIT && VIRT_TO_BUS]
     }
     config AU1000_FIR tristate {
      prompt "Alchemy Au1000 SIR/FIR" if [NET && SOC_AU1000 && IRDA]
      depends on [SOC_AU1000 && IRDA]
      inherited [NET && SOC_AU1000 && IRDA]
     }
     config SMC_IRCC_FIR tristate {
      prompt "SMSC IrCC (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
      depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
      inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     }
     config ALI_FIR tristate {
      prompt "ALi M5123 FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
      depends on [EXPERIMENTAL && IRDA && ISA_DMA_API]
      inherited [NET && EXPERIMENTAL && IRDA && ISA_DMA_API]
     }
     config VLSI_FIR tristate {
      prompt "VLSI 82C147 SIR/MIR/FIR (EXPERIMENTAL)" if [NET && EXPERIMENTAL && IRDA && PCI]
      depends on [EXPERIMENTAL && IRDA && PCI]
      inherited [NET && EXPERIMENTAL && IRDA && PCI]
     }
     config SA1100_FIR tristate {
      prompt "SA1100 Internal IR" if [NET && ARCH_SA1100 && IRDA]
      depends on [ARCH_SA1100 && IRDA]
      inherited [NET && ARCH_SA1100 && IRDA]
     }
     config VIA_FIR tristate {
      prompt "VIA VT8231/VT1211 SIR/MIR/FIR" if [NET && IRDA && ISA_DMA_API]
      depends on [IRDA && ISA_DMA_API]
      inherited [NET && IRDA && ISA_DMA_API]
     }
     config PXA_FICP tristate {
      prompt "Intel PXA2xx Internal FICP" if [NET && ARCH_PXA && IRDA]
      depends on [ARCH_PXA && IRDA]
      inherited [NET && ARCH_PXA && IRDA]
     }
     config MCS_FIR tristate {
      prompt "MosChip MCS7780 IrDA-USB dongle" if [NET && IRDA && USB && EXPERIMENTAL]
      depends on [IRDA && USB && EXPERIMENTAL]
      inherited [NET && IRDA && USB && EXPERIMENTAL]
     }
    }
   }
   menuconfig BT tristate {
    depends on [NET && !S390]
    prompt "Bluetooth subsystem support" if [NET && !S390]
    inherited [NET && !S390]
    config BT_L2CAP tristate {
     prompt "L2CAP protocol support" if [NET && BT]
     depends on [BT]
     inherited [NET && BT]
    }
    config BT_SCO tristate {
     prompt "SCO links support" if [NET && BT]
     depends on [BT]
     inherited [NET && BT]
    }
    config BT_RFCOMM tristate {
     prompt "RFCOMM protocol support" if [NET && BT && BT_L2CAP]
     depends on [BT && BT_L2CAP]
     inherited [NET && BT && BT_L2CAP]
     config BT_RFCOMM_TTY boolean {
      prompt "RFCOMM TTY support" if [NET && BT_RFCOMM]
      depends on [BT_RFCOMM]
      inherited [NET && BT_RFCOMM]
     }
    }
    config BT_BNEP tristate {
     prompt "BNEP protocol support" if [NET && BT && BT_L2CAP]
     depends on [BT && BT_L2CAP]
     select CRC32 if [NET && BT && BT_L2CAP]
     inherited [NET && BT && BT_L2CAP]
     config BT_BNEP_MC_FILTER boolean {
      prompt "Multicast filter support" if [NET && BT_BNEP]
      depends on [BT_BNEP]
      inherited [NET && BT_BNEP]
     }
     config BT_BNEP_PROTO_FILTER boolean {
      prompt "Protocol filter support" if [NET && BT_BNEP]
      depends on [BT_BNEP]
      inherited [NET && BT_BNEP]
     }
    }
    config BT_CMTP tristate {
     prompt "CMTP protocol support" if [NET && BT && BT_L2CAP && ISDN_CAPI]
     depends on [BT && BT_L2CAP && ISDN_CAPI]
     inherited [NET && BT && BT_L2CAP && ISDN_CAPI]
    }
    config BT_HIDP tristate {
     prompt "HIDP protocol support" if [NET && BT && BT_L2CAP && INPUT]
     depends on [BT && BT_L2CAP && INPUT]
     select HID if [NET && BT && BT_L2CAP && INPUT]
     inherited [NET && BT && BT_L2CAP && INPUT]
    }
    menu "Bluetooth device drivers" {
     depends on [NET && BT]
     config BT_HCIUSB tristate {
      prompt "HCI USB driver" if [NET && BT && USB]
      depends on [USB]
      inherited [NET && BT && USB]
      config BT_HCIUSB_SCO boolean {
       prompt "SCO (voice) support" if [NET && BT && BT_HCIUSB]
       depends on [BT_HCIUSB]
       inherited [NET && BT && BT_HCIUSB]
      }
      config BT_HCIBTUSB tristate {
       prompt "HCI USB driver (alternate version)" if [NET && BT && USB && EXPERIMENTAL && BT_HCIUSB="n"]
       depends on [USB && EXPERIMENTAL && BT_HCIUSB="n"]
       inherited [NET && BT && USB && EXPERIMENTAL && BT_HCIUSB="n"]
      }
     }
     config BT_HCIBTSDIO tristate {
      prompt "HCI SDIO driver" if [NET && BT && MMC]
      depends on [MMC]
      inherited [NET && BT && MMC]
     }
     config BT_HCIUART tristate {
      prompt "HCI UART driver" if [NET && BT]
      inherited [NET && BT]
      config BT_HCIUART_H4 boolean {
       prompt "UART (H4) protocol support" if [NET && BT && BT_HCIUART]
       depends on [BT_HCIUART]
       inherited [NET && BT && BT_HCIUART]
      }
      config BT_HCIUART_BCSP boolean {
       prompt "BCSP protocol support" if [NET && BT && BT_HCIUART]
       depends on [BT_HCIUART]
       inherited [NET && BT && BT_HCIUART]
      }
      config BT_HCIUART_LL boolean {
       prompt "HCILL protocol support" if [NET && BT && BT_HCIUART]
       depends on [BT_HCIUART]
       inherited [NET && BT && BT_HCIUART]
      }
     }
     config BT_HCIBCM203X tristate {
      prompt "HCI BCM203x USB driver" if [NET && BT && USB]
      depends on [USB]
      select FW_LOADER if [NET && BT && USB]
      inherited [NET && BT && USB]
     }
     config BT_HCIBPA10X tristate {
      prompt "HCI BPA10x USB driver" if [NET && BT && USB]
      depends on [USB]
      inherited [NET && BT && USB]
     }
     config BT_HCIBFUSB tristate {
      prompt "HCI BlueFRITZ! USB driver" if [NET && BT && USB]
      depends on [USB]
      select FW_LOADER if [NET && BT && USB]
      inherited [NET && BT && USB]
     }
     config BT_HCIDTL1 tristate {
      prompt "HCI DTL1 (PC Card) driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIBT3C tristate {
      prompt "HCI BT3C (PC Card) driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      select FW_LOADER if [NET && BT && PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIBLUECARD tristate {
      prompt "HCI BlueCard (PC Card) driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIBTUART tristate {
      prompt "HCI UART (PC Card) device driver" if [NET && BT && PCMCIA]
      depends on [PCMCIA]
      inherited [NET && BT && PCMCIA]
     }
     config BT_HCIVHCI tristate {
      prompt "HCI VHCI (Virtual HCI device) driver" if [NET && BT]
      inherited [NET && BT]
     }
    }
   }
   config AF_RXRPC tristate {
    prompt "RxRPC session sockets" if [NET && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    select CRYPTO if [NET && INET && EXPERIMENTAL]
    select KEYS if [NET && INET && EXPERIMENTAL]
    inherited [NET && INET && EXPERIMENTAL]
    config AF_RXRPC_DEBUG boolean {
     prompt "RxRPC dynamic debugging" if [NET && AF_RXRPC]
     depends on [AF_RXRPC]
     inherited [NET && AF_RXRPC]
    }
    config RXKAD tristate {
     prompt "RxRPC Kerberos security" if [NET && AF_RXRPC]
     depends on [AF_RXRPC]
     select CRYPTO if [NET && AF_RXRPC]
     select CRYPTO_MANAGER if [NET && AF_RXRPC]
     select CRYPTO_BLKCIPHER if [NET && AF_RXRPC]
     select CRYPTO_PCBC if [NET && AF_RXRPC]
     select CRYPTO_FCRYPT if [NET && AF_RXRPC]
     inherited [NET && AF_RXRPC]
    }
   }
   config FIB_RULES boolean {
    inherited [NET]
   }
   menu "Wireless" {
    depends on [NET && !S390]
    config CFG80211 tristate {
     prompt "Improved wireless configuration API" if [NET && !S390]
     inherited [NET && !S390]
     config NL80211 boolean {
      prompt "nl80211 new netlink interface support" if [NET && !S390 && CFG80211]
      depends on [CFG80211]
      default [y] if [NET && !S390 && CFG80211]
      inherited [NET && !S390 && CFG80211]
     }
    }
    config WIRELESS_EXT boolean {
     prompt "Wireless extensions" if [NET && !S390]
     default [n] if [NET && !S390]
     inherited [NET && !S390]
    }
    config MAC80211 tristate {
     prompt "Generic IEEE 802.11 Networking Stack (mac80211)" if [NET && !S390 && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select CRYPTO if [NET && !S390 && EXPERIMENTAL]
     select CRYPTO_ECB if [NET && !S390 && EXPERIMENTAL]
     select CRYPTO_ARC4 if [NET && !S390 && EXPERIMENTAL]
     select CRYPTO_AES if [NET && !S390 && EXPERIMENTAL]
     select CRC32 if [NET && !S390 && EXPERIMENTAL]
     select WIRELESS_EXT if [NET && !S390 && EXPERIMENTAL]
     select CFG80211 if [NET && !S390 && EXPERIMENTAL]
     select NET_SCH_FIFO if [NET && !S390 && EXPERIMENTAL]
     inherited [NET && !S390 && EXPERIMENTAL]
     config MAC80211_RCSIMPLE boolean {
      prompt "'simple' rate control algorithm" if [NET && !S390 && MAC80211 && EMBEDDED]
      default [y] if [NET && !S390 && MAC80211]
      depends on [MAC80211]
      inherited [NET && !S390 && MAC80211]
     }
     config MAC80211_LEDS boolean {
      prompt "Enable LED triggers" if [NET && !S390 && MAC80211 && LEDS_TRIGGERS]
      depends on [MAC80211 && LEDS_TRIGGERS]
      inherited [NET && !S390 && MAC80211 && LEDS_TRIGGERS]
     }
     config MAC80211_DEBUGFS boolean {
      prompt "Export mac80211 internals in DebugFS" if [NET && !S390 && MAC80211 && DEBUG_FS]
      depends on [MAC80211 && DEBUG_FS]
      inherited [NET && !S390 && MAC80211 && DEBUG_FS]
     }
     config MAC80211_DEBUG boolean {
      prompt "Enable debugging output" if [NET && !S390 && MAC80211]
      depends on [MAC80211]
      inherited [NET && !S390 && MAC80211]
      config MAC80211_VERBOSE_DEBUG boolean {
       prompt "Verbose debugging output" if [NET && !S390 && MAC80211_DEBUG]
       depends on [MAC80211_DEBUG]
       inherited [NET && !S390 && MAC80211_DEBUG]
      }
      config MAC80211_LOWTX_FRAME_DUMP boolean {
       prompt "Debug frame dumping" if [NET && !S390 && MAC80211_DEBUG]
       depends on [MAC80211_DEBUG]
       inherited [NET && !S390 && MAC80211_DEBUG]
      }
      config TKIP_DEBUG boolean {
       prompt "TKIP debugging" if [NET && !S390 && MAC80211_DEBUG]
       depends on [MAC80211_DEBUG]
       inherited [NET && !S390 && MAC80211_DEBUG]
      }
      config MAC80211_DEBUG_COUNTERS boolean {
       prompt "Extra statistics for TX/RX debugging" if [NET && !S390 && MAC80211_DEBUG]
       depends on [MAC80211_DEBUG]
       inherited [NET && !S390 && MAC80211_DEBUG]
      }
      config MAC80211_IBSS_DEBUG boolean {
       prompt "Support for IBSS testing" if [NET && !S390 && MAC80211_DEBUG]
       depends on [MAC80211_DEBUG]
       inherited [NET && !S390 && MAC80211_DEBUG]
      }
      config MAC80211_VERBOSE_PS_DEBUG boolean {
       prompt "Verbose powersave mode debugging" if [NET && !S390 && MAC80211_DEBUG]
       depends on [MAC80211_DEBUG]
       inherited [NET && !S390 && MAC80211_DEBUG]
      }
     }
    }
    config IEEE80211 tristate {
     prompt "Generic IEEE 802.11 Networking Stack" if [NET && !S390]
     inherited [NET && !S390]
     config IEEE80211_DEBUG boolean {
      prompt "Enable full debugging output" if [NET && !S390 && IEEE80211]
      depends on [IEEE80211]
      inherited [NET && !S390 && IEEE80211]
     }
     config IEEE80211_CRYPT_WEP tristate {
      prompt "IEEE 802.11 WEP encryption (802.1x)" if [NET && !S390 && IEEE80211]
      depends on [IEEE80211]
      select CRYPTO if [NET && !S390 && IEEE80211]
      select CRYPTO_ARC4 if [NET && !S390 && IEEE80211]
      select CRYPTO_ECB if [NET && !S390 && IEEE80211]
      select CRC32 if [NET && !S390 && IEEE80211]
      inherited [NET && !S390 && IEEE80211]
     }
     config IEEE80211_CRYPT_CCMP tristate {
      prompt "IEEE 802.11i CCMP support" if [NET && !S390 && IEEE80211]
      depends on [IEEE80211]
      select CRYPTO if [NET && !S390 && IEEE80211]
      select CRYPTO_AES if [NET && !S390 && IEEE80211]
      inherited [NET && !S390 && IEEE80211]
     }
     config IEEE80211_CRYPT_TKIP tristate {
      prompt "IEEE 802.11i TKIP encryption" if [NET && !S390 && IEEE80211]
      depends on [IEEE80211]
      select WIRELESS_EXT if [NET && !S390 && IEEE80211]
      select CRYPTO if [NET && !S390 && IEEE80211]
      select CRYPTO_MICHAEL_MIC if [NET && !S390 && IEEE80211]
      select CRYPTO_ECB if [NET && !S390 && IEEE80211]
      select CRC32 if [NET && !S390 && IEEE80211]
      inherited [NET && !S390 && IEEE80211]
     }
     config IEEE80211_SOFTMAC tristate {
      prompt "Software MAC add-on to the IEEE 802.11 networking stack" if [NET && !S390 && IEEE80211 && EXPERIMENTAL]
      depends on [IEEE80211 && EXPERIMENTAL]
      select WIRELESS_EXT if [NET && !S390 && IEEE80211 && EXPERIMENTAL]
      select IEEE80211_CRYPT_WEP if [NET && !S390 && IEEE80211 && EXPERIMENTAL]
      inherited [NET && !S390 && IEEE80211 && EXPERIMENTAL]
      config IEEE80211_SOFTMAC_DEBUG boolean {
       prompt "Enable full debugging output" if [NET && !S390 && IEEE80211_SOFTMAC]
       depends on [IEEE80211_SOFTMAC]
       inherited [NET && !S390 && IEEE80211_SOFTMAC]
      }
     }
    }
   }
   menuconfig RFKILL tristate {
    prompt "RF switch subsystem support" if [NET]
    inherited [NET]
    config RFKILL_INPUT tristate {
     prompt "Input layer to RF switch connector" if [NET && RFKILL && INPUT]
     depends on [RFKILL && INPUT]
     inherited [NET && RFKILL && INPUT]
    }
    config RFKILL_LEDS boolean {
     depends on [RFKILL && LEDS_TRIGGERS]
     default [y] if [NET && RFKILL && LEDS_TRIGGERS]
     inherited [NET && RFKILL && LEDS_TRIGGERS]
    }
   }
   menuconfig NET_9P tristate {
    depends on [NET && EXPERIMENTAL]
    prompt "Plan 9 Resource Sharing Support (9P2000) (Experimental)" if [NET && EXPERIMENTAL]
    inherited [NET && EXPERIMENTAL]
    config NET_9P_FD tristate {
     depends on [NET_9P]
     default [y] if [NET && NET_9P]
     prompt "9P File Descriptor Transports (Experimental)" if [NET && NET_9P]
     inherited [NET && NET_9P]
    }
    config NET_9P_VIRTIO tristate {
     depends on [NET_9P && EXPERIMENTAL && VIRTIO]
     prompt "9P Virtio Transport (Experimental)" if [NET && NET_9P && EXPERIMENTAL && VIRTIO]
     inherited [NET && NET_9P && EXPERIMENTAL && VIRTIO]
    }
    config NET_9P_DEBUG boolean {
     prompt "Debug information" if [NET && NET_9P]
     depends on [NET_9P]
     inherited [NET && NET_9P]
    }
   }
  }
 }
}
menu "Device Drivers" {
 menu "Generic Driver Options" {
  config UEVENT_HELPER_PATH string {
   prompt "path to uevent helper" if [HOTPLUG]
   depends on [HOTPLUG]
   default ["/sbin/hotplug"] if [HOTPLUG]
   inherited [HOTPLUG]
  }
  config STANDALONE boolean {
   prompt "Select only drivers that don't need compile-time external firmware" if [EXPERIMENTAL]
   default [y] if []
  }
  config PREVENT_FIRMWARE_BUILD boolean {
   prompt "Prevent firmware from being built" if []
   default [y] if []
  }
  config FW_LOADER tristate {
   prompt "Userspace firmware loading support" if [HOTPLUG]
   depends on [HOTPLUG]
   inherited [HOTPLUG]
  }
  config DEBUG_DRIVER boolean {
   prompt "Driver Core verbose debug messages" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config DEBUG_DEVRES boolean {
   prompt "Managed device resources verbose debug messages" if [DEBUG_KERNEL]
   depends on [DEBUG_KERNEL]
   inherited [DEBUG_KERNEL]
  }
  config SYS_HYPERVISOR boolean {
   default [n] if []
  }
 }
 menuconfig CONNECTOR tristate {
  prompt "Connector - unified userspace <-> kernelspace linker" if [NET]
  depends on [NET]
  inherited [NET]
  if [CONNECTOR] {
   config PROC_EVENTS boolean {
    prompt "Report process events to userspace" if [CONNECTOR="y"]
    depends on [CONNECTOR="y"]
    default [y] if [CONNECTOR="y"]
    inherited [CONNECTOR="y"]
   }
  }
 }
 menuconfig MTD tristate {
  prompt "Memory Technology Device (MTD) support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [MTD] {
   config MTD_DEBUG boolean {
    prompt "Debugging" if [MTD]
    inherited [MTD]
    config MTD_DEBUG_VERBOSE integer {
     prompt "Debugging verbosity (0 = quiet, 3 = noisy)" if [MTD && MTD_DEBUG]
     depends on [MTD_DEBUG]
     default [0] if [MTD && MTD_DEBUG]
     inherited [MTD && MTD_DEBUG]
    }
   }
   config MTD_CONCAT tristate {
    prompt "MTD concatenating support" if [MTD]
    inherited [MTD]
   }
   config MTD_PARTITIONS boolean {
    prompt "MTD partitioning support" if [MTD]
    inherited [MTD]
    config MTD_REDBOOT_PARTS tristate {
     prompt "RedBoot partition table parsing" if [MTD && MTD_PARTITIONS]
     depends on [MTD_PARTITIONS]
     inherited [MTD && MTD_PARTITIONS]
     config MTD_REDBOOT_DIRECTORY_BLOCK integer {
      prompt "Location of RedBoot partition table" if [MTD && MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      default [-1] if [MTD && MTD_REDBOOT_PARTS]
      inherited [MTD && MTD_REDBOOT_PARTS]
     }
     config MTD_REDBOOT_PARTS_UNALLOCATED boolean {
      prompt "Include unallocated flash regions" if [MTD && MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      inherited [MTD && MTD_REDBOOT_PARTS]
     }
     config MTD_REDBOOT_PARTS_READONLY boolean {
      prompt "Force read-only for RedBoot system images" if [MTD && MTD_REDBOOT_PARTS]
      depends on [MTD_REDBOOT_PARTS]
      inherited [MTD && MTD_REDBOOT_PARTS]
     }
    }
    config MTD_CMDLINE_PARTS boolean {
     prompt "Command line partition table parsing" if [MTD_PARTITIONS && MTD="y"]
     depends on [MTD_PARTITIONS="y" && MTD="y"]
     inherited [MTD_PARTITIONS && MTD="y"]
    }
    config MTD_AFS_PARTS tristate {
     prompt "ARM Firmware Suite partition parsing" if [MTD && ARM && MTD_PARTITIONS]
     depends on [ARM && MTD_PARTITIONS]
     inherited [MTD && ARM && MTD_PARTITIONS]
    }
   }
   config MTD_CHAR tristate {
    prompt "Direct char device access to MTD devices" if [MTD]
    inherited [MTD]
   }
   config MTD_BLKDEVS tristate {
    prompt "Common interface to block layer for MTD 'translation layers'" if [MTD && BLOCK]
    depends on [BLOCK]
    default [n] if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config MTD_BLOCK tristate {
    prompt "Caching block device access to MTD devices" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
    config MTD_BLOCK_RO tristate {
     prompt "Readonly block device access to MTD devices" if [MTD && MTD_BLOCK!="y" && BLOCK]
     depends on [MTD_BLOCK!="y" && BLOCK]
     select MTD_BLKDEVS if [MTD && MTD_BLOCK!="y" && BLOCK]
     inherited [MTD && MTD_BLOCK!="y" && BLOCK]
    }
   }
   config FTL tristate {
    prompt "FTL (Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config NFTL tristate {
    prompt "NFTL (NAND Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
    config NFTL_RW boolean {
     prompt "Write support for NFTL" if [MTD && NFTL]
     depends on [NFTL]
     inherited [MTD && NFTL]
    }
   }
   config INFTL tristate {
    prompt "INFTL (Inverse NAND Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config RFD_FTL tristate {
    prompt "Resident Flash Disk (Flash Translation Layer) support" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config SSFDC tristate {
    prompt "NAND SSFDC (SmartMedia) read only translation layer" if [MTD && BLOCK]
    depends on [BLOCK]
    select MTD_BLKDEVS if [MTD && BLOCK]
    inherited [MTD && BLOCK]
   }
   config MTD_OOPS tristate {
    prompt "Log panic/oops to an MTD buffer" if [MTD]
    depends on [MTD]
    inherited [MTD]
   }
   menu "RAM/ROM/Flash chip drivers" {
    depends on [MTD]
    config MTD_CFI tristate {
     prompt "Detect flash chips by Common Flash Interface (CFI) probe" if [MTD]
     select MTD_GEN_PROBE if [MTD]
     inherited [MTD]
    }
    config MTD_JEDECPROBE tristate {
     prompt "Detect non-CFI AMD/JEDEC-compatible flash chips" if [MTD]
     select MTD_GEN_PROBE if [MTD]
     inherited [MTD]
    }
    config MTD_GEN_PROBE tristate {
     inherited [MTD]
    }
    config MTD_CFI_ADV_OPTIONS boolean {
     prompt "Flash chip driver advanced configuration options" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
     choice boolean {
      prompt "Flash cmd/query data swapping" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      default [MTD_CFI_NOSWAP] if [MTD && MTD_CFI_ADV_OPTIONS]
      config MTD_CFI_NOSWAP boolean {
       prompt "NO" if [<choice>]
       inherited [<choice>]
      }
      config MTD_CFI_BE_BYTE_SWAP boolean {
       prompt "BIG_ENDIAN_BYTE" if [<choice>]
       inherited [<choice>]
      }
      config MTD_CFI_LE_BYTE_SWAP boolean {
       prompt "LITTLE_ENDIAN_BYTE" if [<choice>]
       inherited [<choice>]
      }
     }
     config MTD_CFI_GEOMETRY boolean {
      prompt "Specific CFI Flash geometry selection" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      inherited [MTD && MTD_CFI_ADV_OPTIONS]
      config MTD_MAP_BANK_WIDTH_1 boolean {
       prompt "Support  8-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_2 boolean {
       prompt "Support 16-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_4 boolean {
       prompt "Support 32-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_8 boolean {
       prompt "Support 64-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_16 boolean {
       prompt "Support 128-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_MAP_BANK_WIDTH_32 boolean {
       prompt "Support 256-bit buswidth" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I1 boolean {
       prompt "Support 1-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I2 boolean {
       prompt "Support 2-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [y] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I4 boolean {
       prompt "Support 4-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
      config MTD_CFI_I8 boolean {
       prompt "Support 8-chip flash interleave" if [MTD && MTD_CFI_GEOMETRY]
       default [n] if [MTD]
       inherited [MTD]
      }
     }
     config MTD_OTP boolean {
      prompt "Protection Registers aka one-time programmable (OTP) bits" if [MTD && MTD_CFI_ADV_OPTIONS]
      depends on [MTD_CFI_ADV_OPTIONS]
      default [n] if [MTD && MTD_CFI_ADV_OPTIONS]
      inherited [MTD && MTD_CFI_ADV_OPTIONS]
     }
    }
    config MTD_CFI_INTELEXT tristate {
     prompt "Support for Intel/Sharp flash chips" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
    }
    config MTD_CFI_AMDSTD tristate {
     prompt "Support for AMD/Fujitsu flash chips" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
    }
    config MTD_CFI_STAA tristate {
     prompt "Support for ST (Advanced Architecture) flash chips" if [MTD && MTD_GEN_PROBE]
     depends on [MTD_GEN_PROBE]
     select MTD_CFI_UTIL if [MTD && MTD_GEN_PROBE]
     inherited [MTD && MTD_GEN_PROBE]
    }
    config MTD_CFI_UTIL tristate {
     inherited [MTD]
    }
    config MTD_RAM tristate {
     prompt "Support for RAM chips in bus mapping" if [MTD]
     inherited [MTD]
    }
    config MTD_ROM tristate {
     prompt "Support for ROM chips in bus mapping" if [MTD]
     inherited [MTD]
    }
    config MTD_ABSENT tristate {
     prompt "Support for absent chips in bus mapping" if [MTD]
     inherited [MTD]
    }
    config MTD_XIP boolean {
     prompt "XIP aware MTD support" if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
     depends on [!SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
     default [y] if [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP && XIP_KERNEL]
     inherited [MTD && !SMP && (MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && EXPERIMENTAL && ARCH_MTD_XIP]
    }
   }
   menu "Mapping drivers for chip access" {
    depends on [MTD]
    config MTD_COMPLEX_MAPPINGS boolean {
     prompt "Support non-linear mappings of flash chips" if [MTD]
     inherited [MTD]
    }
    config MTD_PHYSMAP tristate {
     prompt "CFI Flash device in physical memory map" if [MTD && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     depends on [MTD_CFI || MTD_JEDECPROBE || MTD_ROM]
     inherited [MTD && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     config MTD_PHYSMAP_START hex {
      prompt "Physical start address of flash mapping" if [MTD && MTD_PHYSMAP]
      depends on [MTD_PHYSMAP]
      default [0x8000000] if [MTD && MTD_PHYSMAP]
      inherited [MTD && MTD_PHYSMAP]
     }
     config MTD_PHYSMAP_LEN hex {
      prompt "Physical length of flash mapping" if [MTD && MTD_PHYSMAP]
      depends on [MTD_PHYSMAP]
      default [0] if [MTD && MTD_PHYSMAP]
      inherited [MTD && MTD_PHYSMAP]
     }
     config MTD_PHYSMAP_BANKWIDTH integer {
      prompt "Bank width in octets" if [MTD && MTD_PHYSMAP]
      depends on [MTD_PHYSMAP]
      default [2] if [MTD && MTD_PHYSMAP]
      inherited [MTD && MTD_PHYSMAP]
     }
    }
    config MTD_PHYSMAP_OF tristate {
     prompt "Flash device in physical memory map based on OF description" if [MTD && PPC_OF && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     depends on [PPC_OF && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
     inherited [MTD && PPC_OF && (MTD_CFI || MTD_JEDECPROBE || MTD_ROM)]
    }
    config MTD_PMC_MSP_EVM tristate {
     prompt "CFI Flash device mapped on PMC-Sierra MSP" if [MTD && PMC_MSP && MTD_CFI]
     depends on [PMC_MSP && MTD_CFI]
     select MTD_PARTITIONS if [MTD && PMC_MSP && MTD_CFI]
     inherited [MTD && PMC_MSP && MTD_CFI]
     choice boolean {
      prompt "Maximum mappable memory available for flash IO" if [MTD && MTD_PMC_MSP_EVM]
      depends on [MTD_PMC_MSP_EVM]
      default [MSP_FLASH_MAP_LIMIT_32M] if [MTD && MTD_PMC_MSP_EVM]
      config MSP_FLASH_MAP_LIMIT_32M boolean {
       prompt "32M" if [<choice>]
       inherited [<choice>]
      }
     }
    }
    config MSP_FLASH_MAP_LIMIT hex {
     default [0x02000000] if [MTD && MSP_FLASH_MAP_LIMIT_32M]
     depends on [MSP_FLASH_MAP_LIMIT_32M]
     inherited [MTD && MSP_FLASH_MAP_LIMIT_32M]
    }
    config MTD_PMC_MSP_RAMROOT tristate {
     prompt "Embedded RAM block device for root on PMC-Sierra MSP" if [MTD && PMC_MSP_EMBEDDED_ROOTFS && (MTD_BLOCK || MTD_BLOCK_RO) && MTD_RAM]
     depends on [PMC_MSP_EMBEDDED_ROOTFS && (MTD_BLOCK || MTD_BLOCK_RO) && MTD_RAM]
     inherited [MTD && PMC_MSP_EMBEDDED_ROOTFS && (MTD_BLOCK || MTD_BLOCK_RO) && MTD_RAM]
    }
    config MTD_SUN_UFLASH tristate {
     prompt "Sun Microsystems userflash support" if [MTD && SPARC && MTD_CFI && PCI]
     depends on [SPARC && MTD_CFI && PCI]
     inherited [MTD && SPARC && MTD_CFI && PCI]
    }
    config MTD_PNC2000 tristate {
     prompt "CFI Flash device mapped on Photron PNC-2000" if [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
     depends on [X86 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_SC520CDP tristate {
     prompt "CFI Flash device mapped on AMD SC520 CDP" if [MTD && X86 && MTD_CFI && MTD_CONCAT]
     depends on [X86 && MTD_CFI && MTD_CONCAT]
     inherited [MTD && X86 && MTD_CFI && MTD_CONCAT]
    }
    config MTD_NETSC520 tristate {
     prompt "CFI Flash device mapped on AMD NetSc520" if [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
     depends on [X86 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD && X86 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_TS5500 tristate {
     prompt "JEDEC Flash device mapped on Technologic Systems TS-5500" if [MTD && X86]
     depends on [X86]
     select MTD_PARTITIONS if [MTD && X86]
     select MTD_JEDECPROBE if [MTD && X86]
     select MTD_CFI_AMDSTD if [MTD && X86]
     inherited [MTD && X86]
    }
    config MTD_SBC_GXX tristate {
     prompt "CFI Flash device mapped on Arcom SBC-GXx boards" if [MTD && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && X86 && MTD_CFI_INTELEXT && MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_PXA2XX tristate {
     prompt "CFI Flash device mapped on Intel XScale PXA2xx based boards" if [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
     depends on [(PXA25x || PXA27x) && MTD_CFI_INTELEXT]
     select MTD_PARTITIONS if [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
     inherited [MTD && (PXA25x || PXA27x) && MTD_CFI_INTELEXT]
    }
    config MTD_OCTAGON tristate {
     prompt "JEDEC Flash device mapped on Octagon 5066 SBC" if [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_VMAX tristate {
     prompt "JEDEC Flash device mapped on Tempustech VMAX SBC301" if [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     depends on [X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && X86 && MTD_JEDEC && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_SCx200_DOCFLASH tristate {
     prompt "Flash device mapped with DOCCS on NatSemi SCx200" if [MTD && SCx200 && MTD_CFI && MTD_PARTITIONS]
     depends on [SCx200 && MTD_CFI && MTD_PARTITIONS]
     inherited [MTD && SCx200 && MTD_CFI && MTD_PARTITIONS]
    }
    config MTD_AMD76XROM tristate {
     prompt "BIOS flash chip on AMD76x southbridge" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_ICHXROM tristate {
     prompt "BIOS flash chip on Intel Controller Hub 2/3/4/5" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_ESB2ROM tristate {
     prompt "BIOS flash chip on Intel ESB Controller Hub 2" if [MTD && X86 && MTD_JEDECPROBE && PCI]
     depends on [X86 && MTD_JEDECPROBE && PCI]
     inherited [MTD && X86 && MTD_JEDECPROBE && PCI]
    }
    config MTD_CK804XROM tristate {
     prompt "BIOS flash chip on Nvidia CK804" if [MTD && X86 && MTD_JEDECPROBE && PCI]
     depends on [X86 && MTD_JEDECPROBE && PCI]
     inherited [MTD && X86 && MTD_JEDECPROBE && PCI]
    }
    config MTD_SCB2_FLASH tristate {
     prompt "BIOS flash chip on Intel SCB2 boards" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_TSUNAMI tristate {
     prompt "Flash chips on Tsunami TIG bus" if [MTD && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
     depends on [ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_NETtel tristate {
     prompt "CFI flash device on SnapGear/SecureEdge" if [MTD && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
     depends on [X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_PARTITIONS && MTD_JEDECPROBE]
    }
    config MTD_ALCHEMY tristate {
     prompt "AMD Alchemy Pb1xxx/Db1xxx/RDK MTD support" if [MTD && SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
     depends on [SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
     inherited [MTD && SOC_AU1X00 && MTD_PARTITIONS && MTD_CFI]
    }
    config MTD_MTX1 tristate {
     prompt "4G Systems MTX-1 Flash device" if [MTD && MIPS_MTX1 && MTD_CFI]
     depends on [MIPS_MTX1 && MTD_CFI]
     inherited [MTD && MIPS_MTX1 && MTD_CFI]
    }
    config MTD_DILNETPC tristate {
     prompt "CFI Flash device mapped on DIL/Net PC" if [MTD && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT]
     depends on [X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT]
     inherited [MTD && X86 && MTD_CONCAT && MTD_PARTITIONS && MTD_CFI_INTELEXT]
     config MTD_DILNETPC_BOOTSIZE hex {
      prompt "Size of DIL/Net PC flash boot partition" if [MTD && MTD_DILNETPC]
      depends on [MTD_DILNETPC]
      default [0x80000] if [MTD && MTD_DILNETPC]
      inherited [MTD && MTD_DILNETPC]
     }
    }
    config MTD_L440GX tristate {
     prompt "BIOS flash chip on Intel L440GX boards" if [MTD && X86 && MTD_JEDECPROBE]
     depends on [X86 && MTD_JEDECPROBE]
     inherited [MTD && X86 && MTD_JEDECPROBE]
    }
    config MTD_SBC8240 tristate {
     prompt "Flash device on SBC8240" if [MTD && MTD_JEDECPROBE && 8260]
     depends on [MTD_JEDECPROBE && 8260]
     inherited [MTD && MTD_JEDECPROBE && 8260]
    }
    config MTD_TQM8XXL tristate {
     prompt "CFI Flash device mapped on TQM8XXL" if [MTD && MTD_CFI && TQM8xxL]
     depends on [MTD_CFI && TQM8xxL]
     inherited [MTD && MTD_CFI && TQM8xxL]
    }
    config MTD_RPXLITE tristate {
     prompt "CFI Flash device mapped on RPX Lite or CLLF" if [MTD && MTD_CFI && (RPXCLASSIC || RPXLITE)]
     depends on [MTD_CFI && (RPXCLASSIC || RPXLITE)]
     inherited [MTD && MTD_CFI && (RPXCLASSIC || RPXLITE)]
    }
    config MTD_MBX860 tristate {
     prompt "System flash on MBX860 board" if [MTD && MTD_CFI && MBX]
     depends on [MTD_CFI && MBX]
     inherited [MTD && MTD_CFI && MBX]
    }
    config MTD_DBOX2 tristate {
     prompt "CFI Flash device mapped on D-Box2" if [MTD && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
     depends on [DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
     inherited [MTD && DBOX2 && MTD_CFI_INTELSTD && MTD_CFI_INTELEXT && MTD_CFI_AMDSTD]
    }
    config MTD_CFI_FLAGADM tristate {
     prompt "CFI Flash device mapping on FlagaDM" if [MTD && 8xx && MTD_CFI]
     depends on [8xx && MTD_CFI]
     inherited [MTD && 8xx && MTD_CFI]
    }
    config MTD_WALNUT tristate {
     prompt "Flash device mapped on IBM 405GP Walnut" if [MTD && MTD_JEDECPROBE && WALNUT && !PPC_MERGE]
     depends on [MTD_JEDECPROBE && WALNUT && !PPC_MERGE]
     inherited [MTD && MTD_JEDECPROBE && WALNUT && !PPC_MERGE]
    }
    config MTD_EBONY tristate {
     prompt "Flash devices mapped on IBM 440GP Ebony" if [MTD && MTD_JEDECPROBE && EBONY && !PPC_MERGE]
     depends on [MTD_JEDECPROBE && EBONY && !PPC_MERGE]
     inherited [MTD && MTD_JEDECPROBE && EBONY && !PPC_MERGE]
    }
    config MTD_OCOTEA tristate {
     prompt "Flash devices mapped on IBM 440GX Ocotea" if [MTD && MTD_CFI && OCOTEA && !PPC_MERGE]
     depends on [MTD_CFI && OCOTEA && !PPC_MERGE]
     inherited [MTD && MTD_CFI && OCOTEA && !PPC_MERGE]
    }
    config MTD_REDWOOD tristate {
     prompt "CFI Flash devices mapped on IBM Redwood" if [MTD && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
     depends on [MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
     inherited [MTD && MTD_CFI && (REDWOOD_4 || REDWOOD_5 || REDWOOD_6)]
    }
    config MTD_SOLUTIONENGINE tristate {
     prompt "CFI Flash device mapped on Hitachi SolutionEngine" if [MTD && SUPERH && MTD_CFI && MTD_REDBOOT_PARTS]
     depends on [SUPERH && MTD_CFI && MTD_REDBOOT_PARTS]
     inherited [MTD && SUPERH && MTD_CFI && MTD_REDBOOT_PARTS]
    }
    config MTD_ARM_INTEGRATOR tristate {
     prompt "CFI Flash device mapped on ARM Integrator/P720T" if [MTD && ARM && MTD_CFI]
     depends on [ARM && MTD_CFI]
     inherited [MTD && ARM && MTD_CFI]
    }
    config MTD_CDB89712 tristate {
     prompt "Cirrus CDB89712 evaluation board mappings" if [MTD && MTD_CFI && ARCH_CDB89712]
     depends on [MTD_CFI && ARCH_CDB89712]
     inherited [MTD && MTD_CFI && ARCH_CDB89712]
    }
    config MTD_SA1100 tristate {
     prompt "CFI Flash device mapped on StrongARM SA11x0" if [MTD && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
     depends on [MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
     inherited [MTD && MTD_CFI && ARCH_SA1100 && MTD_PARTITIONS]
    }
    config MTD_IPAQ tristate {
     prompt "CFI Flash device mapped on Compaq/HP iPAQ" if [MTD && IPAQ_HANDHELD && MTD_CFI]
     depends on [IPAQ_HANDHELD && MTD_CFI]
     inherited [MTD && IPAQ_HANDHELD && MTD_CFI]
    }
    config MTD_DC21285 tristate {
     prompt "CFI Flash device mapped on DC21285 Footbridge" if [MTD && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
     depends on [MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && MTD_CFI && ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_IXP4XX tristate {
     prompt "CFI Flash device mapped on Intel IXP4xx based systems" if [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
     depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
     inherited [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX]
    }
    config MTD_IXP2000 tristate {
     prompt "CFI Flash device mapped on Intel IXP2000 based systems" if [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
     depends on [MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
     inherited [MTD && MTD_CFI && MTD_COMPLEX_MAPPINGS && ARCH_IXP2000]
    }
    config MTD_FORTUNET tristate {
     prompt "CFI Flash device mapped on the FortuNet board" if [MTD && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
     depends on [MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
     inherited [MTD && MTD_CFI && MTD_PARTITIONS && SA1100_FORTUNET]
    }
    config MTD_AUTCPU12 tristate {
     prompt "NV-RAM mapping AUTCPU12 board" if [MTD && ARCH_AUTCPU12]
     depends on [ARCH_AUTCPU12]
     inherited [MTD && ARCH_AUTCPU12]
    }
    config MTD_EDB7312 tristate {
     prompt "CFI Flash device mapped on EDB7312" if [MTD && ARCH_EDB7312 && MTD_CFI]
     depends on [ARCH_EDB7312 && MTD_CFI]
     inherited [MTD && ARCH_EDB7312 && MTD_CFI]
    }
    config MTD_IMPA7 tristate {
     prompt "JEDEC Flash device mapped on impA7" if [MTD && ARM && MTD_JEDECPROBE]
     depends on [ARM && MTD_JEDECPROBE]
     inherited [MTD && ARM && MTD_JEDECPROBE]
    }
    config MTD_CEIVA tristate {
     prompt "JEDEC Flash device mapped on Ceiva/Polaroid PhotoMax Digital Picture Frame" if [MTD && MTD_JEDECPROBE && ARCH_CEIVA]
     depends on [MTD_JEDECPROBE && ARCH_CEIVA]
     inherited [MTD && MTD_JEDECPROBE && ARCH_CEIVA]
    }
    config MTD_NOR_TOTO tristate {
     prompt "NOR Flash device on TOTO board" if [MTD && ARCH_OMAP && OMAP_TOTO]
     depends on [ARCH_OMAP && OMAP_TOTO]
     inherited [MTD && ARCH_OMAP && OMAP_TOTO]
    }
    config MTD_H720X tristate {
     prompt "Hynix evaluation board mappings" if [MTD && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
     depends on [MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
     inherited [MTD && MTD_CFI && (ARCH_H7201 || ARCH_H7202)]
    }
    config MTD_MPC1211 tristate {
     prompt "CFI Flash device mapped on Interface MPC-1211" if [MTD && SH_MPC1211 && MTD_CFI]
     depends on [SH_MPC1211 && MTD_CFI]
     inherited [MTD && SH_MPC1211 && MTD_CFI]
    }
    config MTD_OMAP_NOR tristate {
     prompt "TI OMAP board mappings" if [MTD && MTD_CFI && ARCH_OMAP]
     depends on [MTD_CFI && ARCH_OMAP]
     inherited [MTD && MTD_CFI && ARCH_OMAP]
    }
    config MTD_PCI tristate {
     prompt "PCI MTD driver" if [MTD && PCI && MTD_COMPLEX_MAPPINGS]
     depends on [PCI && MTD_COMPLEX_MAPPINGS]
     inherited [MTD && PCI && MTD_COMPLEX_MAPPINGS]
    }
    config MTD_PCMCIA tristate {
     prompt "PCMCIA MTD driver" if [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     depends on [PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     inherited [MTD && PCMCIA && MTD_COMPLEX_MAPPINGS && BROKEN]
     config MTD_PCMCIA_ANONYMOUS boolean {
      prompt "Use PCMCIA MTD drivers for anonymous PCMCIA cards" if [MTD && MTD_PCMCIA]
      depends on [MTD_PCMCIA]
      inherited [MTD && MTD_PCMCIA]
     }
    }
    config MTD_UCLINUX tristate {
     prompt "Generic uClinux RAM/ROM filesystem support" if [MTD && MTD_PARTITIONS && !MMU]
     depends on [MTD_PARTITIONS && !MMU]
     inherited [MTD && MTD_PARTITIONS && !MMU]
    }
    config MTD_WRSBC8260 tristate {
     prompt "Map driver for WindRiver PowerQUICC II MPC82xx board" if [MTD && (SBC82xx || SBC8560)]
     depends on [SBC82xx || SBC8560]
     select MTD_PARTITIONS if [MTD && (SBC82xx || SBC8560)]
     select MTD_MAP_BANK_WIDTH_4 if [MTD && (SBC82xx || SBC8560)]
     select MTD_MAP_BANK_WIDTH_1 if [MTD && (SBC82xx || SBC8560)]
     select MTD_CFI_I1 if [MTD && (SBC82xx || SBC8560)]
     select MTD_CFI_I4 if [MTD && (SBC82xx || SBC8560)]
     inherited [MTD && (SBC82xx || SBC8560)]
    }
    config MTD_DMV182 tristate {
     prompt "Map driver for Dy-4 SVME/DMV-182 board." if [MTD && DMV182]
     depends on [DMV182]
     select MTD_PARTITIONS if [MTD && DMV182]
     select MTD_MAP_BANK_WIDTH_32 if [MTD && DMV182]
     select MTD_CFI_I8 if [MTD && DMV182]
     select MTD_CFI_AMDSTD if [MTD && DMV182]
     inherited [MTD && DMV182]
    }
    config MTD_BAST tristate {
     prompt "Map driver for Simtec BAST (EB2410ITX) or Thorcom VR1000" if [MTD && (ARCH_BAST || MACH_VR1000)]
     depends on [ARCH_BAST || MACH_VR1000]
     select MTD_PARTITIONS if [MTD && (ARCH_BAST || MACH_VR1000)]
     select MTD_MAP_BANK_WIDTH_16 if [MTD && (ARCH_BAST || MACH_VR1000)]
     select MTD_JEDECPROBE if [MTD && (ARCH_BAST || MACH_VR1000)]
     inherited [MTD && (ARCH_BAST || MACH_VR1000)]
     config MTD_BAST_MAXSIZE integer {
      prompt "Maximum size for BAST flash area (MiB)" if [MTD && MTD_BAST]
      depends on [MTD_BAST]
      default [4] if [MTD && MTD_BAST]
      inherited [MTD && MTD_BAST]
     }
    }
    config MTD_SHARP_SL boolean {
     prompt "ROM mapped on Sharp SL Series" if [MTD && ARCH_PXA]
     depends on [ARCH_PXA]
     inherited [MTD && ARCH_PXA]
    }
    config MTD_INTEL_VR_NOR tristate {
     prompt "NOR flash on Intel Vermilion Range Expansion Bus CS0" if [MTD && PCI]
     depends on [PCI]
     inherited [MTD && PCI]
    }
    config MTD_PLATRAM tristate {
     prompt "Map driver for platform device RAM (mtd-ram)" if [MTD]
     select MTD_RAM if [MTD]
     inherited [MTD]
    }
   }
   menu "Self-contained MTD device drivers" {
    depends on [MTD]
    config MTD_PMC551 tristate {
     prompt "Ramix PMC551 PCI Mezzanine RAM card support" if [MTD && PCI]
     depends on [PCI]
     inherited [MTD && PCI]
     config MTD_PMC551_BUGFIX boolean {
      prompt "PMC551 256M DRAM Bugfix" if [MTD && MTD_PMC551]
      depends on [MTD_PMC551]
      inherited [MTD && MTD_PMC551]
     }
     config MTD_PMC551_DEBUG boolean {
      prompt "PMC551 Debugging" if [MTD && MTD_PMC551]
      depends on [MTD_PMC551]
      inherited [MTD && MTD_PMC551]
     }
    }
    config MTD_MS02NV tristate {
     prompt "DEC MS02-NV NVRAM module support" if [MTD && MACH_DECSTATION]
     depends on [MACH_DECSTATION]
     inherited [MTD && MACH_DECSTATION]
    }
    config MTD_DATAFLASH tristate {
     prompt "Support for AT45xxx DataFlash" if [MTD && SPI_MASTER && EXPERIMENTAL]
     depends on [SPI_MASTER && EXPERIMENTAL]
     inherited [MTD && SPI_MASTER && EXPERIMENTAL]
    }
    config MTD_M25P80 tristate {
     prompt "Support most SPI Flash chips (AT26DF, M25P, W25X, ...)" if [MTD && SPI_MASTER && EXPERIMENTAL]
     depends on [SPI_MASTER && EXPERIMENTAL]
     inherited [MTD && SPI_MASTER && EXPERIMENTAL]
    }
    config MTD_SLRAM tristate {
     prompt "Uncached system RAM" if [MTD]
     inherited [MTD]
    }
    config MTD_PHRAM tristate {
     prompt "Physical system RAM" if [MTD]
     inherited [MTD]
    }
    config MTD_LART tristate {
     prompt "28F160xx flash driver for LART" if [MTD && SA1100_LART]
     depends on [SA1100_LART]
     inherited [MTD && SA1100_LART]
    }
    config MTD_MTDRAM tristate {
     prompt "Test driver using RAM" if [MTD]
     inherited [MTD]
     config MTDRAM_TOTAL_SIZE integer {
      prompt "MTDRAM device size in KiB" if [MTD && MTD_MTDRAM]
      depends on [MTD_MTDRAM]
      default [4096] if [MTD && MTD_MTDRAM]
      inherited [MTD && MTD_MTDRAM]
     }
     config MTDRAM_ERASE_SIZE integer {
      prompt "MTDRAM erase block size in KiB" if [MTD && MTD_MTDRAM]
      depends on [MTD_MTDRAM]
      default [128] if [MTD && MTD_MTDRAM]
      inherited [MTD && MTD_MTDRAM]
     }
     config MTDRAM_ABS_POS hex {
      prompt "SRAM Hexadecimal Absolute position or 0" if [MTD && MTD_MTDRAM="y"]
      depends on [MTD_MTDRAM="y"]
      default [0] if [MTD && MTD_MTDRAM="y"]
      inherited [MTD && MTD_MTDRAM="y"]
     }
    }
    config MTD_BLOCK2MTD tristate {
     prompt "MTD using block device" if [MTD && BLOCK]
     depends on [BLOCK]
     inherited [MTD && BLOCK]
    }
    config MTD_DOC2000 tristate {
     prompt "M-Systems Disk-On-Chip 2000 and Millennium (DEPRECATED)" if [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOC2001 tristate {
     prompt "M-Systems Disk-On-Chip Millennium-only alternative driver (DEPRECATED)" if [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOC2001PLUS tristate {
     prompt "M-Systems Disk-On-Chip Millennium Plus" if [MTD]
     select MTD_DOCPROBE if [MTD]
     select MTD_NAND_IDS if [MTD]
     inherited [MTD]
    }
    config MTD_DOCPROBE tristate {
     select MTD_DOCECC if [MTD]
     inherited [MTD]
    }
    config MTD_DOCECC tristate {
     inherited [MTD]
    }
    config MTD_DOCPROBE_ADVANCED boolean {
     prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_DOCPROBE]
     depends on [MTD_DOCPROBE]
     inherited [MTD && MTD_DOCPROBE]
     config MTD_DOCPROBE_ADDRESS hex {
      prompt "Physical address of DiskOnChip" if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE]
      default [0x0000] if [MTD && MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED]
      default [0] if [MTD && MTD_DOCPROBE && !MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE]
     }
     config MTD_DOCPROBE_HIGH boolean {
      prompt "Probe high addresses" if [MTD && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE_ADVANCED]
     }
     config MTD_DOCPROBE_55AA boolean {
      prompt "Probe for 0x55 0xAA BIOS Extension Signature" if [MTD && MTD_DOCPROBE_ADVANCED]
      depends on [MTD_DOCPROBE_ADVANCED]
      inherited [MTD && MTD_DOCPROBE_ADVANCED]
     }
    }
   }
   menuconfig MTD_NAND tristate {
    prompt "NAND Device Support" if [MTD]
    depends on [MTD]
    select MTD_NAND_IDS if [MTD]
    inherited [MTD]
    if [MTD && MTD_NAND] {
     config MTD_NAND_VERIFY_WRITE boolean {
      prompt "Verify NAND page writes" if [MTD && MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_ECC_SMC boolean {
      prompt "NAND ECC Smart Media byte order" if [MTD && MTD_NAND]
      default [n] if [MTD && MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_MUSEUM_IDS boolean {
      prompt "Enable chip ids for obsolete ancient NAND devices" if [MTD && MTD_NAND]
      depends on [MTD_NAND]
      default [n] if [MTD && MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_AUTCPU12 tristate {
      prompt "SmartMediaCard on autronix autcpu12 board" if [MTD && MTD_NAND && ARCH_AUTCPU12]
      depends on [ARCH_AUTCPU12]
      inherited [MTD && MTD_NAND && ARCH_AUTCPU12]
     }
     config MTD_NAND_EDB7312 tristate {
      prompt "Support for Cirrus Logic EBD7312 evaluation board" if [MTD && MTD_NAND && ARCH_EDB7312]
      depends on [ARCH_EDB7312]
      inherited [MTD && MTD_NAND && ARCH_EDB7312]
     }
     config MTD_NAND_H1900 tristate {
      prompt "iPAQ H1900 flash" if [MTD && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
      depends on [ARCH_PXA && MTD_PARTITIONS]
      inherited [MTD && MTD_NAND && ARCH_PXA && MTD_PARTITIONS]
     }
     config MTD_NAND_SPIA tristate {
      prompt "NAND Flash device on SPIA board" if [MTD && MTD_NAND && ARCH_P720T]
      depends on [ARCH_P720T]
      inherited [MTD && MTD_NAND && ARCH_P720T]
     }
     config MTD_NAND_AMS_DELTA tristate {
      prompt "NAND Flash device on Amstrad E3" if [MTD && MTD_NAND && MACH_AMS_DELTA]
      depends on [MACH_AMS_DELTA]
      inherited [MTD && MTD_NAND && MACH_AMS_DELTA]
     }
     config MTD_NAND_TOTO tristate {
      prompt "NAND Flash device on TOTO board" if [MTD && MTD_NAND && ARCH_OMAP && BROKEN]
      depends on [ARCH_OMAP && BROKEN]
      inherited [MTD && MTD_NAND && ARCH_OMAP && BROKEN]
     }
     config MTD_NAND_TS7250 tristate {
      prompt "NAND Flash device on TS-7250 board" if [MTD && MTD_NAND && MACH_TS72XX]
      depends on [MACH_TS72XX]
      inherited [MTD && MTD_NAND && MACH_TS72XX]
     }
     config MTD_NAND_IDS tristate {
      inherited [MTD && MTD_NAND]
     }
     config MTD_NAND_AU1550 tristate {
      prompt "Au1550/1200 NAND support" if [MTD && MTD_NAND && (SOC_AU1200 || SOC_AU1550)]
      depends on [SOC_AU1200 || SOC_AU1550]
      inherited [MTD && MTD_NAND && (SOC_AU1200 || SOC_AU1550)]
     }
     config MTD_NAND_BF5XX tristate {
      prompt "Blackfin on-chip NAND Flash Controller driver" if [MTD && BF54x && MTD_NAND]
      depends on [BF54x && MTD_NAND]
      inherited [MTD && BF54x && MTD_NAND]
      config MTD_NAND_BF5XX_HWECC boolean {
       prompt "BF5XX NAND Hardware ECC" if [MTD && MTD_NAND && MTD_NAND_BF5XX]
       depends on [MTD_NAND_BF5XX]
       inherited [MTD && MTD_NAND && MTD_NAND_BF5XX]
      }
     }
     config MTD_NAND_RTC_FROM4 tristate {
      prompt "Renesas Flash ROM 4-slot interface board (FROM_BOARD4)" if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      depends on [SH_SOLUTION_ENGINE]
      select REED_SOLOMON if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      select REED_SOLOMON_DEC8 if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      select BITREVERSE if [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
      inherited [MTD && MTD_NAND && SH_SOLUTION_ENGINE]
     }
     config MTD_NAND_PPCHAMELEONEVB tristate {
      prompt "NAND Flash device on PPChameleonEVB board" if [MTD && MTD_NAND && PPCHAMELEONEVB && BROKEN]
      depends on [PPCHAMELEONEVB && BROKEN]
      inherited [MTD && MTD_NAND && PPCHAMELEONEVB && BROKEN]
     }
     config MTD_NAND_S3C2410 tristate {
      prompt "NAND Flash support for S3C2410/S3C2440 SoC" if [MTD && MTD_NAND && ARCH_S3C2410]
      depends on [ARCH_S3C2410]
      inherited [MTD && MTD_NAND && ARCH_S3C2410]
      config MTD_NAND_S3C2410_DEBUG boolean {
       prompt "S3C2410 NAND driver debug" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
       depends on [MTD_NAND_S3C2410]
       inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
      }
      config MTD_NAND_S3C2410_HWECC boolean {
       prompt "S3C2410 NAND Hardware ECC" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
       depends on [MTD_NAND_S3C2410]
       inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
      }
     }
     config MTD_NAND_NDFC tristate {
      prompt "NDFC NanD Flash Controller" if [MTD && MTD_NAND && 4xx && !PPC_MERGE]
      depends on [4xx && !PPC_MERGE]
      select MTD_NAND_ECC_SMC if [MTD && MTD_NAND && 4xx && !PPC_MERGE]
      inherited [MTD && MTD_NAND && 4xx && !PPC_MERGE]
     }
     config MTD_NAND_S3C2410_CLKSTOP boolean {
      prompt "S3C2410 NAND IDLE clock stop" if [MTD && MTD_NAND && MTD_NAND_S3C2410]
      depends on [MTD_NAND_S3C2410]
      default [n] if [MTD && MTD_NAND && MTD_NAND_S3C2410]
      inherited [MTD && MTD_NAND && MTD_NAND_S3C2410]
     }
     config MTD_NAND_DISKONCHIP tristate {
      prompt "DiskOnChip 2000, Millennium and Millennium Plus (NAND reimplementation) (EXPERIMENTAL)" if [MTD && MTD_NAND && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      select REED_SOLOMON if [MTD && MTD_NAND && EXPERIMENTAL]
      select REED_SOLOMON_DEC16 if [MTD && MTD_NAND && EXPERIMENTAL]
      inherited [MTD && MTD_NAND && EXPERIMENTAL]
      config MTD_NAND_DISKONCHIP_PROBE_ADVANCED boolean {
       prompt "Advanced detection options for DiskOnChip" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       depends on [MTD_NAND_DISKONCHIP]
       inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       config MTD_NAND_DISKONCHIP_PROBE_ADDRESS hex {
        prompt "Physical address of DiskOnChip" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
        depends on [MTD_NAND_DISKONCHIP]
        default [0] if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
        inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       }
       config MTD_NAND_DISKONCHIP_PROBE_HIGH boolean {
        prompt "Probe high addresses" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
        depends on [MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
        inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP_PROBE_ADVANCED]
       }
      }
      config MTD_NAND_DISKONCHIP_BBTWRITE boolean {
       prompt "Allow BBT writes on DiskOnChip Millennium and 2000TSOP" if [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
       depends on [MTD_NAND_DISKONCHIP]
       inherited [MTD && MTD_NAND && MTD_NAND_DISKONCHIP]
      }
     }
     config MTD_NAND_SHARPSL tristate {
      prompt "Support for NAND Flash on Sharp SL Series (C7xx + others)" if [MTD && MTD_NAND && ARCH_PXA]
      depends on [ARCH_PXA]
      inherited [MTD && MTD_NAND && ARCH_PXA]
     }
     config MTD_NAND_BASLER_EXCITE tristate {
      prompt "Support for NAND Flash on Basler eXcite" if [MTD && MTD_NAND && BASLER_EXCITE]
      depends on [BASLER_EXCITE]
      inherited [MTD && MTD_NAND && BASLER_EXCITE]
     }
     config MTD_NAND_CAFE tristate {
      prompt "NAND support for OLPC CAFÉ chip" if [MTD && MTD_NAND && PCI]
      depends on [PCI]
      select REED_SOLOMON if [MTD && MTD_NAND && PCI]
      select REED_SOLOMON_DEC16 if [MTD && MTD_NAND && PCI]
      inherited [MTD && MTD_NAND && PCI]
     }
     config MTD_NAND_CS553X tristate {
      prompt "NAND support for CS5535/CS5536 (AMD Geode companion chip)" if [MTD && MTD_NAND && X86_32 && (X86_PC || X86_GENERICARCH)]
      depends on [X86_32 && (X86_PC || X86_GENERICARCH)]
      inherited [MTD && MTD_NAND && X86_32 && (X86_PC || X86_GENERICARCH)]
     }
     config MTD_NAND_AT91 boolean {
      prompt "Support for NAND Flash / SmartMedia on AT91" if [MTD && MTD_NAND && ARCH_AT91]
      depends on [ARCH_AT91]
      inherited [MTD && MTD_NAND && ARCH_AT91]
     }
     config MTD_NAND_CM_X270 tristate {
      prompt "Support for NAND Flash on CM-X270 modules" if [MTD && MTD_NAND && MACH_ARMCORE]
      depends on [MTD_NAND && MACH_ARMCORE]
      inherited [MTD && MTD_NAND && MACH_ARMCORE]
     }
     config MTD_NAND_NANDSIM tristate {
      prompt "Support for NAND Flash Simulator" if [MTD && MTD_NAND && MTD_PARTITIONS]
      depends on [MTD_PARTITIONS]
      inherited [MTD && MTD_NAND && MTD_PARTITIONS]
     }
     config MTD_NAND_PLATFORM tristate {
      prompt "Support for generic platform NAND driver" if [MTD && MTD_NAND]
      depends on [MTD_NAND]
      inherited [MTD && MTD_NAND]
     }
     config MTD_ALAUDA tristate {
      prompt "MTD driver for Olympus MAUSB-10 and Fujifilm DPC-R1" if [MTD && MTD_NAND && USB]
      depends on [MTD_NAND && USB]
      inherited [MTD && MTD_NAND && USB]
     }
    }
   }
   menuconfig MTD_ONENAND tristate {
    prompt "OneNAND Device Support" if [MTD]
    depends on [MTD]
    inherited [MTD]
    if [MTD && MTD_ONENAND] {
     config MTD_ONENAND_VERIFY_WRITE boolean {
      prompt "Verify OneNAND page writes" if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_GENERIC tristate {
      prompt "OneNAND Flash device via platform device driver" if [MTD && MTD_ONENAND && ARM]
      depends on [ARM]
      inherited [MTD && MTD_ONENAND && ARM]
     }
     config MTD_ONENAND_OTP boolean {
      prompt "OneNAND OTP Support" if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_2X_PROGRAM boolean {
      prompt "OneNAND 2X program support" if [MTD && MTD_ONENAND]
      inherited [MTD && MTD_ONENAND]
     }
     config MTD_ONENAND_SIM tristate {
      prompt "OneNAND simulator support" if [MTD && MTD_ONENAND && MTD_PARTITIONS]
      depends on [MTD_PARTITIONS]
      inherited [MTD && MTD_ONENAND && MTD_PARTITIONS]
     }
    }
   }
   menu "UBI - Unsorted block images" {
    depends on [MTD]
    config MTD_UBI tristate {
     prompt "Enable UBI" if [MTD]
     depends on [MTD]
     select CRC32 if [MTD]
     inherited [MTD]
     config MTD_UBI_WL_THRESHOLD integer {
      prompt "UBI wear-leveling threshold" if [MTD && MTD_UBI]
      default [4096] if [MTD && MTD_UBI]
      range [2 65536] if [MTD && MTD_UBI]
      depends on [MTD_UBI]
      inherited [MTD && MTD_UBI]
     }
     config MTD_UBI_BEB_RESERVE integer {
      prompt "Percentage of reserved eraseblocks for bad eraseblocks handling" if [MTD && MTD_UBI]
      default [1] if [MTD && MTD_UBI]
      range [0 25] if [MTD && MTD_UBI]
      depends on [MTD_UBI]
      inherited [MTD && MTD_UBI]
     }
     config MTD_UBI_GLUEBI boolean {
      prompt "Emulate MTD devices" if [MTD && MTD_UBI]
      default [n] if [MTD && MTD_UBI]
      depends on [MTD_UBI]
      inherited [MTD && MTD_UBI]
     }
     config MTD_UBI_DEBUG boolean {
      prompt "UBI debugging" if [MTD && SYSFS && MTD_UBI]
      depends on [SYSFS]
      depends on [MTD_UBI]
      select DEBUG_FS if [MTD && SYSFS && MTD_UBI]
      select KALLSYMS_ALL if [MTD && SYSFS && MTD_UBI]
      inherited [MTD && SYSFS && MTD_UBI]
      config MTD_UBI_DEBUG_MSG boolean {
       prompt "UBI debugging messages" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_PARANOID boolean {
       prompt "Extra self-checks" if [MTD && MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_DISABLE_BGT boolean {
       prompt "Do not enable the UBI background thread" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_USERSPACE_IO boolean {
       prompt "Direct user-space write/erase support" if [MTD && MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_EMULATE_BITFLIPS boolean {
       prompt "Emulate flash bit-flips" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_EMULATE_WRITE_FAILURES boolean {
       prompt "Emulate flash write failures" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      config MTD_UBI_DEBUG_EMULATE_ERASE_FAILURES boolean {
       prompt "Emulate flash erase failures" if [MTD && MTD_UBI_DEBUG]
       depends on [MTD_UBI_DEBUG]
       default [n] if [MTD && MTD_UBI_DEBUG]
       inherited [MTD && MTD_UBI_DEBUG]
      }
      menu "Additional UBI debugging messages" {
       depends on [MTD && MTD_UBI_DEBUG]
       config MTD_UBI_DEBUG_MSG_BLD boolean {
        prompt "Additional UBI initialization and build messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
       config MTD_UBI_DEBUG_MSG_EBA boolean {
        prompt "Eraseblock association unit messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
       config MTD_UBI_DEBUG_MSG_WL boolean {
        prompt "Wear-leveling unit messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
       config MTD_UBI_DEBUG_MSG_IO boolean {
        prompt "Input/output unit messages" if [MTD && MTD_UBI_DEBUG]
        default [n] if [MTD && MTD_UBI_DEBUG]
        depends on [MTD_UBI_DEBUG]
        inherited [MTD && MTD_UBI_DEBUG]
       }
      }
     }
    }
   }
  }
 }
 config OF_DEVICE boolean {
  default [y] if [OF && (SPARC || PPC_OF)]
  depends on [OF && (SPARC || PPC_OF)]
  inherited [OF && (SPARC || PPC_OF)]
 }
 menuconfig PARPORT tristate {
  prompt "Parallel port support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [PARPORT] {
   config PARPORT_PC tristate {
    prompt "PC-style hardware" if [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA)]
    depends on [(!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA)]
    inherited [PARPORT && (!SPARC64 || PCI) && !SPARC32 && !M32R && !FRV && (!M68K || ISA)]
    config PARPORT_SERIAL tristate {
     prompt "Multi-IO cards (parallel and serial)" if [PARPORT && SERIAL_8250_PCI && PARPORT_PC && PCI]
     depends on [SERIAL_8250_PCI && PARPORT_PC && PCI]
     inherited [PARPORT && SERIAL_8250_PCI && PARPORT_PC && PCI]
    }
    config PARPORT_PC_FIFO boolean {
     prompt "Use FIFO/DMA if available (EXPERIMENTAL)" if [PARPORT && PARPORT_PC && EXPERIMENTAL]
     depends on [PARPORT_PC && EXPERIMENTAL]
     inherited [PARPORT && PARPORT_PC && EXPERIMENTAL]
    }
    config PARPORT_PC_SUPERIO boolean {
     prompt "SuperIO chipset support (EXPERIMENTAL)" if [PARPORT && PARPORT_PC && EXPERIMENTAL]
     depends on [PARPORT_PC && EXPERIMENTAL]
     inherited [PARPORT && PARPORT_PC && EXPERIMENTAL]
    }
    config PARPORT_PC_PCMCIA tristate {
     prompt "Support for PCMCIA management for PC-style ports" if [PARPORT && PCMCIA && PARPORT_PC]
     depends on [PCMCIA && PARPORT_PC]
     inherited [PARPORT && PCMCIA && PARPORT_PC]
    }
   }
   config PARPORT_IP32 tristate {
    prompt "SGI IP32 builtin port (EXPERIMENTAL)" if [PARPORT && SGI_IP32 && EXPERIMENTAL]
    depends on [SGI_IP32 && EXPERIMENTAL]
    select PARPORT_NOT_PC if [PARPORT && SGI_IP32 && EXPERIMENTAL]
    inherited [PARPORT && SGI_IP32 && EXPERIMENTAL]
   }
   config PARPORT_AMIGA tristate {
    prompt "Amiga builtin port" if [PARPORT && AMIGA]
    depends on [AMIGA]
    select PARPORT_NOT_PC if [PARPORT && AMIGA]
    inherited [PARPORT && AMIGA]
   }
   config PARPORT_MFC3 tristate {
    prompt "Multiface III parallel port" if [PARPORT && ZORRO]
    depends on [ZORRO]
    select PARPORT_NOT_PC if [PARPORT && ZORRO]
    inherited [PARPORT && ZORRO]
   }
   config PARPORT_ATARI tristate {
    prompt "Atari hardware" if [PARPORT && ATARI]
    depends on [ATARI]
    select PARPORT_NOT_PC if [PARPORT && ATARI]
    inherited [PARPORT && ATARI]
   }
   config PARPORT_GSC tristate {
    default [GSC] if [PARPORT]
    select PARPORT_NOT_PC if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_SUNBPP tristate {
    prompt "Sparc hardware (EXPERIMENTAL)" if [PARPORT && SBUS && EXPERIMENTAL]
    depends on [SBUS && EXPERIMENTAL]
    select PARPORT_NOT_PC if [PARPORT && SBUS && EXPERIMENTAL]
    inherited [PARPORT && SBUS && EXPERIMENTAL]
   }
   config PARPORT_AX88796 tristate {
    prompt "AX88796 Parallel Port" if [PARPORT]
    select PARPORT_NOT_PC if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_1284 boolean {
    prompt "IEEE 1284 transfer modes" if [PARPORT]
    inherited [PARPORT]
   }
   config PARPORT_NOT_PC boolean {
    inherited [PARPORT]
   }
  }
 }
 menuconfig PNP boolean {
  prompt "Plug and Play support" if [HAS_IOMEM && (ISA || ACPI)]
  depends on [HAS_IOMEM]
  depends on [ISA || ACPI]
  inherited [HAS_IOMEM && (ISA || ACPI)]
  if [PNP] {
   config PNP_DEBUG boolean {
    prompt "PnP Debug Messages" if [PNP]
    inherited [PNP]
   }
   config ISAPNP boolean {
    prompt "ISA Plug and Play support" if [PNP && ISA]
    depends on [ISA]
    inherited [PNP && ISA]
   }
   config PNPBIOS boolean {
    prompt "Plug and Play BIOS support (EXPERIMENTAL)" if [PNP && ISA && X86 && EXPERIMENTAL]
    depends on [ISA && X86 && EXPERIMENTAL]
    default [n] if [PNP && ISA && X86 && EXPERIMENTAL]
    inherited [PNP && ISA && X86 && EXPERIMENTAL]
    config PNPBIOS_PROC_FS boolean {
     prompt "Plug and Play BIOS /proc interface" if [PNP && PNPBIOS && PROC_FS]
     depends on [PNPBIOS && PROC_FS]
     inherited [PNP && PNPBIOS && PROC_FS]
    }
   }
   config PNPACPI boolean {
    default [PNP && ACPI] if [PNP]
    inherited [PNP]
   }
  }
 }
 menuconfig BLK_DEV boolean {
  prompt "Block devices" if [BLOCK]
  depends on [BLOCK]
  default [y] if [BLOCK]
  inherited [BLOCK]
  if [BLK_DEV] {
   config BLK_DEV_FD tristate {
    prompt "Normal floppy disk support" if [BLK_DEV && ARCH_MAY_HAVE_PC_FDC]
    depends on [ARCH_MAY_HAVE_PC_FDC]
    inherited [BLK_DEV && ARCH_MAY_HAVE_PC_FDC]
   }
   config AMIGA_FLOPPY tristate {
    prompt "Amiga floppy support" if [BLK_DEV && AMIGA]
    depends on [AMIGA]
    inherited [BLK_DEV && AMIGA]
   }
   config ATARI_FLOPPY tristate {
    prompt "Atari floppy support" if [BLK_DEV && ATARI]
    depends on [ATARI]
    inherited [BLK_DEV && ATARI]
   }
   config MAC_FLOPPY tristate {
    prompt "Support for PowerMac floppy" if [BLK_DEV && PPC_PMAC && !PPC_PMAC64]
    depends on [PPC_PMAC && !PPC_PMAC64]
    inherited [BLK_DEV && PPC_PMAC && !PPC_PMAC64]
   }
   config BLK_DEV_PS2 tristate {
    prompt "PS/2 ESDI hard disk support" if [BLK_DEV && MCA && MCA_LEGACY && BROKEN]
    depends on [MCA && MCA_LEGACY && BROKEN]
    inherited [BLK_DEV && MCA && MCA_LEGACY && BROKEN]
   }
   config AMIGA_Z2RAM tristate {
    prompt "Amiga Zorro II ramdisk support" if [BLK_DEV && ZORRO]
    depends on [ZORRO]
    inherited [BLK_DEV && ZORRO]
   }
   config BLK_DEV_XD tristate {
    prompt "XT hard disk support" if [BLK_DEV && ISA && ISA_DMA_API]
    depends on [ISA && ISA_DMA_API]
    select CHECK_SIGNATURE if [BLK_DEV && ISA && ISA_DMA_API]
    inherited [BLK_DEV && ISA && ISA_DMA_API]
   }
   config PARIDE tristate {
    prompt "Parallel port IDE device support" if [BLK_DEV && PARPORT_PC]
    depends on [PARPORT_PC]
    inherited [BLK_DEV && PARPORT_PC]
    config PARIDE_PD tristate {
     prompt "Parallel port IDE disks" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_PCD tristate {
     prompt "Parallel port ATAPI CD-ROMs" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_PF tristate {
     prompt "Parallel port ATAPI disks" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_PT tristate {
     prompt "Parallel port ATAPI tapes" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_PG tristate {
     prompt "Parallel port generic ATAPI devices" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_ATEN tristate {
     prompt "ATEN EH-100 protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_BPCK tristate {
     prompt "MicroSolutions backpack (Series 5) protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_BPCK6 tristate {
     prompt "MicroSolutions backpack (Series 6) protocol" if [BLK_DEV && PARIDE && !64BIT]
     depends on [PARIDE && !64BIT]
     inherited [BLK_DEV && PARIDE && !64BIT]
    }
    config PARIDE_COMM tristate {
     prompt "DataStor Commuter protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_DSTR tristate {
     prompt "DataStor EP-2000 protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_FIT2 tristate {
     prompt "FIT TD-2000 protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_FIT3 tristate {
     prompt "FIT TD-3000 protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_EPAT tristate {
     prompt "Shuttle EPAT/EPEZ protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
     config PARIDE_EPATC8 boolean {
      prompt "Support c7/c8 chips (EXPERIMENTAL)" if [BLK_DEV && PARIDE_EPAT && EXPERIMENTAL]
      depends on [PARIDE_EPAT && EXPERIMENTAL]
      inherited [BLK_DEV && PARIDE_EPAT && EXPERIMENTAL]
     }
    }
    config PARIDE_EPIA tristate {
     prompt "Shuttle EPIA protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_FRIQ tristate {
     prompt "Freecom IQ ASIC-2 protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_FRPW tristate {
     prompt "FreeCom power protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_KBIC tristate {
     prompt "KingByte KBIC-951A/971A protocols" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_KTTI tristate {
     prompt "KT PHd protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_ON20 tristate {
     prompt "OnSpec 90c20 protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
    config PARIDE_ON26 tristate {
     prompt "OnSpec 90c26 protocol" if [BLK_DEV && PARIDE]
     depends on [PARIDE]
     inherited [BLK_DEV && PARIDE]
    }
   }
   config BLK_CPQ_DA tristate {
    prompt "Compaq SMART2 support" if [BLK_DEV && PCI && VIRT_TO_BUS]
    depends on [PCI && VIRT_TO_BUS]
    inherited [BLK_DEV && PCI && VIRT_TO_BUS]
   }
   config BLK_CPQ_CISS_DA tristate {
    prompt "Compaq Smart Array 5xxx support" if [BLK_DEV && PCI]
    depends on [PCI]
    inherited [BLK_DEV && PCI]
    config CISS_SCSI_TAPE boolean {
     prompt "SCSI tape drive support for Smart Array 5xxx" if [BLK_DEV && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
     depends on [BLK_CPQ_CISS_DA && PROC_FS]
     depends on [SCSI="y" || SCSI="BLK_CPQ_CISS_DA"]
     inherited [BLK_DEV && BLK_CPQ_CISS_DA && PROC_FS && (SCSI="y" || SCSI="BLK_CPQ_CISS_DA")]
    }
   }
   config BLK_DEV_DAC960 tristate {
    prompt "Mylex DAC960/DAC1100 PCI RAID Controller support" if [BLK_DEV && PCI]
    depends on [PCI]
    inherited [BLK_DEV && PCI]
   }
   config BLK_DEV_UMEM tristate {
    prompt "Micro Memory MM5415 Battery Backed RAM support (EXPERIMENTAL)" if [BLK_DEV && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [BLK_DEV && PCI && EXPERIMENTAL]
   }
   config BLK_DEV_UBD boolean {
    prompt "Virtual block device" if [BLK_DEV && UML]
    depends on [UML]
    inherited [BLK_DEV && UML]
    config BLK_DEV_UBD_SYNC boolean {
     prompt "Always do synchronous disk IO for UBD" if [BLK_DEV && BLK_DEV_UBD]
     depends on [BLK_DEV_UBD]
     inherited [BLK_DEV && BLK_DEV_UBD]
    }
   }
   config BLK_DEV_COW_COMMON boolean {
    default [BLK_DEV_UBD] if [BLK_DEV]
    inherited [BLK_DEV]
   }
   config BLK_DEV_LOOP tristate {
    prompt "Loopback device support" if [BLK_DEV]
    inherited [BLK_DEV]
    config BLK_DEV_CRYPTOLOOP tristate {
     prompt "Cryptoloop Support" if [BLK_DEV && BLK_DEV_LOOP]
     select CRYPTO if [BLK_DEV && BLK_DEV_LOOP]
     select CRYPTO_CBC if [BLK_DEV && BLK_DEV_LOOP]
     depends on [BLK_DEV_LOOP]
     inherited [BLK_DEV && BLK_DEV_LOOP]
    }
   }
   config BLK_DEV_NBD tristate {
    prompt "Network block device support" if [BLK_DEV && NET]
    depends on [NET]
    inherited [BLK_DEV && NET]
   }
   config BLK_DEV_SX8 tristate {
    prompt "Promise SATA SX8 support" if [BLK_DEV && PCI]
    depends on [PCI]
    inherited [BLK_DEV && PCI]
   }
   config BLK_DEV_UB tristate {
    prompt "Low Performance USB Block driver" if [BLK_DEV && USB]
    depends on [USB]
    inherited [BLK_DEV && USB]
   }
   config BLK_DEV_RAM tristate {
    prompt "RAM disk support" if [BLK_DEV]
    inherited [BLK_DEV]
    config BLK_DEV_RAM_COUNT integer {
     prompt "Default number of RAM disks" if [BLK_DEV && BLK_DEV_RAM]
     default [16] if [BLK_DEV && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     inherited [BLK_DEV && BLK_DEV_RAM]
    }
    config BLK_DEV_RAM_SIZE integer {
     prompt "Default RAM disk size (kbytes)" if [BLK_DEV && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     default [4096] if [BLK_DEV && BLK_DEV_RAM]
     inherited [BLK_DEV && BLK_DEV_RAM]
    }
    config BLK_DEV_RAM_BLOCKSIZE integer {
     prompt "Default RAM disk block size (bytes)" if [BLK_DEV && BLK_DEV_RAM]
     depends on [BLK_DEV_RAM]
     default [1024] if [BLK_DEV && BLK_DEV_RAM]
     inherited [BLK_DEV && BLK_DEV_RAM]
    }
   }
   config CDROM_PKTCDVD tristate {
    prompt "Packet writing on CD/DVD media" if [BLK_DEV && !UML]
    depends on [!UML]
    inherited [BLK_DEV && !UML]
    config CDROM_PKTCDVD_BUFFERS integer {
     prompt "Free buffers for data gathering" if [BLK_DEV && CDROM_PKTCDVD]
     depends on [CDROM_PKTCDVD]
     default [8] if [BLK_DEV && CDROM_PKTCDVD]
     inherited [BLK_DEV && CDROM_PKTCDVD]
    }
    config CDROM_PKTCDVD_WCACHE boolean {
     prompt "Enable write caching (EXPERIMENTAL)" if [BLK_DEV && CDROM_PKTCDVD && EXPERIMENTAL]
     depends on [CDROM_PKTCDVD && EXPERIMENTAL]
     inherited [BLK_DEV && CDROM_PKTCDVD && EXPERIMENTAL]
    }
   }
   config ATA_OVER_ETH tristate {
    prompt "ATA over Ethernet support" if [BLK_DEV && NET]
    depends on [NET]
    inherited [BLK_DEV && NET]
   }
   config SUNVDC tristate {
    prompt "Sun Virtual Disk Client support" if [BLK_DEV && SUN_LDOMS]
    depends on [SUN_LDOMS]
    inherited [BLK_DEV && SUN_LDOMS]
   }
   config BLK_DEV_XPRAM tristate {
    prompt "XPRAM disk support" if [BLK_DEV && S390 && BLOCK]
    depends on [S390 && BLOCK]
    inherited [BLK_DEV && S390 && BLOCK]
   }
   config DCSSBLK tristate {
    prompt "DCSSBLK support" if [BLK_DEV && S390 && BLOCK]
    depends on [S390 && BLOCK]
    inherited [BLK_DEV && S390 && BLOCK]
   }
   config DASD tristate {
    prompt "Support for DASD devices" if [BLK_DEV && CCW && BLOCK]
    depends on [CCW && BLOCK]
    inherited [BLK_DEV && CCW && BLOCK]
    config DASD_PROFILE boolean {
     prompt "Profiling support for dasd devices" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_ECKD tristate {
     prompt "Support for ECKD Disks" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_FBA tristate {
     prompt "Support for FBA  Disks" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_DIAG tristate {
     prompt "Support for DIAG access to Disks" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
    config DASD_EER boolean {
     prompt "Extended error reporting (EER)" if [BLK_DEV && DASD]
     depends on [DASD]
     inherited [BLK_DEV && DASD]
    }
   }
   config XILINX_SYSACE tristate {
    prompt "Xilinx SystemACE support" if [BLK_DEV && 4xx]
    depends on [4xx]
    inherited [BLK_DEV && 4xx]
   }
   config XEN_BLKDEV_FRONTEND tristate {
    prompt "Xen virtual block device support" if [BLK_DEV && XEN]
    depends on [XEN]
    default [y] if [BLK_DEV && XEN]
    inherited [BLK_DEV && XEN]
   }
   config VIRTIO_BLK tristate {
    prompt "Virtio block driver (EXPERIMENTAL)" if [BLK_DEV && EXPERIMENTAL && VIRTIO]
    depends on [EXPERIMENTAL && VIRTIO]
    inherited [BLK_DEV && EXPERIMENTAL && VIRTIO]
   }
  }
 }
 menuconfig MISC_DEVICES boolean {
  prompt "Misc devices" if []
  default [y] if []
  if [MISC_DEVICES] {
   config IBM_ASM tristate {
    prompt "Device driver for IBM RSA service processor" if [MISC_DEVICES && X86 && PCI && INPUT && EXPERIMENTAL]
    depends on [X86 && PCI && INPUT && EXPERIMENTAL]
    inherited [MISC_DEVICES && X86 && PCI && INPUT && EXPERIMENTAL]
   }
   config PHANTOM tristate {
    prompt "Sensable PHANToM" if [MISC_DEVICES && PCI]
    depends on [PCI]
    inherited [MISC_DEVICES && PCI]
   }
   config EEPROM_93CX6 tristate {
    prompt "EEPROM 93CX6 support" if [MISC_DEVICES]
    inherited [MISC_DEVICES]
   }
   config SGI_IOC4 tristate {
    prompt "SGI IOC4 Base IO support" if [MISC_DEVICES && PCI]
    depends on [PCI]
    inherited [MISC_DEVICES && PCI]
   }
   config TIFM_CORE tristate {
    prompt "TI Flash Media interface support (EXPERIMENTAL)" if [MISC_DEVICES && EXPERIMENTAL && PCI]
    depends on [EXPERIMENTAL && PCI]
    inherited [MISC_DEVICES && EXPERIMENTAL && PCI]
    config TIFM_7XX1 tristate {
     prompt "TI Flash Media PCI74xx/PCI76xx host adapter support (EXPERIMENTAL)" if [MISC_DEVICES && PCI && TIFM_CORE && EXPERIMENTAL]
     depends on [PCI && TIFM_CORE && EXPERIMENTAL]
     default [TIFM_CORE] if [MISC_DEVICES && PCI && TIFM_CORE && EXPERIMENTAL]
     inherited [MISC_DEVICES && PCI && TIFM_CORE && EXPERIMENTAL]
    }
   }
   config ASUS_LAPTOP tristate {
    prompt "Asus Laptop Extras (EXPERIMENTAL)" if [MISC_DEVICES && X86 && ACPI && EXPERIMENTAL && !ACPI_ASUS && LEDS_CLASS && BACKLIGHT_CLASS_DEVICE]
    depends on [X86]
    depends on [ACPI]
    depends on [EXPERIMENTAL && !ACPI_ASUS]
    depends on [LEDS_CLASS]
    depends on [BACKLIGHT_CLASS_DEVICE]
    inherited [MISC_DEVICES && X86 && ACPI && EXPERIMENTAL && !ACPI_ASUS && LEDS_CLASS && BACKLIGHT_CLASS_DEVICE]
   }
   config FUJITSU_LAPTOP tristate {
    prompt "Fujitsu Laptop Extras" if [MISC_DEVICES && X86 && ACPI && BACKLIGHT_CLASS_DEVICE]
    depends on [X86]
    depends on [ACPI]
    depends on [BACKLIGHT_CLASS_DEVICE]
    inherited [MISC_DEVICES && X86 && ACPI && BACKLIGHT_CLASS_DEVICE]
   }
   config MSI_LAPTOP tristate {
    prompt "MSI Laptop Extras" if [MISC_DEVICES && X86 && ACPI_EC && BACKLIGHT_CLASS_DEVICE]
    depends on [X86]
    depends on [ACPI_EC]
    depends on [BACKLIGHT_CLASS_DEVICE]
    inherited [MISC_DEVICES && X86 && ACPI_EC && BACKLIGHT_CLASS_DEVICE]
   }
   config SONY_LAPTOP tristate {
    prompt "Sony Laptop Extras" if [MISC_DEVICES && X86 && ACPI && INPUT]
    depends on [X86 && ACPI]
    select BACKLIGHT_CLASS_DEVICE if [MISC_DEVICES && X86 && ACPI && INPUT]
    depends on [INPUT]
    inherited [MISC_DEVICES && X86 && ACPI && INPUT]
    config SONYPI_COMPAT boolean {
     prompt "Sonypi compatibility" if [MISC_DEVICES && SONY_LAPTOP]
     depends on [SONY_LAPTOP]
     inherited [MISC_DEVICES && SONY_LAPTOP]
    }
   }
   config THINKPAD_ACPI tristate {
    prompt "ThinkPad ACPI Laptop Extras" if [MISC_DEVICES && X86 && ACPI && INPUT]
    depends on [X86 && ACPI]
    select BACKLIGHT_CLASS_DEVICE if [MISC_DEVICES && X86 && ACPI && INPUT]
    select HWMON if [MISC_DEVICES && X86 && ACPI && INPUT]
    select NVRAM if [MISC_DEVICES && X86 && ACPI && INPUT]
    depends on [INPUT]
    inherited [MISC_DEVICES && X86 && ACPI && INPUT]
    config THINKPAD_ACPI_DEBUG boolean {
     prompt "Verbose debug mode" if [MISC_DEVICES && THINKPAD_ACPI]
     depends on [THINKPAD_ACPI]
     default [n] if [MISC_DEVICES && THINKPAD_ACPI]
     inherited [MISC_DEVICES && THINKPAD_ACPI]
    }
    config THINKPAD_ACPI_DOCK boolean {
     prompt "Legacy Docking Station Support" if [MISC_DEVICES && THINKPAD_ACPI && ACPI_DOCK="n"]
     depends on [THINKPAD_ACPI]
     depends on [ACPI_DOCK="n"]
     default [n] if [MISC_DEVICES && THINKPAD_ACPI && ACPI_DOCK="n"]
     inherited [MISC_DEVICES && THINKPAD_ACPI && ACPI_DOCK="n"]
    }
    config THINKPAD_ACPI_BAY boolean {
     prompt "Legacy Removable Bay Support" if [MISC_DEVICES && THINKPAD_ACPI]
     depends on [THINKPAD_ACPI]
     default [y] if [MISC_DEVICES && THINKPAD_ACPI]
     inherited [MISC_DEVICES && THINKPAD_ACPI]
    }
   }
   config ATMEL_SSC tristate {
    prompt "Device driver for Atmel SSC peripheral" if [MISC_DEVICES && (AVR32 || ARCH_AT91)]
    depends on [AVR32 || ARCH_AT91]
    inherited [MISC_DEVICES && (AVR32 || ARCH_AT91)]
   }
  }
 }
 menuconfig IDE tristate {
  prompt "ATA/ATAPI/MFM/RLL support" if [BLOCK && HAS_IOMEM]
  depends on [BLOCK]
  depends on [HAS_IOMEM]
  inherited [BLOCK && HAS_IOMEM]
  if [IDE] {
   config IDE_MAX_HWIFS integer {
    prompt "Max IDE interfaces" if [IDE && (ALPHA || SUPERH || IA64 || EMBEDDED)]
    depends on [ALPHA || SUPERH || IA64 || EMBEDDED]
    range [1 10] if [IDE && (ALPHA || SUPERH || IA64 || EMBEDDED)]
    default [4] if [IDE && (ALPHA || SUPERH || IA64 || EMBEDDED)]
    inherited [IDE && (ALPHA || SUPERH || IA64 || EMBEDDED)]
   }
   config BLK_DEV_IDE tristate {
    prompt "Enhanced IDE/MFM/RLL disk/cdrom/tape/floppy support" if [IDE]
    inherited [IDE]
    if [IDE && BLK_DEV_IDE] {
     config BLK_DEV_IDE_SATA boolean {
      prompt "Support for SATA (deprecated; conflicts with libata SATA driver)" if [IDE && BLK_DEV_IDE]
      default [n] if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config BLK_DEV_HD_IDE boolean {
      prompt "Use old disk-only driver on primary interface" if [IDE && BLK_DEV_IDE && (X86 || SH_MPC1211)]
      depends on [X86 || SH_MPC1211]
      inherited [IDE && BLK_DEV_IDE && (X86 || SH_MPC1211)]
     }
     config BLK_DEV_IDEDISK tristate {
      prompt "Include IDE/ATA-2 DISK support" if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config IDEDISK_MULTI_MODE boolean {
      prompt "Use multiple sector mode for Programmed Input/Output by default" if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config BLK_DEV_IDECS tristate {
      prompt "PCMCIA IDE support" if [IDE && BLK_DEV_IDE && PCMCIA]
      depends on [PCMCIA]
      inherited [IDE && BLK_DEV_IDE && PCMCIA]
     }
     config BLK_DEV_DELKIN tristate {
      prompt "Cardbus IDE support (Delkin/ASKA/Workbit)" if [IDE && BLK_DEV_IDE && CARDBUS && PCI]
      depends on [CARDBUS && PCI]
      inherited [IDE && BLK_DEV_IDE && CARDBUS && PCI]
     }
     config BLK_DEV_IDECD tristate {
      prompt "Include IDE/ATAPI CDROM support" if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config BLK_DEV_IDETAPE tristate {
      prompt "Include IDE/ATAPI TAPE support (EXPERIMENTAL)" if [IDE && BLK_DEV_IDE && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      inherited [IDE && BLK_DEV_IDE && EXPERIMENTAL]
     }
     config BLK_DEV_IDEFLOPPY tristate {
      prompt "Include IDE/ATAPI FLOPPY support" if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config BLK_DEV_IDESCSI tristate {
      prompt "SCSI emulation support" if [IDE && BLK_DEV_IDE && SCSI]
      depends on [SCSI]
      inherited [IDE && BLK_DEV_IDE && SCSI]
     }
     config BLK_DEV_IDEACPI boolean {
      prompt "IDE ACPI support" if [IDE && BLK_DEV_IDE && ACPI]
      depends on [ACPI]
      inherited [IDE && BLK_DEV_IDE && ACPI]
     }
     config IDE_TASK_IOCTL boolean {
      prompt "IDE Taskfile Access" if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config IDE_PROC_FS boolean {
      prompt "legacy /proc/ide/ support" if [BLK_DEV_IDE && IDE && PROC_FS]
      depends on [IDE && PROC_FS]
      default [y] if [BLK_DEV_IDE && IDE && PROC_FS]
      inherited [BLK_DEV_IDE && IDE && PROC_FS]
     }
     config IDE_GENERIC tristate {
      prompt "generic/default IDE chipset support" if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config BLK_DEV_PLATFORM tristate {
      prompt "Platform driver for IDE interfaces" if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config BLK_DEV_CMD640 boolean {
      prompt "CMD640 chipset bugfix/support" if [IDE && BLK_DEV_IDE && X86]
      depends on [X86]
      inherited [IDE && BLK_DEV_IDE && X86]
      config BLK_DEV_CMD640_ENHANCED boolean {
       prompt "CMD640 enhanced support" if [IDE && BLK_DEV_IDE && BLK_DEV_CMD640]
       depends on [BLK_DEV_CMD640]
       inherited [IDE && BLK_DEV_IDE && BLK_DEV_CMD640]
      }
     }
     config BLK_DEV_IDEPNP boolean {
      prompt "PNP EIDE support" if [IDE && BLK_DEV_IDE && PNP]
      depends on [PNP]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && PNP]
      inherited [IDE && BLK_DEV_IDE && PNP]
     }
     if [IDE && BLK_DEV_IDE && PCI] {
      config BLK_DEV_IDEPCI boolean {
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config IDEPCI_SHARE_IRQ boolean {
       prompt "Sharing PCI IDE interrupts support" if [IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
       depends on [BLK_DEV_IDEPCI]
       inherited [IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI]
      }
      config IDEPCI_PCIBUS_ORDER boolean {
       default [BLK_DEV_IDE="y" && BLK_DEV_IDEPCI] if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_OFFBOARD boolean {
       prompt "Boot off-board chipsets first support (DEPRECATED)" if [IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT34X || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
       depends on [BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT34X || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
       inherited [IDE && BLK_DEV_IDE && PCI && BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || BLK_DEV_GENERIC || BLK_DEV_HPT34X || BLK_DEV_HPT366 || BLK_DEV_PDC202XX_NEW || BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)]
      }
      config BLK_DEV_GENERIC tristate {
       prompt "Generic PCI IDE Chipset Support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEPCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_OPTI621 tristate {
       prompt "OPTi 82C621 chipset enhanced support (EXPERIMENTAL)" if [IDE && BLK_DEV_IDE && PCI && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       select BLK_DEV_IDEPCI if [IDE && BLK_DEV_IDE && PCI && EXPERIMENTAL]
       inherited [IDE && BLK_DEV_IDE && PCI && EXPERIMENTAL]
      }
      config BLK_DEV_RZ1000 tristate {
       prompt "RZ1000 chipset bugfix/support" if [IDE && BLK_DEV_IDE && PCI && X86]
       depends on [X86]
       select BLK_DEV_IDEPCI if [IDE && BLK_DEV_IDE && PCI && X86]
       inherited [IDE && BLK_DEV_IDE && PCI && X86]
      }
      config BLK_DEV_IDEDMA_PCI boolean {
       select BLK_DEV_IDEPCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_AEC62XX tristate {
       prompt "AEC62XX chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_ALI15X3 tristate {
       prompt "ALI M15x3 chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
       config WDC_ALI15X3 boolean {
        prompt "ALI M15x3 WDC support (DANGEROUS)" if [IDE && BLK_DEV_IDE && PCI && BLK_DEV_ALI15X3]
        depends on [BLK_DEV_ALI15X3]
        inherited [IDE && BLK_DEV_IDE && PCI && BLK_DEV_ALI15X3]
       }
      }
      config BLK_DEV_AMD74XX tristate {
       prompt "AMD and nVidia IDE support" if [IDE && BLK_DEV_IDE && PCI && !ARM]
       depends on [!ARM]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && !ARM]
       inherited [IDE && BLK_DEV_IDE && PCI && !ARM]
      }
      config BLK_DEV_ATIIXP tristate {
       prompt "ATI IXP chipset IDE support" if [IDE && BLK_DEV_IDE && PCI && X86]
       depends on [X86]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && X86]
       inherited [IDE && BLK_DEV_IDE && PCI && X86]
      }
      config BLK_DEV_CMD64X tristate {
       prompt "CMD64{3|6|8|9} chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_TRIFLEX tristate {
       prompt "Compaq Triflex IDE support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_CY82C693 tristate {
       prompt "CY82C693 chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_CS5520 tristate {
       prompt "Cyrix CS5510/20 MediaGX chipset support (VERY EXPERIMENTAL)" if [IDE && BLK_DEV_IDE && PCI && EXPERIMENTAL]
       depends on [EXPERIMENTAL]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && EXPERIMENTAL]
       inherited [IDE && BLK_DEV_IDE && PCI && EXPERIMENTAL]
      }
      config BLK_DEV_CS5530 tristate {
       prompt "Cyrix/National Semiconductor CS5530 MediaGX chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_CS5535 tristate {
       prompt "AMD CS5535 chipset support" if [IDE && BLK_DEV_IDE && PCI && X86 && !X86_64]
       depends on [X86 && !X86_64]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && X86 && !X86_64]
       inherited [IDE && BLK_DEV_IDE && PCI && X86 && !X86_64]
      }
      config BLK_DEV_HPT34X tristate {
       prompt "HPT34X chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
       config HPT34X_AUTODMA boolean {
        prompt "HPT34X AUTODMA support (EXPERIMENTAL)" if [IDE && BLK_DEV_IDE && PCI && BLK_DEV_HPT34X && EXPERIMENTAL]
        depends on [BLK_DEV_HPT34X && EXPERIMENTAL]
        inherited [IDE && BLK_DEV_IDE && PCI && BLK_DEV_HPT34X && EXPERIMENTAL]
       }
      }
      config BLK_DEV_HPT366 tristate {
       prompt "HPT36X/37X chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_JMICRON tristate {
       prompt "JMicron JMB36x support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_SC1200 tristate {
       prompt "National SCx200 chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_PIIX tristate {
       prompt "Intel PIIXn chipsets support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_IT8213 tristate {
       prompt "IT8213 IDE support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_IT821X tristate {
       prompt "IT821X IDE support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_NS87415 tristate {
       prompt "NS87415 chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_PDC202XX_OLD tristate {
       prompt "PROMISE PDC202{46|62|65|67} support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
       config PDC202XX_BURST boolean {
        prompt "Special UDMA Feature" if [IDE && BLK_DEV_IDE && PCI && BLK_DEV_PDC202XX_OLD]
        depends on [BLK_DEV_PDC202XX_OLD]
        inherited [IDE && BLK_DEV_IDE && PCI && BLK_DEV_PDC202XX_OLD]
       }
      }
      config BLK_DEV_PDC202XX_NEW tristate {
       prompt "PROMISE PDC202{68|69|70|71|75|76|77} support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_SVWKS tristate {
       prompt "ServerWorks OSB4/CSB5/CSB6 chipsets support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_SGIIOC4 tristate {
       prompt "Silicon Graphics IOC4 chipset ATA/ATAPI support" if [IDE && BLK_DEV_IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
       depends on [(IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
       select IDEPCI_SHARE_IRQ if [IDE && BLK_DEV_IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
       inherited [IDE && BLK_DEV_IDE && PCI && (IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4]
      }
      config BLK_DEV_SIIMAGE tristate {
       prompt "Silicon Image chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_SIS5513 tristate {
       prompt "SiS5513 chipset support" if [IDE && BLK_DEV_IDE && PCI && X86]
       depends on [X86]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && X86]
       inherited [IDE && BLK_DEV_IDE && PCI && X86]
      }
      config BLK_DEV_SL82C105 tristate {
       prompt "Winbond SL82c105 support" if [IDE && BLK_DEV_IDE && PCI && (PPC || ARM)]
       depends on [PPC || ARM]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && (PPC || ARM)]
       inherited [IDE && BLK_DEV_IDE && PCI && (PPC || ARM)]
      }
      config BLK_DEV_SLC90E66 tristate {
       prompt "SLC90E66 chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_TRM290 tristate {
       prompt "Tekram TRM290 chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_VIA82CXXX tristate {
       prompt "VIA82CXXX chipset support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_TC86C001 tristate {
       prompt "Toshiba TC86C001 support" if [IDE && BLK_DEV_IDE && PCI]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI]
       inherited [IDE && BLK_DEV_IDE && PCI]
      }
      config BLK_DEV_CELLEB tristate {
       prompt "Toshiba's Cell Reference Set IDE support" if [IDE && BLK_DEV_IDE && PCI && PPC_CELLEB]
       depends on [PPC_CELLEB]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && PCI && PPC_CELLEB]
       inherited [IDE && BLK_DEV_IDE && PCI && PPC_CELLEB]
      }
     }
     config BLK_DEV_IDE_PMAC boolean {
      prompt "Builtin PowerMac IDE support" if [PPC_PMAC && IDE="y" && BLK_DEV_IDE="y"]
      depends on [PPC_PMAC && IDE="y" && BLK_DEV_IDE="y"]
      inherited [PPC_PMAC && IDE="y" && BLK_DEV_IDE="y"]
      config BLK_DEV_IDE_PMAC_ATA100FIRST boolean {
       prompt "Probe internal ATA/100 (Kauai) first" if [IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
       depends on [BLK_DEV_IDE_PMAC]
       inherited [IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
      }
      config BLK_DEV_IDEDMA_PMAC boolean {
       prompt "PowerMac IDE DMA support" if [IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
       depends on [BLK_DEV_IDE_PMAC]
       select BLK_DEV_IDEDMA_PCI if [IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
       inherited [IDE && BLK_DEV_IDE && BLK_DEV_IDE_PMAC]
      }
     }
     config BLK_DEV_IDE_SWARM tristate {
      prompt "IDE for Sibyte evaluation boards" if [IDE && BLK_DEV_IDE && SIBYTE_SB1xxx_SOC]
      depends on [SIBYTE_SB1xxx_SOC]
      inherited [IDE && BLK_DEV_IDE && SIBYTE_SB1xxx_SOC]
     }
     config BLK_DEV_IDE_AU1XXX boolean {
      prompt "IDE for AMD Alchemy Au1200" if [IDE && BLK_DEV_IDE && SOC_AU1200]
      depends on [SOC_AU1200]
      inherited [IDE && BLK_DEV_IDE && SOC_AU1200]
      choice boolean {
       prompt "IDE Mode for AMD Alchemy Au1200" if [IDE && BLK_DEV_IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
       default [CONFIG_BLK_DEV_IDE_AU1XXX_PIO_DBDMA] if [IDE && BLK_DEV_IDE && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
       depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
       config BLK_DEV_IDE_AU1XXX_PIO_DBDMA boolean {
        prompt "PIO+DbDMA IDE for AMD Alchemy Au1200" if [<choice>]
        inherited [<choice>]
       }
       config BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA boolean {
        prompt "MDMA2+DbDMA IDE for AMD Alchemy Au1200" if [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
        depends on [SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
        inherited [<choice> && SOC_AU1200 && BLK_DEV_IDE_AU1XXX]
       }
      }
      config BLK_DEV_IDE_AU1XXX_SEQTS_PER_RQ integer {
       prompt "Maximum transfer size (KB) per request (up to 128)" if [IDE && BLK_DEV_IDE && BLK_DEV_IDE_AU1XXX]
       default [128] if [IDE && BLK_DEV_IDE && BLK_DEV_IDE_AU1XXX]
       depends on [BLK_DEV_IDE_AU1XXX]
       inherited [IDE && BLK_DEV_IDE && BLK_DEV_IDE_AU1XXX]
      }
     }
     config IDE_ARM boolean {
      default [ARM && (ARCH_CLPS7500 || ARCH_RPC || ARCH_SHARK)] if [IDE && BLK_DEV_IDE]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config BLK_DEV_IDE_ICSIDE tristate {
      prompt "ICS IDE interface support" if [IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      inherited [IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
      config BLK_DEV_IDEDMA_ICS boolean {
       prompt "ICS DMA support" if [IDE && BLK_DEV_IDE && BLK_DEV_IDE_ICSIDE]
       depends on [BLK_DEV_IDE_ICSIDE]
       inherited [IDE && BLK_DEV_IDE && BLK_DEV_IDE_ICSIDE]
      }
     }
     config BLK_DEV_IDE_RAPIDE tristate {
      prompt "RapIDE interface support" if [IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      inherited [IDE && BLK_DEV_IDE && ARM && ARCH_ACORN]
     }
     config BLK_DEV_IDE_BAST tristate {
      prompt "Simtec BAST / Thorcom VR1000 IDE support" if [IDE && BLK_DEV_IDE && ARM && (ARCH_BAST || MACH_VR1000)]
      depends on [ARM && (ARCH_BAST || MACH_VR1000)]
      inherited [IDE && BLK_DEV_IDE && ARM && (ARCH_BAST || MACH_VR1000)]
     }
     config ETRAX_IDE boolean {
      prompt "ETRAX IDE support" if [IDE && BLK_DEV_IDE && CRIS && BROKEN]
      depends on [CRIS && BROKEN]
      select BLK_DEV_IDEDMA if [IDE && BLK_DEV_IDE && CRIS && BROKEN]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && CRIS && BROKEN]
      inherited [IDE && BLK_DEV_IDE && CRIS && BROKEN]
      config ETRAX_IDE_DELAY integer {
       prompt "Delay for drives to regain consciousness" if [IDE && BLK_DEV_IDE && ETRAX_IDE && ETRAX_ARCH_V10]
       depends on [ETRAX_IDE && ETRAX_ARCH_V10]
       default [15] if [IDE && BLK_DEV_IDE && ETRAX_IDE && ETRAX_ARCH_V10]
       inherited [IDE && BLK_DEV_IDE && ETRAX_IDE && ETRAX_ARCH_V10]
      }
      choice boolean {
       prompt "IDE reset pin" if [IDE && BLK_DEV_IDE && ETRAX_IDE && ETRAX_ARCH_V10]
       depends on [ETRAX_IDE && ETRAX_ARCH_V10]
       default [ETRAX_IDE_PB7_RESET] if [IDE && BLK_DEV_IDE && ETRAX_IDE && ETRAX_ARCH_V10]
       config ETRAX_IDE_PB7_RESET boolean {
        prompt "Port_PB_Bit_7" if [<choice>]
        inherited [<choice>]
       }
       config ETRAX_IDE_G27_RESET boolean {
        prompt "Port_G_Bit_27" if [<choice>]
        inherited [<choice>]
       }
      }
     }
     config IDE_H8300 boolean {
      prompt "H8300 IDE support" if [IDE && BLK_DEV_IDE && H8300]
      depends on [H8300]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && H8300]
      default [y] if [IDE && BLK_DEV_IDE && H8300]
      inherited [IDE && BLK_DEV_IDE && H8300]
     }
     config BLK_DEV_GAYLE boolean {
      prompt "Amiga Gayle IDE interface support" if [IDE && BLK_DEV_IDE && AMIGA]
      depends on [AMIGA]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && AMIGA]
      inherited [IDE && BLK_DEV_IDE && AMIGA]
      config BLK_DEV_IDEDOUBLER boolean {
       prompt "Amiga IDE Doubler support (EXPERIMENTAL)" if [IDE && BLK_DEV_IDE && BLK_DEV_GAYLE && EXPERIMENTAL]
       depends on [BLK_DEV_GAYLE && EXPERIMENTAL]
       inherited [IDE && BLK_DEV_IDE && BLK_DEV_GAYLE && EXPERIMENTAL]
      }
     }
     config BLK_DEV_BUDDHA boolean {
      prompt "Buddha/Catweasel/X-Surf IDE interface support (EXPERIMENTAL)" if [IDE && BLK_DEV_IDE && ZORRO && EXPERIMENTAL]
      depends on [ZORRO && EXPERIMENTAL]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && ZORRO && EXPERIMENTAL]
      inherited [IDE && BLK_DEV_IDE && ZORRO && EXPERIMENTAL]
     }
     config BLK_DEV_FALCON_IDE boolean {
      prompt "Falcon IDE interface support" if [IDE && BLK_DEV_IDE && ATARI]
      depends on [ATARI]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && ATARI]
      inherited [IDE && BLK_DEV_IDE && ATARI]
     }
     config BLK_DEV_MAC_IDE boolean {
      prompt "Macintosh Quadra/Powerbook IDE interface support" if [IDE && BLK_DEV_IDE && MAC]
      depends on [MAC]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && MAC]
      inherited [IDE && BLK_DEV_IDE && MAC]
     }
     config BLK_DEV_Q40IDE boolean {
      prompt "Q40/Q60 IDE interface support" if [IDE && BLK_DEV_IDE && Q40]
      depends on [Q40]
      select IDE_GENERIC if [IDE && BLK_DEV_IDE && Q40]
      inherited [IDE && BLK_DEV_IDE && Q40]
     }
     config BLK_DEV_MPC8xx_IDE boolean {
      prompt "MPC8xx IDE support" if [8xx && (LWMON || IVMS8 || IVML24 || TQM8xxL) && IDE="y" && BLK_DEV_IDE="y" && !PPC_MERGE]
      depends on [8xx && (LWMON || IVMS8 || IVML24 || TQM8xxL) && IDE="y" && BLK_DEV_IDE="y" && !PPC_MERGE]
      select IDE_GENERIC if [8xx && (LWMON || IVMS8 || IVML24 || TQM8xxL) && IDE="y" && BLK_DEV_IDE="y" && !PPC_MERGE]
      inherited [8xx && (LWMON || IVMS8 || IVML24 || TQM8xxL) && IDE="y" && BLK_DEV_IDE="y" && !PPC_MERGE]
      choice boolean {
       prompt "Type of MPC8xx IDE interface" if [IDE && BLK_DEV_IDE && BLK_DEV_MPC8xx_IDE]
       depends on [BLK_DEV_MPC8xx_IDE]
       default [IDE_8xx_PCCARD] if [IDE && BLK_DEV_IDE && BLK_DEV_MPC8xx_IDE]
       config IDE_8xx_PCCARD boolean {
        prompt "8xx_PCCARD" if [<choice>]
        inherited [<choice>]
       }
       config IDE_8xx_DIRECT boolean {
        prompt "8xx_DIRECT" if [<choice>]
        inherited [<choice>]
       }
       config IDE_EXT_DIRECT boolean {
        prompt "EXT_DIRECT" if [<choice>]
        inherited [<choice>]
       }
      }
     }
     if [IDE && BLK_DEV_IDE && ISA] {
      config BLK_DEV_4DRIVES boolean {
       prompt "Generic 4 drives/port support" if [IDE && BLK_DEV_IDE && ISA]
       inherited [IDE && BLK_DEV_IDE && ISA]
      }
      config BLK_DEV_ALI14XX tristate {
       prompt "ALI M14xx support" if [IDE && BLK_DEV_IDE && ISA]
       inherited [IDE && BLK_DEV_IDE && ISA]
      }
      config BLK_DEV_DTC2278 tristate {
       prompt "DTC-2278 support" if [IDE && BLK_DEV_IDE && ISA]
       inherited [IDE && BLK_DEV_IDE && ISA]
      }
      config BLK_DEV_HT6560B tristate {
       prompt "Holtek HT6560B support" if [IDE && BLK_DEV_IDE && ISA]
       inherited [IDE && BLK_DEV_IDE && ISA]
      }
      config BLK_DEV_QD65XX tristate {
       prompt "QDI QD65xx support" if [IDE && BLK_DEV_IDE && ISA]
       inherited [IDE && BLK_DEV_IDE && ISA]
      }
      config BLK_DEV_UMC8672 tristate {
       prompt "UMC-8672 support" if [IDE && BLK_DEV_IDE && ISA]
       inherited [IDE && BLK_DEV_IDE && ISA]
      }
     }
     config BLK_DEV_IDEDMA boolean {
      default [BLK_DEV_IDEDMA_PCI || BLK_DEV_IDEDMA_PMAC || BLK_DEV_IDEDMA_ICS || BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA] if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
     config IDE_ARCH_OBSOLETE_INIT boolean {
      default [ALPHA || ARM && !ARCH_L7200 || BLACKFIN || X86 || IA64 || M32R || MIPS || PARISC || PPC || SUPERH64 && BLK_DEV_IDEPCI || SPARC] if [IDE && BLK_DEV_IDE]
      inherited [IDE && BLK_DEV_IDE]
     }
    }
    config BLK_DEV_HD_ONLY boolean {
     prompt "Old hard disk (MFM/RLL/IDE) driver" if [IDE && BLK_DEV_IDE="n"]
     depends on [BLK_DEV_IDE="n"]
     inherited [IDE && BLK_DEV_IDE="n"]
    }
   }
   config BLK_DEV_HD boolean {
    default [BLK_DEV_HD_IDE || BLK_DEV_HD_ONLY] if [IDE]
    inherited [IDE]
   }
  }
 }
 menu "SCSI device support" {
  config RAID_ATTRS tristate {
   prompt "RAID Transport Class" if [BLOCK]
   default [n] if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config SCSI tristate {
   prompt "SCSI device support" if [BLOCK]
   depends on [BLOCK]
   select SCSI_DMA if [BLOCK && HAS_DMA]
   inherited [BLOCK]
  }
  config SCSI_DMA boolean {
   default [n] if []
  }
  config SCSI_TGT tristate {
   prompt "SCSI target support" if [SCSI && EXPERIMENTAL]
   depends on [SCSI && EXPERIMENTAL]
   inherited [SCSI && EXPERIMENTAL]
  }
  config SCSI_NETLINK boolean {
   default [n] if []
   select NET if []
  }
  config SCSI_PROC_FS boolean {
   prompt "legacy /proc/scsi/ support" if [SCSI && PROC_FS]
   depends on [SCSI && PROC_FS]
   default [y] if [SCSI && PROC_FS]
   inherited [SCSI && PROC_FS]
  }
  config BLK_DEV_SD tristate {
   prompt "SCSI disk support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_ST tristate {
   prompt "SCSI tape support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_OSST tristate {
   prompt "SCSI OnStream SC-x0 tape support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config BLK_DEV_SR tristate {
   prompt "SCSI CDROM support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
   config BLK_DEV_SR_VENDOR boolean {
    prompt "Enable vendor-specific extensions (for SCSI CDROM)" if [BLK_DEV_SR]
    depends on [BLK_DEV_SR]
    inherited [BLK_DEV_SR]
   }
  }
  config CHR_DEV_SG tristate {
   prompt "SCSI generic support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config CHR_DEV_SCH tristate {
   prompt "SCSI media changer support" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_MULTI_LUN boolean {
   prompt "Probe all LUNs on each SCSI device" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_CONSTANTS boolean {
   prompt "Verbose SCSI error reporting (kernel size +=12K)" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_LOGGING boolean {
   prompt "SCSI logging facility" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_SCAN_ASYNC boolean {
   prompt "Asynchronous SCSI scanning" if [SCSI]
   depends on [SCSI]
   inherited [SCSI]
  }
  config SCSI_WAIT_SCAN tristate {
   default [m] if [SCSI && MODULES]
   depends on [SCSI]
   depends on [MODULES]
   inherited [SCSI && MODULES]
  }
  menu "SCSI Transports" {
   depends on [SCSI]
   config SCSI_SPI_ATTRS tristate {
    prompt "Parallel SCSI (SPI) Transport Attributes" if [SCSI]
    depends on [SCSI]
    inherited [SCSI]
   }
   config SCSI_FC_ATTRS tristate {
    prompt "FiberChannel Transport Attributes" if [SCSI]
    depends on [SCSI]
    select SCSI_NETLINK if [SCSI]
    inherited [SCSI]
    config SCSI_FC_TGT_ATTRS boolean {
     prompt "SCSI target support for FiberChannel Transport Attributes" if [SCSI && SCSI_FC_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_FC_ATTRS")]
     depends on [SCSI_FC_ATTRS]
     depends on [SCSI_TGT="y" || SCSI_TGT="SCSI_FC_ATTRS"]
     inherited [SCSI && SCSI_FC_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_FC_ATTRS")]
    }
   }
   config SCSI_ISCSI_ATTRS tristate {
    prompt "iSCSI Transport Attributes" if [SCSI && NET]
    depends on [SCSI && NET]
    inherited [SCSI && NET]
   }
   config SCSI_SAS_ATTRS tristate {
    prompt "SAS Transport Attributes" if [SCSI && BLK_DEV_BSG]
    depends on [SCSI && BLK_DEV_BSG]
    inherited [SCSI && BLK_DEV_BSG]
   }
   config SCSI_SAS_LIBSAS tristate {
    prompt "SAS Domain Transport Attributes" if [SCSI]
    depends on [SCSI]
    select SCSI_SAS_ATTRS if [SCSI]
    inherited [SCSI]
    config SCSI_SAS_ATA boolean {
     prompt "ATA support for libsas (requires libata)" if [SCSI && SCSI_SAS_LIBSAS && (ATA="y" || ATA="SCSI_SAS_LIBSAS")]
     depends on [SCSI_SAS_LIBSAS]
     depends on [ATA="y" || ATA="SCSI_SAS_LIBSAS"]
     inherited [SCSI && SCSI_SAS_LIBSAS && (ATA="y" || ATA="SCSI_SAS_LIBSAS")]
    }
    config SCSI_SAS_LIBSAS_DEBUG boolean {
     prompt "Compile the SAS Domain Transport Attributes in debug mode" if [SCSI && SCSI_SAS_LIBSAS]
     default [y] if [SCSI && SCSI_SAS_LIBSAS]
     depends on [SCSI_SAS_LIBSAS]
     inherited [SCSI && SCSI_SAS_LIBSAS]
    }
   }
   config SCSI_SRP_ATTRS tristate {
    prompt "SRP Transport Attributes" if [SCSI]
    depends on [SCSI]
    inherited [SCSI]
    config SCSI_SRP_TGT_ATTRS boolean {
     prompt "SCSI target support for SRP Transport Attributes" if [SCSI && SCSI_SRP_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_SRP_ATTRS")]
     depends on [SCSI_SRP_ATTRS]
     depends on [SCSI_TGT="y" || SCSI_TGT="SCSI_SRP_ATTRS"]
     inherited [SCSI && SCSI_SRP_ATTRS && (SCSI_TGT="y" || SCSI_TGT="SCSI_SRP_ATTRS")]
    }
   }
  }
  menuconfig SCSI_LOWLEVEL boolean {
   prompt "SCSI low-level drivers" if [SCSI]
   depends on [SCSI]
   default [y] if [SCSI]
   inherited [SCSI]
   if [SCSI_LOWLEVEL] {
    config ISCSI_TCP tristate {
     prompt "iSCSI Initiator over TCP/IP" if [SCSI_LOWLEVEL && SCSI && INET]
     depends on [SCSI && INET]
     select CRYPTO if [SCSI_LOWLEVEL && SCSI && INET]
     select CRYPTO_MD5 if [SCSI_LOWLEVEL && SCSI && INET]
     select CRYPTO_CRC32C if [SCSI_LOWLEVEL && SCSI && INET]
     select SCSI_ISCSI_ATTRS if [SCSI_LOWLEVEL && SCSI && INET]
     inherited [SCSI_LOWLEVEL && SCSI && INET]
    }
    config SGIWD93_SCSI tristate {
     prompt "SGI WD93C93 SCSI Driver" if [SCSI_LOWLEVEL && SGI_IP22 && SCSI]
     depends on [SGI_IP22 && SCSI]
     inherited [SCSI_LOWLEVEL && SGI_IP22 && SCSI]
    }
    config SCSI_DECNCR tristate {
     prompt "DEC NCR53C94 Scsi Driver" if [SCSI_LOWLEVEL && MACH_DECSTATION && SCSI && TC]
     depends on [MACH_DECSTATION && SCSI && TC]
     inherited [SCSI_LOWLEVEL && MACH_DECSTATION && SCSI && TC]
    }
    config SCSI_DECSII tristate {
     prompt "DEC SII Scsi Driver" if [SCSI_LOWLEVEL && MACH_DECSTATION && SCSI && 32BIT]
     depends on [MACH_DECSTATION && SCSI && 32BIT]
     inherited [SCSI_LOWLEVEL && MACH_DECSTATION && SCSI && 32BIT]
    }
    config BLK_DEV_3W_XXXX_RAID tristate {
     prompt "3ware 5/6/7/8xxx ATA-RAID support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_3W_9XXX tristate {
     prompt "3ware 9xxx SATA-RAID support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_7000FASST tristate {
     prompt "7000FASST SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     depends on [ISA && SCSI && ISA_DMA_API]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
    }
    config SCSI_ACARD tristate {
     prompt "ACARD SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_AHA152X tristate {
     prompt "Adaptec AHA152X/2825 support" if [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
     depends on [ISA && SCSI && !64BIT]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && !64BIT]
    }
    config SCSI_AHA1542 tristate {
     prompt "Adaptec AHA1542 support" if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     depends on [ISA && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
    }
    config SCSI_AHA1740 tristate {
     prompt "Adaptec AHA1740 support" if [SCSI_LOWLEVEL && EISA && SCSI]
     depends on [EISA && SCSI]
     inherited [SCSI_LOWLEVEL && EISA && SCSI]
    }
    config SCSI_AACRAID tristate {
     prompt "Adaptec AACRAID support" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
    config SCSI_AIC7XXX tristate {
     prompt "Adaptec AIC7xxx Fast -> U160 support (New Driver)" if [SCSI_LOWLEVEL && (PCI || EISA) && SCSI]
     depends on [(PCI || EISA) && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && (PCI || EISA) && SCSI]
     inherited [SCSI_LOWLEVEL && (PCI || EISA) && SCSI]
     config AIC7XXX_CMDS_PER_DEVICE integer {
      prompt "Maximum number of TCQ commands per device" if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [32] if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC7XXX]
     }
     config AIC7XXX_RESET_DELAY_MS integer {
      prompt "Initial bus reset delay in milli-seconds" if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [5000] if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC7XXX]
     }
     config AIC7XXX_BUILD_FIRMWARE boolean {
      prompt "Build Adapter Firmware with Kernel Build" if [SCSI_LOWLEVEL && SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
      depends on [SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
      inherited [SCSI_LOWLEVEL && SCSI_AIC7XXX && !PREVENT_FIRMWARE_BUILD]
     }
     config AIC7XXX_DEBUG_ENABLE boolean {
      prompt "Compile in Debugging Code" if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [y] if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC7XXX]
     }
     config AIC7XXX_DEBUG_MASK integer {
      prompt "Debug code enable mask (2047 for all debugging)" if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [0] if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC7XXX]
     }
     config AIC7XXX_REG_PRETTY_PRINT boolean {
      prompt "Decode registers during diagnostics" if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      depends on [SCSI_AIC7XXX]
      default [y] if [SCSI_LOWLEVEL && SCSI_AIC7XXX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC7XXX]
     }
    }
    config SCSI_AIC7XXX_OLD tristate {
     prompt "Adaptec AIC7xxx support (old driver)" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI]
     depends on [(ISA || EISA || PCI) && SCSI]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI]
    }
    config SCSI_AIC79XX tristate {
     prompt "Adaptec AIC79xx U320 support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config AIC79XX_CMDS_PER_DEVICE integer {
      prompt "Maximum number of TCQ commands per device" if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [32] if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC79XX]
     }
     config AIC79XX_RESET_DELAY_MS integer {
      prompt "Initial bus reset delay in milli-seconds" if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [5000] if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC79XX]
     }
     config AIC79XX_BUILD_FIRMWARE boolean {
      prompt "Build Adapter Firmware with Kernel Build" if [SCSI_LOWLEVEL && SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
      depends on [SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
      inherited [SCSI_LOWLEVEL && SCSI_AIC79XX && !PREVENT_FIRMWARE_BUILD]
     }
     config AIC79XX_DEBUG_ENABLE boolean {
      prompt "Compile in Debugging Code" if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [y] if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC79XX]
     }
     config AIC79XX_DEBUG_MASK integer {
      prompt "Debug code enable mask (16383 for all debugging)" if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [0] if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC79XX]
     }
     config AIC79XX_REG_PRETTY_PRINT boolean {
      prompt "Decode registers during diagnostics" if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      depends on [SCSI_AIC79XX]
      default [y] if [SCSI_LOWLEVEL && SCSI_AIC79XX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC79XX]
     }
    }
    config SCSI_AIC94XX tristate {
     prompt "Adaptec AIC94xx SAS/SATA support" if [SCSI_LOWLEVEL && PCI]
     depends on [PCI]
     select SCSI_SAS_LIBSAS if [SCSI_LOWLEVEL && PCI]
     select FW_LOADER if [SCSI_LOWLEVEL && PCI]
     inherited [SCSI_LOWLEVEL && PCI]
     config AIC94XX_DEBUG boolean {
      prompt "Compile in debug mode" if [SCSI_LOWLEVEL && SCSI_AIC94XX]
      default [y] if [SCSI_LOWLEVEL && SCSI_AIC94XX]
      depends on [SCSI_AIC94XX]
      inherited [SCSI_LOWLEVEL && SCSI_AIC94XX]
     }
    }
    config SCSI_DPT_I2O tristate {
     prompt "Adaptec I2O RAID support " if [SCSI_LOWLEVEL && !64BIT && SCSI && PCI && VIRT_TO_BUS]
     depends on [!64BIT && SCSI && PCI && VIRT_TO_BUS]
     inherited [SCSI_LOWLEVEL && !64BIT && SCSI && PCI && VIRT_TO_BUS]
    }
    config SCSI_ADVANSYS tristate {
     prompt "AdvanSys SCSI support" if [SCSI_LOWLEVEL && SCSI && VIRT_TO_BUS && (ISA || EISA || PCI)]
     depends on [SCSI && VIRT_TO_BUS]
     depends on [ISA || EISA || PCI]
     inherited [SCSI_LOWLEVEL && SCSI && VIRT_TO_BUS && (ISA || EISA || PCI)]
    }
    config SCSI_IN2000 tristate {
     prompt "Always IN2000 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_ARCMSR tristate {
     prompt "ARECA (ARC11xx/12xx/13xx/16xx) SATA/SAS RAID Host Adapter" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config SCSI_ARCMSR_AER boolean {
      prompt "Enable PCI Error Recovery Capability in Areca Driver(ARCMSR)" if [SCSI_LOWLEVEL && SCSI_ARCMSR && PCIEAER]
      depends on [SCSI_ARCMSR && PCIEAER]
      default [n] if [SCSI_LOWLEVEL && SCSI_ARCMSR && PCIEAER]
      inherited [SCSI_LOWLEVEL && SCSI_ARCMSR && PCIEAER]
     }
    }
    config MEGARAID_NEWGEN boolean {
     prompt "LSI Logic New Generation RAID Device Drivers" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config MEGARAID_MM tristate {
      prompt "LSI Logic Management Module (New Driver)" if [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_NEWGEN]
      depends on [PCI && SCSI && MEGARAID_NEWGEN]
      inherited [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_NEWGEN]
      config MEGARAID_MAILBOX tristate {
       prompt "LSI Logic MegaRAID Driver (New Driver)" if [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_MM]
       depends on [PCI && SCSI && MEGARAID_MM]
       inherited [SCSI_LOWLEVEL && PCI && SCSI && MEGARAID_MM]
      }
     }
    }
    config MEGARAID_LEGACY tristate {
     prompt "LSI Logic Legacy MegaRAID Driver" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config MEGARAID_SAS tristate {
     prompt "LSI Logic MegaRAID SAS RAID Module" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_HPTIOP tristate {
     prompt "HighPoint RocketRAID 3xxx Controller support" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
    config SCSI_BUSLOGIC tristate {
     prompt "BusLogic SCSI support" if [SCSI_LOWLEVEL && (PCI || ISA || MCA) && SCSI && ISA_DMA_API && VIRT_TO_BUS]
     depends on [(PCI || ISA || MCA) && SCSI && ISA_DMA_API && VIRT_TO_BUS]
     inherited [SCSI_LOWLEVEL && (PCI || ISA || MCA) && SCSI && ISA_DMA_API && VIRT_TO_BUS]
     config SCSI_OMIT_FLASHPOINT boolean {
      prompt "Omit FlashPoint support" if [SCSI_LOWLEVEL && SCSI_BUSLOGIC]
      depends on [SCSI_BUSLOGIC]
      inherited [SCSI_LOWLEVEL && SCSI_BUSLOGIC]
     }
    }
    config SCSI_DMX3191D tristate {
     prompt "DMX3191D SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_DTC3280 tristate {
     prompt "DTC3180/3280 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_EATA tristate {
     prompt "EATA ISA/EISA/PCI (DPT and generic EATA/DMA-compliant boards) support" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     depends on [(ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API]
     config SCSI_EATA_TAGGED_QUEUE boolean {
      prompt "enable tagged command queueing" if [SCSI_LOWLEVEL && SCSI_EATA]
      depends on [SCSI_EATA]
      inherited [SCSI_LOWLEVEL && SCSI_EATA]
     }
     config SCSI_EATA_LINKED_COMMANDS boolean {
      prompt "enable elevator sorting" if [SCSI_LOWLEVEL && SCSI_EATA]
      depends on [SCSI_EATA]
      inherited [SCSI_LOWLEVEL && SCSI_EATA]
     }
     config SCSI_EATA_MAX_TAGS integer {
      prompt "maximum number of queued commands" if [SCSI_LOWLEVEL && SCSI_EATA]
      depends on [SCSI_EATA]
      default [16] if [SCSI_LOWLEVEL && SCSI_EATA]
      inherited [SCSI_LOWLEVEL && SCSI_EATA]
     }
    }
    config SCSI_EATA_PIO tristate {
     prompt "EATA-PIO (old DPT PM2001, PM2012A) support" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && BROKEN]
     depends on [(ISA || EISA || PCI) && SCSI && BROKEN]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && BROKEN]
    }
    config SCSI_FUTURE_DOMAIN tristate {
     prompt "Future Domain 16xx SCSI/AHA-2920A support" if [SCSI_LOWLEVEL && (ISA || PCI) && SCSI]
     depends on [(ISA || PCI) && SCSI]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && (ISA || PCI) && SCSI]
     inherited [SCSI_LOWLEVEL && (ISA || PCI) && SCSI]
    }
    config SCSI_FD_MCS tristate {
     prompt "Future Domain MCS-600/700 SCSI support" if [SCSI_LOWLEVEL && MCA_LEGACY && SCSI]
     depends on [MCA_LEGACY && SCSI]
     inherited [SCSI_LOWLEVEL && MCA_LEGACY && SCSI]
    }
    config SCSI_GDTH tristate {
     prompt "Intel/ICP (former GDT SCSI Disk Array) RAID Controller support" if [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API && PCI_LEGACY]
     depends on [(ISA || EISA || PCI) && SCSI && ISA_DMA_API && PCI_LEGACY]
     inherited [SCSI_LOWLEVEL && (ISA || EISA || PCI) && SCSI && ISA_DMA_API && PCI_LEGACY]
    }
    config SCSI_GENERIC_NCR5380 tristate {
     prompt "Generic NCR5380/53c400 SCSI PIO support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_GENERIC_NCR5380_MMIO tristate {
     prompt "Generic NCR5380/53c400 SCSI MMIO support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_GENERIC_NCR53C400 boolean {
     prompt "Enable NCR53c400 extensions" if [SCSI_LOWLEVEL && SCSI_GENERIC_NCR5380]
     depends on [SCSI_GENERIC_NCR5380]
     inherited [SCSI_LOWLEVEL && SCSI_GENERIC_NCR5380]
    }
    config SCSI_IBMMCA tristate {
     prompt "IBMMCA SCSI support" if [SCSI_LOWLEVEL && MCA && SCSI]
     depends on [MCA && SCSI]
     inherited [SCSI_LOWLEVEL && MCA && SCSI]
     config IBMMCA_SCSI_ORDER_STANDARD boolean {
      prompt "Standard SCSI-order" if [SCSI_LOWLEVEL && SCSI_IBMMCA]
      depends on [SCSI_IBMMCA]
      inherited [SCSI_LOWLEVEL && SCSI_IBMMCA]
     }
     config IBMMCA_SCSI_DEV_RESET boolean {
      prompt "Reset SCSI-devices at boottime" if [SCSI_LOWLEVEL && SCSI_IBMMCA]
      depends on [SCSI_IBMMCA]
      inherited [SCSI_LOWLEVEL && SCSI_IBMMCA]
     }
    }
    config SCSI_IPS tristate {
     prompt "IBM ServeRAID support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_IBMVSCSI tristate {
     prompt "IBM Virtual SCSI support" if [SCSI_LOWLEVEL && (PPC_PSERIES || PPC_ISERIES)]
     depends on [PPC_PSERIES || PPC_ISERIES]
     select SCSI_SRP_ATTRS if [SCSI_LOWLEVEL && (PPC_PSERIES || PPC_ISERIES)]
     inherited [SCSI_LOWLEVEL && (PPC_PSERIES || PPC_ISERIES)]
    }
    config SCSI_IBMVSCSIS tristate {
     prompt "IBM Virtual SCSI Server support" if [SCSI_LOWLEVEL && PPC_PSERIES && SCSI_SRP && SCSI_SRP_TGT_ATTRS]
     depends on [PPC_PSERIES && SCSI_SRP && SCSI_SRP_TGT_ATTRS]
     inherited [SCSI_LOWLEVEL && PPC_PSERIES && SCSI_SRP && SCSI_SRP_TGT_ATTRS]
    }
    config SCSI_INITIO tristate {
     prompt "Initio 9100U(W) support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_INIA100 tristate {
     prompt "Initio INI-A100U2W support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_PPA tristate {
     prompt "IOMEGA parallel port (ppa - older drives)" if [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
     depends on [SCSI && PARPORT_PC]
     inherited [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
    }
    config SCSI_IMM tristate {
     prompt "IOMEGA parallel port (imm - newer drives)" if [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
     depends on [SCSI && PARPORT_PC]
     inherited [SCSI_LOWLEVEL && SCSI && PARPORT_PC]
    }
    config SCSI_IZIP_EPP16 boolean {
     prompt "ppa/imm option - Use slow (but safe) EPP-16" if [SCSI_LOWLEVEL && (SCSI_PPA || SCSI_IMM)]
     depends on [SCSI_PPA || SCSI_IMM]
     inherited [SCSI_LOWLEVEL && (SCSI_PPA || SCSI_IMM)]
    }
    config SCSI_IZIP_SLOW_CTR boolean {
     prompt "ppa/imm option - Assume slow parport control register" if [SCSI_LOWLEVEL && (SCSI_PPA || SCSI_IMM)]
     depends on [SCSI_PPA || SCSI_IMM]
     inherited [SCSI_LOWLEVEL && (SCSI_PPA || SCSI_IMM)]
    }
    config SCSI_NCR53C406A tristate {
     prompt "NCR53c406a SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_NCR_D700 tristate {
     prompt "NCR Dual 700 MCA SCSI support" if [SCSI_LOWLEVEL && MCA && SCSI]
     depends on [MCA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MCA && SCSI]
     inherited [SCSI_LOWLEVEL && MCA && SCSI]
    }
    config SCSI_LASI700 tristate {
     prompt "HP Lasi SCSI support for 53c700/710" if [SCSI_LOWLEVEL && GSC && SCSI]
     depends on [GSC && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && GSC && SCSI]
     inherited [SCSI_LOWLEVEL && GSC && SCSI]
    }
    config SCSI_SNI_53C710 tristate {
     prompt "SNI RM SCSI support for 53c710" if [SCSI_LOWLEVEL && SNI_RM && SCSI]
     depends on [SNI_RM && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && SNI_RM && SCSI]
     select 53C700_LE_ON_BE if [SCSI_LOWLEVEL && SNI_RM && SCSI]
     inherited [SCSI_LOWLEVEL && SNI_RM && SCSI]
    }
    config 53C700_LE_ON_BE boolean {
     depends on [SCSI_LASI700]
     default [y] if [SCSI_LOWLEVEL && SCSI_LASI700]
     inherited [SCSI_LOWLEVEL && SCSI_LASI700]
    }
    config SCSI_STEX tristate {
     prompt "Promise SuperTrak EX Series support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config 53C700_BE_BUS boolean {
     depends on [SCSI_A4000T || SCSI_ZORRO7XX || MVME16x_SCSI || BVME6000_SCSI]
     default [y] if [SCSI_LOWLEVEL && (SCSI_A4000T || SCSI_ZORRO7XX || MVME16x_SCSI || BVME6000_SCSI)]
     inherited [SCSI_LOWLEVEL && (SCSI_A4000T || SCSI_ZORRO7XX || MVME16x_SCSI || BVME6000_SCSI)]
    }
    config SCSI_SYM53C8XX_2 tristate {
     prompt "SYM53C8XX Version 2 SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
     config SCSI_SYM53C8XX_DMA_ADDRESSING_MODE integer {
      prompt "DMA addressing mode" if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [1] if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
     }
     config SCSI_SYM53C8XX_DEFAULT_TAGS integer {
      prompt "Default tagged command queue depth" if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [16] if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
     }
     config SCSI_SYM53C8XX_MAX_TAGS integer {
      prompt "Maximum number of queued commands" if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [64] if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
     }
     config SCSI_SYM53C8XX_MMIO boolean {
      prompt "Use memory mapped IO" if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      depends on [SCSI_SYM53C8XX_2]
      default [y] if [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
      inherited [SCSI_LOWLEVEL && SCSI_SYM53C8XX_2]
     }
    }
    config SCSI_IPR tristate {
     prompt "IBM Power Linux RAID adapter support" if [SCSI_LOWLEVEL && PCI && SCSI && ATA]
     depends on [PCI && SCSI && ATA]
     select FW_LOADER if [SCSI_LOWLEVEL && PCI && SCSI && ATA]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && ATA]
     config SCSI_IPR_TRACE boolean {
      prompt "enable driver internal trace" if [SCSI_LOWLEVEL && SCSI_IPR]
      depends on [SCSI_IPR]
      default [y] if [SCSI_LOWLEVEL && SCSI_IPR]
      inherited [SCSI_LOWLEVEL && SCSI_IPR]
     }
     config SCSI_IPR_DUMP boolean {
      prompt "enable adapter dump support" if [SCSI_LOWLEVEL && SCSI_IPR]
      depends on [SCSI_IPR]
      default [y] if [SCSI_LOWLEVEL && SCSI_IPR]
      inherited [SCSI_LOWLEVEL && SCSI_IPR]
     }
    }
    config SCSI_ZALON tristate {
     prompt "Zalon SCSI support" if [SCSI_LOWLEVEL && GSC && SCSI]
     depends on [GSC && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && GSC && SCSI]
     inherited [SCSI_LOWLEVEL && GSC && SCSI]
    }
    config SCSI_NCR_Q720 tristate {
     prompt "NCR Quad 720 MCA SCSI support" if [SCSI_LOWLEVEL && MCA && SCSI]
     depends on [MCA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MCA && SCSI]
     inherited [SCSI_LOWLEVEL && MCA && SCSI]
    }
    config SCSI_NCR53C8XX_DEFAULT_TAGS integer {
     prompt "default tagged command queue depth" if [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
     depends on [SCSI_ZALON || SCSI_NCR_Q720]
     default [8] if [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
     inherited [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
    }
    config SCSI_NCR53C8XX_MAX_TAGS integer {
     prompt "maximum number of queued commands" if [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
     depends on [SCSI_ZALON || SCSI_NCR_Q720]
     default [32] if [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
     inherited [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
    }
    config SCSI_NCR53C8XX_SYNC integer {
     prompt "synchronous transfers frequency in MHz" if [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
     depends on [SCSI_ZALON || SCSI_NCR_Q720]
     default [20] if [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
     inherited [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720)]
    }
    config SCSI_NCR53C8XX_NO_DISCONNECT boolean {
     prompt "not allow targets to disconnect" if [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
     depends on [(SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
     inherited [SCSI_LOWLEVEL && (SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS="0"]
    }
    config SCSI_MCA_53C9X tristate {
     prompt "NCR MCA 53C9x SCSI support" if [SCSI_LOWLEVEL && MCA_LEGACY && SCSI && BROKEN_ON_SMP]
     depends on [MCA_LEGACY && SCSI && BROKEN_ON_SMP]
     inherited [SCSI_LOWLEVEL && MCA_LEGACY && SCSI && BROKEN_ON_SMP]
    }
    config SCSI_PAS16 tristate {
     prompt "PAS16 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_PSI240I tristate {
     prompt "PSI240i support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_QLOGIC_FAS tristate {
     prompt "Qlogic FAS SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_QLOGIC_FC_FIRMWARE boolean {
     prompt "Include loadable firmware in driver" if [SCSI_LOWLEVEL && SCSI_QLOGIC_FC]
     depends on [SCSI_QLOGIC_FC]
     inherited [SCSI_LOWLEVEL && SCSI_QLOGIC_FC]
    }
    config SCSI_QLOGIC_1280 tristate {
     prompt "Qlogic QLA 1240/1x80/1x160 SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_QLOGICPTI tristate {
     prompt "PTI Qlogic, ISP Driver" if [SCSI_LOWLEVEL && SBUS && SCSI]
     depends on [SBUS && SCSI]
     inherited [SCSI_LOWLEVEL && SBUS && SCSI]
    }
    config SCSI_QLA_FC tristate {
     prompt "QLogic QLA2XXX Fibre Channel Support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     select FW_LOADER if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_QLA_ISCSI tristate {
     prompt "QLogic ISP4XXX host adapter family support" if [SCSI_LOWLEVEL && PCI && SCSI && NET]
     depends on [PCI && SCSI && NET]
     select SCSI_ISCSI_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI && NET]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && NET]
    }
    config SCSI_LPFC tristate {
     prompt "Emulex LightPulse Fibre Channel Support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_SEAGATE tristate {
     prompt "Seagate ST-02 and Future Domain TMC-8xx SCSI support" if [SCSI_LOWLEVEL && X86 && ISA && SCSI]
     depends on [X86 && ISA && SCSI]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && X86 && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && X86 && ISA && SCSI]
    }
    config SCSI_SIM710 tristate {
     prompt "Simple 53c710 SCSI support (Compaq, NCR machines)" if [SCSI_LOWLEVEL && (EISA || MCA) && SCSI]
     depends on [(EISA || MCA) && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && (EISA || MCA) && SCSI]
     inherited [SCSI_LOWLEVEL && (EISA || MCA) && SCSI]
    }
    config SCSI_SYM53C416 tristate {
     prompt "Symbios 53c416 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_DC395x tristate {
     prompt "Tekram DC395(U/UW/F) and DC315(U) SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && PCI && SCSI && EXPERIMENTAL]
     depends on [PCI && SCSI && EXPERIMENTAL]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && EXPERIMENTAL]
    }
    config SCSI_DC390T tristate {
     prompt "Tekram DC390(T) and Am53/79C974 SCSI support" if [SCSI_LOWLEVEL && PCI && SCSI]
     depends on [PCI && SCSI]
     inherited [SCSI_LOWLEVEL && PCI && SCSI]
    }
    config SCSI_T128 tristate {
     prompt "Trantor T128/T128F/T228 SCSI support" if [SCSI_LOWLEVEL && ISA && SCSI]
     depends on [ISA && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ISA && SCSI]
     select CHECK_SIGNATURE if [SCSI_LOWLEVEL && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && ISA && SCSI]
    }
    config SCSI_U14_34F tristate {
     prompt "UltraStor 14F/34F support" if [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     depends on [ISA && SCSI && ISA_DMA_API]
     inherited [SCSI_LOWLEVEL && ISA && SCSI && ISA_DMA_API]
     config SCSI_U14_34F_TAGGED_QUEUE boolean {
      prompt "enable tagged command queueing" if [SCSI_LOWLEVEL && SCSI_U14_34F]
      depends on [SCSI_U14_34F]
      inherited [SCSI_LOWLEVEL && SCSI_U14_34F]
     }
     config SCSI_U14_34F_LINKED_COMMANDS boolean {
      prompt "enable elevator sorting" if [SCSI_LOWLEVEL && SCSI_U14_34F]
      depends on [SCSI_U14_34F]
      inherited [SCSI_LOWLEVEL && SCSI_U14_34F]
     }
     config SCSI_U14_34F_MAX_TAGS integer {
      prompt "maximum number of queued commands" if [SCSI_LOWLEVEL && SCSI_U14_34F]
      depends on [SCSI_U14_34F]
      default [8] if [SCSI_LOWLEVEL && SCSI_U14_34F]
      inherited [SCSI_LOWLEVEL && SCSI_U14_34F]
     }
    }
    config SCSI_ULTRASTOR tristate {
     prompt "UltraStor SCSI support" if [SCSI_LOWLEVEL && X86 && ISA && SCSI]
     depends on [X86 && ISA && SCSI]
     inherited [SCSI_LOWLEVEL && X86 && ISA && SCSI]
    }
    config SCSI_NSP32 tristate {
     prompt "Workbit NinjaSCSI-32Bi/UDE support" if [SCSI_LOWLEVEL && PCI && SCSI && !64BIT]
     depends on [PCI && SCSI && !64BIT]
     inherited [SCSI_LOWLEVEL && PCI && SCSI && !64BIT]
    }
    config SCSI_DEBUG tristate {
     prompt "SCSI debugging host simulator" if [SCSI_LOWLEVEL && SCSI]
     depends on [SCSI]
     inherited [SCSI_LOWLEVEL && SCSI]
    }
    config SCSI_MESH tristate {
     prompt "MESH (Power Mac internal SCSI) support" if [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
     depends on [PPC32 && PPC_PMAC && SCSI]
     inherited [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
     config SCSI_MESH_SYNC_RATE integer {
      prompt "maximum synchronous transfer rate (MB/s) (0 = async)" if [SCSI_LOWLEVEL && SCSI_MESH]
      depends on [SCSI_MESH]
      default [5] if [SCSI_LOWLEVEL && SCSI_MESH]
      inherited [SCSI_LOWLEVEL && SCSI_MESH]
     }
     config SCSI_MESH_RESET_DELAY_MS integer {
      prompt "initial bus reset delay (ms) (0 = no reset)" if [SCSI_LOWLEVEL && SCSI_MESH]
      depends on [SCSI_MESH]
      default [4000] if [SCSI_LOWLEVEL && SCSI_MESH]
      inherited [SCSI_LOWLEVEL && SCSI_MESH]
     }
    }
    config SCSI_MAC53C94 tristate {
     prompt "53C94 (Power Mac external SCSI) support" if [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
     depends on [PPC32 && PPC_PMAC && SCSI]
     inherited [SCSI_LOWLEVEL && PPC32 && PPC_PMAC && SCSI]
    }
    config SCSI_ACORNSCSI_3 tristate {
     prompt "Acorn SCSI card (aka30) support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI && BROKEN]
     depends on [ARCH_ACORN && SCSI && BROKEN]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI && BROKEN]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI && BROKEN]
     config SCSI_ACORNSCSI_TAGGED_QUEUE boolean {
      prompt "Support SCSI 2 Tagged queueing" if [SCSI_LOWLEVEL && SCSI_ACORNSCSI_3]
      depends on [SCSI_ACORNSCSI_3]
      inherited [SCSI_LOWLEVEL && SCSI_ACORNSCSI_3]
     }
     config SCSI_ACORNSCSI_SYNC boolean {
      prompt "Support SCSI 2 Synchronous Transfers" if [SCSI_LOWLEVEL && SCSI_ACORNSCSI_3]
      depends on [SCSI_ACORNSCSI_3]
      inherited [SCSI_LOWLEVEL && SCSI_ACORNSCSI_3]
     }
    }
    config SCSI_ARXESCSI tristate {
     prompt "ARXE SCSI support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_CUMANA_2 tristate {
     prompt "CumanaSCSI II support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_EESOXSCSI tristate {
     prompt "EESOX support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_POWERTECSCSI tristate {
     prompt "PowerTec support" if [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
     depends on [ARCH_ACORN && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && SCSI]
    }
    config SCSI_CUMANA_1 tristate {
     prompt "CumanaSCSI I support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     depends on [ARCH_ACORN && EXPERIMENTAL && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
    }
    config SCSI_OAK1 tristate {
     prompt "Oak SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     depends on [ARCH_ACORN && EXPERIMENTAL && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
     inherited [SCSI_LOWLEVEL && ARCH_ACORN && EXPERIMENTAL && SCSI]
    }
    config JAZZ_ESP boolean {
     prompt "MIPS JAZZ FAS216 SCSI support" if [SCSI_LOWLEVEL && MACH_JAZZ && SCSI]
     depends on [MACH_JAZZ && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MACH_JAZZ && SCSI]
     inherited [SCSI_LOWLEVEL && MACH_JAZZ && SCSI]
    }
    config A3000_SCSI tristate {
     prompt "A3000 WD33C93A support" if [SCSI_LOWLEVEL && AMIGA && SCSI]
     depends on [AMIGA && SCSI]
     inherited [SCSI_LOWLEVEL && AMIGA && SCSI]
    }
    config A2091_SCSI tristate {
     prompt "A2091/A590 WD33C93A support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config GVP11_SCSI tristate {
     prompt "GVP Series II WD33C93A support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config CYBERSTORM_SCSI tristate {
     prompt "CyberStorm SCSI support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config CYBERSTORMII_SCSI tristate {
     prompt "CyberStorm Mk II SCSI support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config BLZ2060_SCSI tristate {
     prompt "Blizzard 2060 SCSI support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config BLZ1230_SCSI tristate {
     prompt "Blizzard 1230IV/1260 SCSI support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config FASTLANE_SCSI tristate {
     prompt "Fastlane SCSI support" if [SCSI_LOWLEVEL && ZORRO && SCSI]
     depends on [ZORRO && SCSI]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI]
    }
    config SCSI_A4000T tristate {
     prompt "A4000T NCR53c710 SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && AMIGA && SCSI && EXPERIMENTAL]
     depends on [AMIGA && SCSI && EXPERIMENTAL]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && AMIGA && SCSI && EXPERIMENTAL]
     inherited [SCSI_LOWLEVEL && AMIGA && SCSI && EXPERIMENTAL]
    }
    config SCSI_ZORRO7XX tristate {
     prompt "Zorro NCR53c710 SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
     depends on [ZORRO && SCSI && EXPERIMENTAL]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
    }
    config OKTAGON_SCSI tristate {
     prompt "BSC Oktagon SCSI support (EXPERIMENTAL)" if [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
     depends on [ZORRO && SCSI && EXPERIMENTAL]
     inherited [SCSI_LOWLEVEL && ZORRO && SCSI && EXPERIMENTAL]
    }
    config ATARI_SCSI tristate {
     prompt "Atari native SCSI support" if [SCSI_LOWLEVEL && ATARI && SCSI]
     depends on [ATARI && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && ATARI && SCSI]
     inherited [SCSI_LOWLEVEL && ATARI && SCSI]
     config ATARI_SCSI_TOSHIBA_DELAY boolean {
      prompt "Long delays for Toshiba CD-ROMs" if [SCSI_LOWLEVEL && ATARI_SCSI]
      depends on [ATARI_SCSI]
      inherited [SCSI_LOWLEVEL && ATARI_SCSI]
     }
     config ATARI_SCSI_RESET_BOOT boolean {
      prompt "Reset SCSI-devices at boottime" if [SCSI_LOWLEVEL && ATARI_SCSI]
      depends on [ATARI_SCSI]
      inherited [SCSI_LOWLEVEL && ATARI_SCSI]
     }
     config TT_DMA_EMUL boolean {
      prompt "Hades SCSI DMA emulator" if [SCSI_LOWLEVEL && ATARI_SCSI && HADES]
      depends on [ATARI_SCSI && HADES]
      inherited [SCSI_LOWLEVEL && ATARI_SCSI && HADES]
     }
    }
    config MAC_SCSI boolean {
     prompt "Macintosh NCR5380 SCSI" if [SCSI_LOWLEVEL && MAC && SCSI="y"]
     depends on [MAC && SCSI="y"]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MAC && SCSI="y"]
     inherited [SCSI_LOWLEVEL && MAC && SCSI="y"]
    }
    config SCSI_MAC_ESP tristate {
     prompt "Macintosh NCR53c9[46] SCSI" if [SCSI_LOWLEVEL && MAC && SCSI]
     depends on [MAC && SCSI]
     inherited [SCSI_LOWLEVEL && MAC && SCSI]
    }
    config MVME147_SCSI boolean {
     prompt "WD33C93 SCSI driver for MVME147" if [SCSI_LOWLEVEL && MVME147 && SCSI="y"]
     depends on [MVME147 && SCSI="y"]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MVME147 && SCSI="y"]
     inherited [SCSI_LOWLEVEL && MVME147 && SCSI="y"]
    }
    config MVME16x_SCSI tristate {
     prompt "NCR53C710 SCSI driver for MVME16x" if [SCSI_LOWLEVEL && MVME16x && SCSI]
     depends on [MVME16x && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && MVME16x && SCSI]
     inherited [SCSI_LOWLEVEL && MVME16x && SCSI]
    }
    config BVME6000_SCSI tristate {
     prompt "NCR53C710 SCSI driver for BVME6000" if [SCSI_LOWLEVEL && BVME6000 && SCSI]
     depends on [BVME6000 && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && BVME6000 && SCSI]
     inherited [SCSI_LOWLEVEL && BVME6000 && SCSI]
    }
    config SUN3_SCSI tristate {
     prompt "Sun3 NCR5380 SCSI" if [SCSI_LOWLEVEL && SUN3 && SCSI]
     depends on [SUN3 && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && SUN3 && SCSI]
     inherited [SCSI_LOWLEVEL && SUN3 && SCSI]
    }
    config SUN3X_ESP boolean {
     prompt "Sun3x ESP SCSI" if [SCSI_LOWLEVEL && SUN3X && SCSI="y"]
     depends on [SUN3X && SCSI="y"]
     inherited [SCSI_LOWLEVEL && SUN3X && SCSI="y"]
    }
    config SCSI_SUNESP tristate {
     prompt "Sparc ESP Scsi Driver" if [SCSI_LOWLEVEL && SBUS && SCSI]
     depends on [SBUS && SCSI]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL && SBUS && SCSI]
     inherited [SCSI_LOWLEVEL && SBUS && SCSI]
    }
    config ZFCP tristate {
     prompt "FCP host bus adapter driver for IBM eServer zSeries" if [SCSI_LOWLEVEL && S390 && QDIO && SCSI]
     depends on [S390 && QDIO && SCSI]
     select SCSI_FC_ATTRS if [SCSI_LOWLEVEL && S390 && QDIO && SCSI]
     inherited [SCSI_LOWLEVEL && S390 && QDIO && SCSI]
    }
    config SCSI_SRP tristate {
     prompt "SCSI RDMA Protocol helper library" if [SCSI_LOWLEVEL && SCSI && PCI]
     depends on [SCSI && PCI]
     select SCSI_TGT if [SCSI_LOWLEVEL && SCSI && PCI]
     inherited [SCSI_LOWLEVEL && SCSI && PCI]
    }
   }
  }
  menuconfig SCSI_LOWLEVEL_PCMCIA boolean {
   prompt "PCMCIA SCSI adapter support" if [SCSI && PCMCIA]
   depends on [SCSI && PCMCIA]
   inherited [SCSI && PCMCIA]
   if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA] {
    config PCMCIA_AHA152X tristate {
     prompt "Adaptec AHA152X PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && !64BIT]
     depends on [!64BIT]
     select SCSI_SPI_ATTRS if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && !64BIT]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && !64BIT]
    }
    config PCMCIA_FDOMAIN tristate {
     prompt "Future Domain PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA]
    }
    config PCMCIA_NINJA_SCSI tristate {
     prompt "NinjaSCSI-3 / NinjaSCSI-32Bi (16bit) PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && !64BIT]
     depends on [!64BIT]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA && !64BIT]
    }
    config PCMCIA_QLOGIC tristate {
     prompt "Qlogic PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA]
    }
    config PCMCIA_SYM53C500 tristate {
     prompt "Symbios 53c500 PCMCIA support" if [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA]
     inherited [SCSI_LOWLEVEL_PCMCIA && SCSI && PCMCIA]
    }
   }
  }
 }
 menuconfig ATA tristate {
  prompt "Serial ATA (prod) and Parallel ATA (experimental) drivers" if [HAS_IOMEM && BLOCK && (!M32R && !M68K || BROKEN) && (!SUN4 || BROKEN)]
  depends on [HAS_IOMEM]
  depends on [BLOCK]
  depends on [!(M32R || M68K) || BROKEN]
  depends on [!SUN4 || BROKEN]
  select SCSI if [HAS_IOMEM && BLOCK && (!M32R && !M68K || BROKEN) && (!SUN4 || BROKEN)]
  inherited [HAS_IOMEM && BLOCK && (!M32R && !M68K || BROKEN) && (!SUN4 || BROKEN)]
  if [ATA] {
   config ATA_NONSTANDARD boolean {
    default [n] if [ATA]
    inherited [ATA]
   }
   config ATA_ACPI boolean {
    depends on [ACPI && PCI]
    default [y] if [ATA && ACPI && PCI]
    inherited [ATA && ACPI && PCI]
   }
   config SATA_AHCI tristate {
    prompt "AHCI SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_SVW tristate {
    prompt "ServerWorks Frodo / Apple K2 SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config ATA_PIIX tristate {
    prompt "Intel ESB, ICH, PIIX3, PIIX4 PATA/SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_MV tristate {
    prompt "Marvell SATA support (HIGHLY EXPERIMENTAL)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config SATA_NV tristate {
    prompt "NVIDIA SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PDC_ADMA tristate {
    prompt "Pacific Digital ADMA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_QSTOR tristate {
    prompt "Pacific Digital SATA QStor support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_PROMISE tristate {
    prompt "Promise SATA TX2/TX4 support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_SX4 tristate {
    prompt "Promise SATA SX4 support" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config SATA_SIL tristate {
    prompt "Silicon Image SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_SIL24 tristate {
    prompt "Silicon Image 3124/3132 SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_SIS tristate {
    prompt "SiS 964/965/966/180 SATA support" if [ATA && PCI]
    depends on [PCI]
    select PATA_SIS if [ATA && PCI]
    inherited [ATA && PCI]
   }
   config SATA_ULI tristate {
    prompt "ULi Electronics SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_VIA tristate {
    prompt "VIA SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_VITESSE tristate {
    prompt "VITESSE VSC-7174 / INTEL 31244 SATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config SATA_INIC162X tristate {
    prompt "Initio 162x SATA support (HIGHLY EXPERIMENTAL)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_ACPI tristate {
    prompt "ACPI firmware driver for PATA" if [ATA && ATA_ACPI]
    depends on [ATA_ACPI]
    inherited [ATA && ATA_ACPI]
   }
   config SATA_FSL tristate {
    prompt "Freescale 3.0Gbps SATA support" if [ATA && PPC_MPC837x]
    depends on [PPC_MPC837x]
    inherited [ATA && PPC_MPC837x]
   }
   config PATA_ALI tristate {
    prompt "ALi PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_AMD tristate {
    prompt "AMD/NVidia PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_ARTOP tristate {
    prompt "ARTOP 6210/6260 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_AT32 tristate {
    prompt "Atmel AVR32 PATA support (Experimental)" if [ATA && AVR32 && PLATFORM_AT32AP && EXPERIMENTAL]
    depends on [AVR32 && PLATFORM_AT32AP && EXPERIMENTAL]
    inherited [ATA && AVR32 && PLATFORM_AT32AP && EXPERIMENTAL]
   }
   config PATA_ATIIXP tristate {
    prompt "ATI PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_CMD640_PCI tristate {
    prompt "CMD640 PCI PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_CMD64X tristate {
    prompt "CMD64x PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_CS5520 tristate {
    prompt "CS5510/5520 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_CS5530 tristate {
    prompt "CS5530 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_CS5535 tristate {
    prompt "CS5535 PATA support (Experimental)" if [ATA && PCI && X86 && !X86_64 && EXPERIMENTAL]
    depends on [PCI && X86 && !X86_64 && EXPERIMENTAL]
    inherited [ATA && PCI && X86 && !X86_64 && EXPERIMENTAL]
   }
   config PATA_CS5536 tristate {
    prompt "CS5536 PATA support (Experimental)" if [ATA && PCI && X86 && !X86_64 && EXPERIMENTAL]
    depends on [PCI && X86 && !X86_64 && EXPERIMENTAL]
    inherited [ATA && PCI && X86 && !X86_64 && EXPERIMENTAL]
   }
   config PATA_CYPRESS tristate {
    prompt "Cypress CY82C693 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_EFAR tristate {
    prompt "EFAR SLC90E66 support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config ATA_GENERIC tristate {
    prompt "Generic ATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_HPT366 tristate {
    prompt "HPT 366/368 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_HPT37X tristate {
    prompt "HPT 370/370A/371/372/374/302 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_HPT3X2N tristate {
    prompt "HPT 372N/302N PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_HPT3X3 tristate {
    prompt "HPT 343/363 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
    config PATA_HPT3X3_DMA boolean {
     prompt "HPT 343/363 DMA support (Experimental)" if [ATA && PATA_HPT3X3]
     depends on [PATA_HPT3X3]
     inherited [ATA && PATA_HPT3X3]
    }
   }
   config PATA_ISAPNP tristate {
    prompt "ISA Plug and Play PATA support (Experimental)" if [ATA && EXPERIMENTAL && ISAPNP]
    depends on [EXPERIMENTAL && ISAPNP]
    inherited [ATA && EXPERIMENTAL && ISAPNP]
   }
   config PATA_IT821X tristate {
    prompt "IT8211/2 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_IT8213 tristate {
    prompt "IT8213 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_JMICRON tristate {
    prompt "JMicron PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_LEGACY tristate {
    prompt "Legacy ISA PATA support (Experimental)" if [ATA && ISA && EXPERIMENTAL]
    depends on [ISA && EXPERIMENTAL]
    inherited [ATA && ISA && EXPERIMENTAL]
   }
   config PATA_TRIFLEX tristate {
    prompt "Compaq Triflex PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_MARVELL tristate {
    prompt "Marvell PATA support via legacy mode" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_MPC52xx tristate {
    prompt "Freescale MPC52xx SoC internal IDE" if [ATA && PPC_MPC52xx]
    depends on [PPC_MPC52xx]
    inherited [ATA && PPC_MPC52xx]
   }
   config PATA_MPIIX tristate {
    prompt "Intel PATA MPIIX support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_OLDPIIX tristate {
    prompt "Intel PATA old PIIX support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_NETCELL tristate {
    prompt "NETCELL Revolution RAID support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_NS87410 tristate {
    prompt "Nat Semi NS87410 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_NS87415 tristate {
    prompt "Nat Semi NS87415 PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_OPTI tristate {
    prompt "OPTI621/6215 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_OPTIDMA tristate {
    prompt "OPTI FireStar PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_PCMCIA tristate {
    prompt "PCMCIA PATA support" if [ATA && PCMCIA]
    depends on [PCMCIA]
    inherited [ATA && PCMCIA]
   }
   config PATA_PDC_OLD tristate {
    prompt "Older Promise PATA controller support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_QDI tristate {
    prompt "QDI VLB PATA support" if [ATA && ISA]
    depends on [ISA]
    inherited [ATA && ISA]
   }
   config PATA_RADISYS tristate {
    prompt "RADISYS 82600 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_RZ1000 tristate {
    prompt "PC Tech RZ1000 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_SC1200 tristate {
    prompt "SC1200 PATA support (Very Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_SERVERWORKS tristate {
    prompt "SERVERWORKS OSB4/CSB5/CSB6/HT1000 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_PDC2027X tristate {
    prompt "Promise PATA 2027x support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_SIL680 tristate {
    prompt "CMD / Silicon Image 680 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_SIS tristate {
    prompt "SiS PATA support (Experimental)" if [ATA && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [ATA && PCI && EXPERIMENTAL]
   }
   config PATA_VIA tristate {
    prompt "VIA PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_WINBOND tristate {
    prompt "Winbond SL82C105 PATA support" if [ATA && PCI]
    depends on [PCI]
    inherited [ATA && PCI]
   }
   config PATA_WINBOND_VLB tristate {
    prompt "Winbond W83759A VLB PATA support (Experimental)" if [ATA && ISA && EXPERIMENTAL]
    depends on [ISA && EXPERIMENTAL]
    inherited [ATA && ISA && EXPERIMENTAL]
   }
   config PATA_PLATFORM tristate {
    prompt "Generic platform device PATA support" if [ATA && (EMBEDDED || ARCH_RPC)]
    depends on [EMBEDDED || ARCH_RPC]
    inherited [ATA && (EMBEDDED || ARCH_RPC)]
   }
   config PATA_ICSIDE tristate {
    prompt "Acorn ICS PATA support" if [ATA && ARM && ARCH_ACORN]
    depends on [ARM && ARCH_ACORN]
    inherited [ATA && ARM && ARCH_ACORN]
   }
   config PATA_IXP4XX_CF tristate {
    prompt "IXP4XX Compact Flash support" if [ATA && ARCH_IXP4XX]
    depends on [ARCH_IXP4XX]
    inherited [ATA && ARCH_IXP4XX]
   }
   config PATA_SCC tristate {
    prompt "Toshiba's Cell Reference Set IDE support" if [ATA && PCI && PPC_CELLEB]
    depends on [PCI && PPC_CELLEB]
    inherited [ATA && PCI && PPC_CELLEB]
   }
   config PATA_BF54X tristate {
    prompt "Blackfin 54x ATAPI support" if [ATA && (BF542 || BF548 || BF549)]
    depends on [BF542 || BF548 || BF549]
    inherited [ATA && (BF542 || BF548 || BF549)]
   }
  }
 }
 menuconfig MD boolean {
  prompt "Multiple devices driver support (RAID and LVM)" if [BLOCK]
  depends on [BLOCK]
  inherited [BLOCK]
  if [MD] {
   config BLK_DEV_MD tristate {
    prompt "RAID support" if [MD]
    inherited [MD]
    config MD_LINEAR tristate {
     prompt "Linear (append) mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
    config MD_RAID0 tristate {
     prompt "RAID-0 (striping) mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
    config MD_RAID1 tristate {
     prompt "RAID-1 (mirroring) mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
    config MD_RAID10 tristate {
     prompt "RAID-10 (mirrored striping) mode (EXPERIMENTAL)" if [MD && BLK_DEV_MD && EXPERIMENTAL]
     depends on [BLK_DEV_MD && EXPERIMENTAL]
     inherited [MD && BLK_DEV_MD && EXPERIMENTAL]
    }
    config MD_RAID456 tristate {
     prompt "RAID-4/RAID-5/RAID-6 mode" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     select ASYNC_MEMCPY if [MD && BLK_DEV_MD]
     select ASYNC_XOR if [MD && BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
     config MD_RAID5_RESHAPE boolean {
      prompt "Support adding drives to a raid-5 array" if [MD && MD_RAID456]
      depends on [MD_RAID456]
      default [y] if [MD && MD_RAID456]
      inherited [MD && MD_RAID456]
     }
    }
    config MD_MULTIPATH tristate {
     prompt "Multipath I/O support" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
    config MD_FAULTY tristate {
     prompt "Faulty test module for MD" if [MD && BLK_DEV_MD]
     depends on [BLK_DEV_MD]
     inherited [MD && BLK_DEV_MD]
    }
   }
   config BLK_DEV_DM tristate {
    prompt "Device mapper support" if [MD]
    inherited [MD]
    config DM_DEBUG boolean {
     prompt "Device mapper debugging support" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
    config DM_CRYPT tristate {
     prompt "Crypt target support" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     select CRYPTO if [MD && BLK_DEV_DM && EXPERIMENTAL]
     select CRYPTO_CBC if [MD && BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
    config DM_SNAPSHOT tristate {
     prompt "Snapshot target (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
    config DM_MIRROR tristate {
     prompt "Mirror target (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
    config DM_ZERO tristate {
     prompt "Zero target (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
    config DM_MULTIPATH tristate {
     prompt "Multipath target (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
     config DM_MULTIPATH_EMC tristate {
      prompt "EMC CX/AX multipath support (EXPERIMENTAL)" if [MD && DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL]
      depends on [DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL]
      inherited [MD && DM_MULTIPATH && BLK_DEV_DM && EXPERIMENTAL]
     }
     config DM_MULTIPATH_RDAC tristate {
      prompt "LSI/Engenio RDAC multipath support (EXPERIMENTAL)" if [MD && DM_MULTIPATH && BLK_DEV_DM && SCSI && EXPERIMENTAL]
      depends on [DM_MULTIPATH && BLK_DEV_DM && SCSI && EXPERIMENTAL]
      inherited [MD && DM_MULTIPATH && BLK_DEV_DM && SCSI && EXPERIMENTAL]
     }
     config DM_MULTIPATH_HP tristate {
      prompt "HP MSA multipath support (EXPERIMENTAL)" if [MD && DM_MULTIPATH && BLK_DEV_DM && SCSI && EXPERIMENTAL]
      depends on [DM_MULTIPATH && BLK_DEV_DM && SCSI && EXPERIMENTAL]
      inherited [MD && DM_MULTIPATH && BLK_DEV_DM && SCSI && EXPERIMENTAL]
     }
    }
    config DM_DELAY tristate {
     prompt "I/O delaying target (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
    config DM_UEVENT boolean {
     prompt "DM uevents (EXPERIMENTAL)" if [MD && BLK_DEV_DM && EXPERIMENTAL]
     depends on [BLK_DEV_DM && EXPERIMENTAL]
     inherited [MD && BLK_DEV_DM && EXPERIMENTAL]
    }
   }
  }
 }
 menuconfig FUSION boolean {
  prompt "Fusion MPT device support" if [PCI]
  depends on [PCI]
  inherited [PCI]
  if [FUSION] {
   config FUSION_SPI tristate {
    prompt "Fusion MPT ScsiHost drivers for SPI" if [FUSION && PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_SPI_ATTRS if [FUSION && PCI && SCSI]
    inherited [FUSION && PCI && SCSI]
   }
   config FUSION_FC tristate {
    prompt "Fusion MPT ScsiHost drivers for FC" if [FUSION && PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_FC_ATTRS if [FUSION && PCI && SCSI]
    inherited [FUSION && PCI && SCSI]
   }
   config FUSION_SAS tristate {
    prompt "Fusion MPT ScsiHost drivers for SAS" if [FUSION && PCI && SCSI]
    depends on [PCI && SCSI]
    select SCSI_SAS_ATTRS if [FUSION && PCI && SCSI]
    inherited [FUSION && PCI && SCSI]
   }
   config FUSION_MAX_SGE integer {
    prompt "Maximum number of scatter gather entries (16 - 128)" if [FUSION]
    default [128] if [FUSION]
    range [16 128] if [FUSION]
    inherited [FUSION]
   }
   config FUSION_CTL tristate {
    prompt "Fusion MPT misc device (ioctl) driver" if [FUSION && (FUSION_SPI || FUSION_FC || FUSION_SAS)]
    depends on [FUSION_SPI || FUSION_FC || FUSION_SAS]
    inherited [FUSION && (FUSION_SPI || FUSION_FC || FUSION_SAS)]
   }
   config FUSION_LAN tristate {
    prompt "Fusion MPT LAN driver" if [FUSION && FUSION_FC && NET_FC]
    depends on [FUSION_FC && NET_FC]
    inherited [FUSION && FUSION_FC && NET_FC]
   }
   config FUSION_LOGGING boolean {
    prompt "Fusion MPT logging facility" if [FUSION]
    inherited [FUSION]
   }
  }
 }
 menu "IEEE 1394 (FireWire) support" {
  depends on [PCI || BROKEN]
  config FIREWIRE tristate {
   prompt "IEEE 1394 (FireWire) support - alternative stack, EXPERIMENTAL" if [(PCI || BROKEN) && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRC_ITU_T if [(PCI || BROKEN) && EXPERIMENTAL]
   inherited [(PCI || BROKEN) && EXPERIMENTAL]
   config FIREWIRE_OHCI tristate {
    prompt "Support for OHCI FireWire host controllers" if [(PCI || BROKEN) && PCI && FIREWIRE]
    depends on [PCI && FIREWIRE]
    inherited [(PCI || BROKEN) && PCI && FIREWIRE]
   }
   config FIREWIRE_SBP2 tristate {
    prompt "Support for storage devices (SBP-2 protocol driver)" if [(PCI || BROKEN) && FIREWIRE && SCSI]
    depends on [FIREWIRE && SCSI]
    inherited [(PCI || BROKEN) && FIREWIRE && SCSI]
   }
  }
  config IEEE1394 tristate {
   prompt "IEEE 1394 (FireWire) support" if [PCI || BROKEN]
   depends on [PCI || BROKEN]
   inherited [PCI || BROKEN]
   config IEEE1394_VERBOSEDEBUG boolean {
    prompt "Excessive debugging output" if [(PCI || BROKEN) && IEEE1394]
    depends on [IEEE1394]
    inherited [(PCI || BROKEN) && IEEE1394]
   }
   config IEEE1394_PCILYNX tristate {
    prompt "Texas Instruments PCILynx support" if [(PCI || BROKEN) && PCI && IEEE1394 && I2C]
    depends on [PCI && IEEE1394 && I2C]
    select I2C_ALGOBIT if [(PCI || BROKEN) && PCI && IEEE1394 && I2C]
    inherited [(PCI || BROKEN) && PCI && IEEE1394 && I2C]
   }
   config IEEE1394_OHCI1394 tristate {
    prompt "OHCI-1394 support" if [(PCI || BROKEN) && PCI && IEEE1394]
    depends on [PCI && IEEE1394]
    inherited [(PCI || BROKEN) && PCI && IEEE1394]
   }
   config IEEE1394_VIDEO1394 tristate {
    prompt "OHCI-1394 Video support" if [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
    depends on [IEEE1394 && IEEE1394_OHCI1394]
    inherited [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
   }
   config IEEE1394_SBP2 tristate {
    prompt "SBP-2 support (Harddisks etc.)" if [(PCI || BROKEN) && IEEE1394 && SCSI]
    depends on [IEEE1394 && SCSI]
    inherited [(PCI || BROKEN) && IEEE1394 && SCSI]
    config IEEE1394_SBP2_PHYS_DMA boolean {
     prompt "Enable replacement for physical DMA in SBP2" if [(PCI || BROKEN) && IEEE1394_SBP2 && VIRT_TO_BUS && EXPERIMENTAL]
     depends on [IEEE1394_SBP2 && VIRT_TO_BUS && EXPERIMENTAL]
     inherited [(PCI || BROKEN) && IEEE1394_SBP2 && VIRT_TO_BUS && EXPERIMENTAL]
    }
   }
   config IEEE1394_ETH1394_ROM_ENTRY boolean {
    depends on [IEEE1394]
    default [n] if [(PCI || BROKEN) && IEEE1394]
    inherited [(PCI || BROKEN) && IEEE1394]
   }
   config IEEE1394_ETH1394 tristate {
    prompt "IP over 1394" if [(PCI || BROKEN) && IEEE1394 && EXPERIMENTAL && INET]
    depends on [IEEE1394 && EXPERIMENTAL && INET]
    select IEEE1394_ETH1394_ROM_ENTRY if [(PCI || BROKEN) && IEEE1394 && EXPERIMENTAL && INET]
    inherited [(PCI || BROKEN) && IEEE1394 && EXPERIMENTAL && INET]
   }
   config IEEE1394_DV1394 tristate {
    prompt "OHCI-DV I/O support (deprecated)" if [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
    depends on [IEEE1394 && IEEE1394_OHCI1394]
    inherited [(PCI || BROKEN) && IEEE1394 && IEEE1394_OHCI1394]
   }
   config IEEE1394_RAWIO tristate {
    prompt "Raw IEEE1394 I/O support" if [(PCI || BROKEN) && IEEE1394]
    depends on [IEEE1394]
    inherited [(PCI || BROKEN) && IEEE1394]
   }
  }
 }
 menuconfig I2O tristate {
  prompt "I2O device support" if [PCI]
  depends on [PCI]
  inherited [PCI]
  if [I2O] {
   config I2O_LCT_NOTIFY_ON_CHANGES boolean {
    prompt "Enable LCT notification" if [I2O]
    default [y] if [I2O]
    inherited [I2O]
   }
   config I2O_EXT_ADAPTEC boolean {
    prompt "Enable Adaptec extensions" if [I2O]
    default [y] if [I2O]
    inherited [I2O]
    config I2O_EXT_ADAPTEC_DMA64 boolean {
     prompt "Enable 64-bit DMA" if [I2O && I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     depends on [I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     default [y] if [I2O && I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
     inherited [I2O && I2O_EXT_ADAPTEC && (64BIT || HIGHMEM64G)]
    }
   }
   config I2O_CONFIG tristate {
    prompt "I2O Configuration support" if [I2O && VIRT_TO_BUS]
    depends on [VIRT_TO_BUS]
    inherited [I2O && VIRT_TO_BUS]
    config I2O_CONFIG_OLD_IOCTL boolean {
     prompt "Enable ioctls (OBSOLETE)" if [I2O && I2O_CONFIG]
     depends on [I2O_CONFIG]
     default [y] if [I2O && I2O_CONFIG]
     inherited [I2O && I2O_CONFIG]
    }
   }
   config I2O_BUS tristate {
    prompt "I2O Bus Adapter OSM" if [I2O]
    inherited [I2O]
   }
   config I2O_BLOCK tristate {
    prompt "I2O Block OSM" if [I2O && BLOCK]
    depends on [BLOCK]
    inherited [I2O && BLOCK]
   }
   config I2O_SCSI tristate {
    prompt "I2O SCSI OSM" if [I2O && SCSI]
    depends on [SCSI]
    inherited [I2O && SCSI]
   }
   config I2O_PROC tristate {
    prompt "I2O /proc support" if [I2O]
    inherited [I2O]
   }
  }
 }
 menuconfig MACINTOSH_DRIVERS boolean {
  prompt "Macintosh device drivers" if [PPC || MAC || X86]
  depends on [PPC || MAC || X86]
  default [y] if [(PPC || MAC || X86) && (PPC_PMAC || MAC)]
  inherited [PPC || MAC || X86]
  if [MACINTOSH_DRIVERS] {
   config ADB boolean {
    prompt "Apple Desktop Bus (ADB) support" if [MACINTOSH_DRIVERS && (MAC || PPC_PMAC && PPC32)]
    depends on [MAC || PPC_PMAC && PPC32]
    inherited [MACINTOSH_DRIVERS && (MAC || PPC_PMAC && PPC32)]
    config ADB_MACII boolean {
     prompt "Include Mac II ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
    config ADB_MACIISI boolean {
     prompt "Include Mac IIsi ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
    config ADB_IOP boolean {
     prompt "Include IOP (IIfx/Quadra 9x0) ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
    config ADB_PMU68K boolean {
     prompt "Include PMU (Powerbook) ADB driver" if [MACINTOSH_DRIVERS && ADB && MAC]
     depends on [ADB && MAC]
     inherited [MACINTOSH_DRIVERS && ADB && MAC]
    }
   }
   config ADB_CUDA boolean {
    prompt "Support for CUDA based Macs and PowerMacs" if [MACINTOSH_DRIVERS && (ADB || PPC_PMAC) && !PPC_PMAC64]
    depends on [(ADB || PPC_PMAC) && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && (ADB || PPC_PMAC) && !PPC_PMAC64]
   }
   config ADB_PMU boolean {
    prompt "Support for PMU  based PowerMacs" if [MACINTOSH_DRIVERS && PPC_PMAC]
    depends on [PPC_PMAC]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC]
    config ADB_PMU_LED boolean {
     prompt "Support for the Power/iBook front LED" if [MACINTOSH_DRIVERS && ADB_PMU]
     depends on [ADB_PMU]
     select NEW_LEDS if [MACINTOSH_DRIVERS && ADB_PMU]
     select LEDS_CLASS if [MACINTOSH_DRIVERS && ADB_PMU]
     inherited [MACINTOSH_DRIVERS && ADB_PMU]
     config ADB_PMU_LED_IDE boolean {
      prompt "Use front LED as IDE LED by default" if [MACINTOSH_DRIVERS && ADB_PMU_LED]
      depends on [ADB_PMU_LED]
      select LEDS_TRIGGERS if [MACINTOSH_DRIVERS && ADB_PMU_LED]
      select LEDS_TRIGGER_IDE_DISK if [MACINTOSH_DRIVERS && ADB_PMU_LED]
      inherited [MACINTOSH_DRIVERS && ADB_PMU_LED]
     }
    }
   }
   config PMAC_SMU boolean {
    prompt "Support for SMU  based PowerMacs" if [MACINTOSH_DRIVERS && PPC_PMAC64]
    depends on [PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC64]
   }
   config PMAC_APM_EMU tristate {
    prompt "APM emulation" if [MACINTOSH_DRIVERS && ADB_PMU && PM && PPC32]
    select APM_EMULATION if [MACINTOSH_DRIVERS && ADB_PMU && PM && PPC32]
    depends on [ADB_PMU && PM && PPC32]
    inherited [MACINTOSH_DRIVERS && ADB_PMU && PM && PPC32]
   }
   config PMAC_MEDIABAY boolean {
    prompt "Support PowerBook hotswap media bay" if [MACINTOSH_DRIVERS && PPC_PMAC && PPC32]
    depends on [PPC_PMAC && PPC32]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC && PPC32]
   }
   config PMAC_BACKLIGHT boolean {
    prompt "Backlight control for LCD screens" if [MACINTOSH_DRIVERS && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    depends on [ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    select FB_BACKLIGHT if [MACINTOSH_DRIVERS && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    inherited [MACINTOSH_DRIVERS && ADB_PMU && FB="y" && (BROKEN || !PPC64)]
    config PMAC_BACKLIGHT_LEGACY boolean {
     prompt "Provide legacy ioctl's on /dev/pmu for the backlight" if [MACINTOSH_DRIVERS && PMAC_BACKLIGHT && (BROKEN || !PPC64)]
     depends on [PMAC_BACKLIGHT && (BROKEN || !PPC64)]
     inherited [MACINTOSH_DRIVERS && PMAC_BACKLIGHT && (BROKEN || !PPC64)]
    }
   }
   config ADB_MACIO boolean {
    prompt "Include MacIO (CHRP) ADB driver" if [MACINTOSH_DRIVERS && ADB && PPC_CHRP && !PPC_PMAC64]
    depends on [ADB && PPC_CHRP && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && ADB && PPC_CHRP && !PPC_PMAC64]
   }
   config INPUT_ADBHID boolean {
    prompt "Support for ADB input devices (keyboard, mice, ...)" if [MACINTOSH_DRIVERS && ADB && INPUT="y"]
    depends on [ADB && INPUT="y"]
    inherited [MACINTOSH_DRIVERS && ADB && INPUT="y"]
   }
   config MAC_EMUMOUSEBTN boolean {
    prompt "Support for mouse button 2+3 emulation" if [MACINTOSH_DRIVERS]
    select INPUT if [MACINTOSH_DRIVERS]
    inherited [MACINTOSH_DRIVERS]
   }
   config THERM_WINDTUNNEL tristate {
    prompt "Support for thermal management on Windtunnel G4s" if [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    depends on [I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   }
   config THERM_ADT746X tristate {
    prompt "Support for thermal mgmnt on laptops with ADT 746x chipset" if [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    depends on [I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC && !PPC_PMAC64]
   }
   config THERM_PM72 tristate {
    prompt "Support for thermal management on PowerMac G5" if [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC64]
    depends on [I2C && I2C_POWERMAC && PPC_PMAC64]
    inherited [MACINTOSH_DRIVERS && I2C && I2C_POWERMAC && PPC_PMAC64]
   }
   config WINDFARM tristate {
    prompt "New PowerMac thermal control infrastructure" if [MACINTOSH_DRIVERS && PPC]
    depends on [PPC]
    inherited [MACINTOSH_DRIVERS && PPC]
    config WINDFARM_PM81 tristate {
     prompt "Support for thermal management on iMac G5" if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     depends on [WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     select I2C_POWERMAC if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     inherited [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    }
    config WINDFARM_PM91 tristate {
     prompt "Support for thermal management on PowerMac9,1" if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     depends on [WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     select I2C_POWERMAC if [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
     inherited [MACINTOSH_DRIVERS && WINDFARM && I2C && CPU_FREQ_PMAC64 && PMAC_SMU]
    }
    config WINDFARM_PM112 tristate {
     prompt "Support for thermal management on PowerMac11,2" if [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
     depends on [WINDFARM && I2C && PMAC_SMU]
     select I2C_POWERMAC if [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
     inherited [MACINTOSH_DRIVERS && WINDFARM && I2C && PMAC_SMU]
    }
   }
   config ANSLCD tristate {
    prompt "Support for ANS LCD display" if [MACINTOSH_DRIVERS && ADB_CUDA && PPC_PMAC]
    depends on [ADB_CUDA && PPC_PMAC]
    inherited [MACINTOSH_DRIVERS && ADB_CUDA && PPC_PMAC]
   }
   config PMAC_RACKMETER tristate {
    prompt "Support for Apple XServe front panel LEDs" if [MACINTOSH_DRIVERS && PPC_PMAC]
    depends on [PPC_PMAC]
    inherited [MACINTOSH_DRIVERS && PPC_PMAC]
   }
  }
 }
 menuconfig NETDEVICES boolean {
  default [y] if [NET && UML]
  depends on [NET]
  prompt "Network device support" if [NET]
  inherited [NET]
  if [NETDEVICES] {
   config NETDEVICES_MULTIQUEUE boolean {
    prompt "Netdevice multiple hardware queue support" if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config IFB tristate {
    prompt "Intermediate Functional Block support" if [NETDEVICES && NET_CLS_ACT]
    depends on [NET_CLS_ACT]
    inherited [NETDEVICES && NET_CLS_ACT]
   }
   config DUMMY tristate {
    prompt "Dummy net driver support" if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config BONDING tristate {
    prompt "Bonding driver support" if [NETDEVICES && INET]
    depends on [INET]
    inherited [NETDEVICES && INET]
   }
   config MACVLAN tristate {
    prompt "MAC-VLAN support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NETDEVICES && EXPERIMENTAL]
   }
   config EQUALIZER tristate {
    prompt "EQL (serial line load balancing) support" if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config TUN tristate {
    prompt "Universal TUN/TAP device driver support" if [NETDEVICES]
    select CRC32 if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config VETH tristate {
    prompt "Virtual ethernet pair device" if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config NET_SB1000 tristate {
    prompt "General Instruments Surfboard 1000" if [NETDEVICES && PNP]
    depends on [PNP]
    inherited [NETDEVICES && PNP]
   }
   menuconfig ARCNET tristate {
    depends on [NETDEVICES && (ISA || PCI)]
    prompt "ARCnet support" if [NETDEVICES && (ISA || PCI)]
    inherited [NETDEVICES && (ISA || PCI)]
    if [NETDEVICES && ARCNET] {
     config ARCNET_1201 tristate {
      prompt "Enable standard ARCNet packet format (RFC 1201)" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_1051 tristate {
      prompt "Enable old ARCNet packet format (RFC 1051)" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_RAW tristate {
      prompt "Enable raw mode packet interface" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_CAP tristate {
      prompt "Enable CAP mode packet interface" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_COM90xx tristate {
      prompt "ARCnet COM90xx (normal) chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_COM90xxIO tristate {
      prompt "ARCnet COM90xx (IO mapped) chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_RIM_I tristate {
      prompt "ARCnet COM90xx (RIM I) chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
     }
     config ARCNET_COM20020 tristate {
      prompt "ARCnet COM20020 chipset driver" if [NETDEVICES && ARCNET]
      inherited [NETDEVICES && ARCNET]
      config ARCNET_COM20020_ISA tristate {
       prompt "Support for COM20020 on ISA" if [NETDEVICES && ARCNET && ARCNET_COM20020 && ISA]
       depends on [ARCNET_COM20020 && ISA]
       inherited [NETDEVICES && ARCNET && ARCNET_COM20020 && ISA]
      }
      config ARCNET_COM20020_PCI tristate {
       prompt "Support for COM20020 on PCI" if [NETDEVICES && ARCNET && ARCNET_COM20020 && PCI]
       depends on [ARCNET_COM20020 && PCI]
       inherited [NETDEVICES && ARCNET && ARCNET_COM20020 && PCI]
      }
     }
    }
   }
   menuconfig PHYLIB tristate {
    prompt "PHY Device support and infrastructure" if [NETDEVICES && !S390 && NET_ETHERNET && (BROKEN || !S390)]
    depends on [!S390]
    depends on [NET_ETHERNET && (BROKEN || !S390)]
    inherited [NETDEVICES && !S390 && NET_ETHERNET && (BROKEN || !S390)]
    if [NETDEVICES && PHYLIB] {
     config MARVELL_PHY tristate {
      prompt "Drivers for Marvell PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config DAVICOM_PHY tristate {
      prompt "Drivers for Davicom PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config QSEMI_PHY tristate {
      prompt "Drivers for Quality Semiconductor PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config LXT_PHY tristate {
      prompt "Drivers for the Intel LXT PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config CICADA_PHY tristate {
      prompt "Drivers for the Cicada PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config VITESSE_PHY tristate {
      prompt "Drivers for the Vitesse PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config SMSC_PHY tristate {
      prompt "Drivers for SMSC PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config BROADCOM_PHY tristate {
      prompt "Drivers for Broadcom PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config ICPLUS_PHY tristate {
      prompt "Drivers for ICPlus PHYs" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
     config FIXED_PHY tristate {
      prompt "Drivers for PHY emulation on fixed speed/link" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
      config FIXED_MII_10_FDX boolean {
       prompt "Emulation for 10M Fdx fixed PHY behavior" if [NETDEVICES && PHYLIB && FIXED_PHY]
       depends on [FIXED_PHY]
       inherited [NETDEVICES && PHYLIB && FIXED_PHY]
      }
      config FIXED_MII_100_FDX boolean {
       prompt "Emulation for 100M Fdx fixed PHY behavior" if [NETDEVICES && PHYLIB && FIXED_PHY]
       depends on [FIXED_PHY]
       inherited [NETDEVICES && PHYLIB && FIXED_PHY]
      }
      config FIXED_MII_1000_FDX boolean {
       prompt "Emulation for 1000M Fdx fixed PHY behavior" if [NETDEVICES && PHYLIB && FIXED_PHY]
       depends on [FIXED_PHY]
       inherited [NETDEVICES && PHYLIB && FIXED_PHY]
      }
      config FIXED_MII_AMNT integer {
       prompt "Number of emulated PHYs to allocate " if [NETDEVICES && PHYLIB && FIXED_PHY]
       depends on [FIXED_PHY]
       default [1] if [NETDEVICES && PHYLIB && FIXED_PHY]
       inherited [NETDEVICES && PHYLIB && FIXED_PHY]
      }
     }
     config MDIO_BITBANG tristate {
      prompt "Support for bitbanged MDIO buses" if [NETDEVICES && PHYLIB]
      inherited [NETDEVICES && PHYLIB]
     }
    }
   }
   menuconfig NET_ETHERNET boolean {
    prompt "Ethernet (10 or 100Mbit)" if [NETDEVICES && !UML]
    depends on [!UML]
    inherited [NETDEVICES && !UML]
    if [NETDEVICES && NET_ETHERNET] {
     config MII tristate {
      prompt "Generic Media Independent Interface device support" if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config MACB tristate {
      prompt "Atmel MACB support" if [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263)]
      depends on [AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263)]
      inherited [NETDEVICES && NET_ETHERNET && (AVR32 || ARCH_AT91SAM9260 || ARCH_AT91SAM9263)]
     }
     config ARM_AM79C961A boolean {
      prompt "ARM EBSA110 AM79C961A support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
      depends on [ARM && ARCH_EBSA110]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_EBSA110]
     }
     config ARM_ETHER1 tristate {
      prompt "Acorn Ether1 support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     }
     config ARM_ETHER3 tristate {
      prompt "Acorn/ANT Ether3 support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     }
     config ARM_ETHERH tristate {
      prompt "I-cubed EtherH/ANT EtherM support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      depends on [ARM && ARCH_ACORN]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_ACORN]
     }
     config ARM_AT91_ETHER tristate {
      prompt "AT91RM9200 Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
      depends on [ARM && ARCH_AT91RM9200]
      select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_AT91RM9200]
     }
     config EP93XX_ETH tristate {
      prompt "EP93xx Ethernet support" if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
      depends on [ARM && ARCH_EP93XX]
      select MII if [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
      inherited [NETDEVICES && NET_ETHERNET && ARM && ARCH_EP93XX]
     }
     config AX88796 tristate {
      prompt "ASIX AX88796 NE2000 clone support" if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      depends on [ARM || MIPS || SUPERH]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || MIPS || SUPERH)]
      config AX88796_93CX6 boolean {
       prompt "ASIX AX88796 external 93CX6 eeprom support" if [NETDEVICES && NET_ETHERNET && AX88796]
       depends on [AX88796]
       select EEPROM_93CX6 if [NETDEVICES && NET_ETHERNET && AX88796]
       inherited [NETDEVICES && NET_ETHERNET && AX88796]
      }
     }
     config MACE tristate {
      prompt "MACE (Power Mac ethernet) support" if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      depends on [PPC_PMAC && PPC32]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      inherited [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      config MACE_AAUI_PORT boolean {
       prompt "Use AAUI port instead of TP by default" if [NETDEVICES && NET_ETHERNET && MACE]
       depends on [MACE]
       inherited [NETDEVICES && NET_ETHERNET && MACE]
      }
     }
     config BMAC tristate {
      prompt "BMAC (G3 ethernet) support" if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      depends on [PPC_PMAC && PPC32]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
      inherited [NETDEVICES && NET_ETHERNET && PPC_PMAC && PPC32]
     }
     config ARIADNE tristate {
      prompt "Ariadne support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config A2065 tristate {
      prompt "A2065 support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config HYDRA tristate {
      prompt "Hydra support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config ZORRO8390 tristate {
      prompt "Zorro NS8390-based Ethernet support" if [NETDEVICES && NET_ETHERNET && ZORRO]
      depends on [ZORRO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && ZORRO]
      inherited [NETDEVICES && NET_ETHERNET && ZORRO]
     }
     config APNE tristate {
      prompt "PCMCIA NE2000 support" if [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
      depends on [AMIGA_PCMCIA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
      inherited [NETDEVICES && NET_ETHERNET && AMIGA_PCMCIA]
     }
     config APOLLO_ELPLUS tristate {
      prompt "Apollo 3c505 support" if [NETDEVICES && NET_ETHERNET && APOLLO]
      depends on [APOLLO]
      inherited [NETDEVICES && NET_ETHERNET && APOLLO]
     }
     config MAC8390 boolean {
      prompt "Macintosh NS 8390 based ethernet cards" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MAC89x0 tristate {
      prompt "Macintosh CS89x0 based ethernet cards" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MACSONIC tristate {
      prompt "Macintosh SONIC based ethernet (onboard, NuBus, LC, CS)" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MACMACE boolean {
      prompt "Macintosh (AV) onboard MACE ethernet" if [NETDEVICES && NET_ETHERNET && MAC]
      depends on [MAC]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MAC]
      inherited [NETDEVICES && NET_ETHERNET && MAC]
     }
     config MVME147_NET tristate {
      prompt "MVME147 (Lance) Ethernet support" if [NETDEVICES && NET_ETHERNET && MVME147]
      depends on [MVME147]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MVME147]
      inherited [NETDEVICES && NET_ETHERNET && MVME147]
     }
     config MVME16x_NET tristate {
      prompt "MVME16x Ethernet support" if [NETDEVICES && NET_ETHERNET && MVME16x]
      depends on [MVME16x]
      inherited [NETDEVICES && NET_ETHERNET && MVME16x]
     }
     config BVME6000_NET tristate {
      prompt "BVME6000 Ethernet support" if [NETDEVICES && NET_ETHERNET && BVME6000]
      depends on [BVME6000]
      inherited [NETDEVICES && NET_ETHERNET && BVME6000]
     }
     config ATARILANCE tristate {
      prompt "Atari Lance support" if [NETDEVICES && NET_ETHERNET && ATARI]
      depends on [ATARI]
      inherited [NETDEVICES && NET_ETHERNET && ATARI]
     }
     config SUN3LANCE tristate {
      prompt "Sun3/Sun3x on-board LANCE support" if [NETDEVICES && NET_ETHERNET && (SUN3 || SUN3X)]
      depends on [SUN3 || SUN3X]
      inherited [NETDEVICES && NET_ETHERNET && (SUN3 || SUN3X)]
     }
     config SUN3_82586 boolean {
      prompt "Sun3 on-board Intel 82586 support" if [NETDEVICES && NET_ETHERNET && SUN3]
      depends on [SUN3]
      inherited [NETDEVICES && NET_ETHERNET && SUN3]
     }
     config HPLANCE boolean {
      prompt "HP on-board LANCE support" if [NETDEVICES && NET_ETHERNET && DIO]
      depends on [DIO]
      select CRC32 if [NETDEVICES && NET_ETHERNET && DIO]
      inherited [NETDEVICES && NET_ETHERNET && DIO]
     }
     config LASI_82596 tristate {
      prompt "Lasi ethernet" if [NETDEVICES && NET_ETHERNET && GSC]
      depends on [GSC]
      inherited [NETDEVICES && NET_ETHERNET && GSC]
     }
     config SNI_82596 tristate {
      prompt "SNI RM ethernet" if [NETDEVICES && NET_ETHERNET && SNI_RM]
      depends on [NET_ETHERNET && SNI_RM]
      inherited [NETDEVICES && NET_ETHERNET && SNI_RM]
     }
     config MIPS_JAZZ_SONIC tristate {
      prompt "MIPS JAZZ onboard SONIC Ethernet support" if [NETDEVICES && NET_ETHERNET && MACH_JAZZ]
      depends on [MACH_JAZZ]
      inherited [NETDEVICES && NET_ETHERNET && MACH_JAZZ]
     }
     config MIPS_AU1X00_ENET boolean {
      prompt "MIPS AU1000 Ethernet support" if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
      depends on [SOC_AU1X00]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
      inherited [NETDEVICES && NET_ETHERNET && SOC_AU1X00]
     }
     config SGI_IOC3_ETH boolean {
      prompt "SGI IOC3 Ethernet" if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
      depends on [PCI && SGI_IP27]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
      select MII if [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
      inherited [NETDEVICES && NET_ETHERNET && PCI && SGI_IP27]
     }
     config MIPS_SIM_NET tristate {
      prompt "MIPS simulator Network device" if [NETDEVICES && NET_ETHERNET && MIPS_SIM]
      depends on [MIPS_SIM]
      inherited [NETDEVICES && NET_ETHERNET && MIPS_SIM]
     }
     config SGI_O2MACE_ETH tristate {
      prompt "SGI O2 MACE Fast Ethernet support" if [NETDEVICES && NET_ETHERNET && SGI_IP32="y"]
      depends on [SGI_IP32="y"]
      inherited [NETDEVICES && NET_ETHERNET && SGI_IP32="y"]
     }
     config STNIC tristate {
      prompt "National DP83902AV  support" if [NETDEVICES && NET_ETHERNET && SUPERH]
      depends on [SUPERH]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SUPERH]
      inherited [NETDEVICES && NET_ETHERNET && SUPERH]
     }
     config SUNLANCE tristate {
      prompt "Sun LANCE support" if [NETDEVICES && NET_ETHERNET && SBUS]
      depends on [SBUS]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS]
      inherited [NETDEVICES && NET_ETHERNET && SBUS]
     }
     config HAPPYMEAL tristate {
      prompt "Sun Happy Meal 10/100baseT support" if [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
      depends on [SBUS || PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
      inherited [NETDEVICES && NET_ETHERNET && (SBUS || PCI)]
     }
     config SUNBMAC tristate {
      prompt "Sun BigMAC 10/100baseT support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
      depends on [SBUS && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && SBUS && EXPERIMENTAL]
     }
     config SUNQE tristate {
      prompt "Sun QuadEthernet support" if [NETDEVICES && NET_ETHERNET && SBUS]
      depends on [SBUS]
      select CRC32 if [NETDEVICES && NET_ETHERNET && SBUS]
      inherited [NETDEVICES && NET_ETHERNET && SBUS]
     }
     config SUNGEM tristate {
      prompt "Sun GEM support" if [NETDEVICES && NET_ETHERNET && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
      inherited [NETDEVICES && NET_ETHERNET && PCI]
     }
     config CASSINI tristate {
      prompt "Sun Cassini support" if [NETDEVICES && NET_ETHERNET && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PCI]
      inherited [NETDEVICES && NET_ETHERNET && PCI]
     }
     config SUNVNET tristate {
      prompt "Sun Virtual Network support" if [NETDEVICES && NET_ETHERNET && SUN_LDOMS]
      depends on [SUN_LDOMS]
      inherited [NETDEVICES && NET_ETHERNET && SUN_LDOMS]
     }
     config NET_VENDOR_3COM boolean {
      prompt "3COM cards" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
      depends on [ISA || EISA || MCA || PCI]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA || PCI)]
      config EL1 tristate {
       prompt "3c501 \"EtherLink\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
       depends on [NET_VENDOR_3COM && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
      }
      config EL2 tristate {
       prompt "3c503 \"EtherLink II\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
       depends on [NET_VENDOR_3COM && ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA]
      }
      config ELPLUS tristate {
       prompt "3c505 \"EtherLink Plus\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && ISA_DMA_API]
       depends on [NET_VENDOR_3COM && ISA && ISA_DMA_API]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && ISA_DMA_API]
      }
      config EL16 tristate {
       prompt "3c507 \"EtherLink 16\" support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
       depends on [NET_VENDOR_3COM && ISA && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && ISA && EXPERIMENTAL]
      }
      config EL3 tristate {
       prompt "3c509/3c529 (MCA)/3c579 \"EtherLink III\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA || MCA)]
       depends on [NET_VENDOR_3COM && (ISA || EISA || MCA)]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA || MCA)]
      }
      config 3C515 tristate {
       prompt "3c515 ISA \"Fast EtherLink\"" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
       depends on [NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (ISA || EISA) && ISA_DMA_API]
      }
      config ELMC tristate {
       prompt "3c523 \"EtherLink/MC\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA_LEGACY]
       depends on [NET_VENDOR_3COM && MCA_LEGACY]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA_LEGACY]
      }
      config ELMC_II tristate {
       prompt "3c527 \"EtherLink/MC 32\" support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA && MCA_LEGACY]
       depends on [NET_VENDOR_3COM && MCA && MCA_LEGACY]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && MCA && MCA_LEGACY]
      }
      config VORTEX tristate {
       prompt "3c590/3c900 series (592/595/597) \"Vortex/Boomerang\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
       depends on [NET_VENDOR_3COM && (PCI || EISA)]
       select MII if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && (PCI || EISA)]
      }
      config TYPHOON tristate {
       prompt "3cr990 series \"Typhoon\" support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
       depends on [NET_VENDOR_3COM && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_3COM && PCI]
      }
     }
     config LANCE tristate {
      prompt "AMD LANCE and PCnet (AT1500 and NE2100) support" if [NETDEVICES && NET_ETHERNET && ISA && ISA_DMA_API]
      depends on [ISA && ISA_DMA_API]
      inherited [NETDEVICES && NET_ETHERNET && ISA && ISA_DMA_API]
     }
     config NET_VENDOR_SMC boolean {
      prompt "Western Digital/SMC cards" if [NETDEVICES && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
      depends on [ISA || MCA || EISA || MAC]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || MCA || EISA || MAC)]
      config WD80x3 tristate {
       prompt "WD80*3 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       depends on [NET_VENDOR_SMC && ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      }
      config ULTRAMCA tristate {
       prompt "SMC Ultra MCA support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
       depends on [NET_VENDOR_SMC && MCA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && MCA]
      }
      config ULTRA tristate {
       prompt "SMC Ultra support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       depends on [NET_VENDOR_SMC && ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && ISA]
      }
      config ULTRA32 tristate {
       prompt "SMC Ultra32 EISA support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
       depends on [NET_VENDOR_SMC && EISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && EISA]
      }
     }
     config BFIN_MAC tristate {
      prompt "Blackfin 536/537 on-chip mac support" if [NETDEVICES && NET_ETHERNET && (BF537 || BF536) && !BF537_PORT_H]
      depends on [NET_ETHERNET && (BF537 || BF536) && !BF537_PORT_H]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (BF537 || BF536) && !BF537_PORT_H]
      select MII if [NETDEVICES && NET_ETHERNET && (BF537 || BF536) && !BF537_PORT_H]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && (BF537 || BF536) && !BF537_PORT_H]
      select BFIN_MAC_USE_L1 if [NETDEVICES && NET_ETHERNET && (BF537 || BF536) && !BF537_PORT_H && DMA_UNCACHED_NONE]
      inherited [NETDEVICES && NET_ETHERNET && (BF537 || BF536) && !BF537_PORT_H]
      config BFIN_MAC_USE_L1 boolean {
       prompt "Use L1 memory for rx/tx packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BF537]
       depends on [BFIN_MAC && BF537]
       default [y] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BF537]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC && BF537]
      }
      config BFIN_TX_DESC_NUM integer {
       prompt "Number of transmit buffer packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       depends on [BFIN_MAC]
       range [6 10] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BFIN_MAC_USE_L1]
       range [10 100] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       default [10] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      }
      config BFIN_RX_DESC_NUM integer {
       prompt "Number of receive buffer packets" if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       depends on [BFIN_MAC]
       range [20 100] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && BFIN_MAC_USE_L1]
       range [20 800] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       default [20] if [NETDEVICES && NET_ETHERNET && BFIN_MAC]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC]
      }
      config BFIN_MAC_RMII boolean {
       prompt "RMII PHY Interface (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL]
       depends on [BFIN_MAC && EXPERIMENTAL]
       default [n] if [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && BFIN_MAC && EXPERIMENTAL]
      }
     }
     config SMC9194 tristate {
      prompt "SMC 9194 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      depends on [NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
      inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_SMC && (ISA || MAC && BROKEN)]
     }
     config SMC91X tristate {
      prompt "SMC 91C9x/91C1xxx support" if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00 || BLACKFIN)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00 || BLACKFIN)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00 || BLACKFIN)]
      depends on [ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00 || BLACKFIN]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || REDWOOD_5 || REDWOOD_6 || M32R || SUPERH || SOC_AU1X00 || BLACKFIN)]
     }
     config NET_NETX tristate {
      prompt "NetX Ethernet support" if [NETDEVICES && NET_ETHERNET && ARCH_NETX]
      select MII if [NETDEVICES && NET_ETHERNET && ARCH_NETX]
      depends on [ARCH_NETX]
      inherited [NETDEVICES && NET_ETHERNET && ARCH_NETX]
     }
     config DM9000 tristate {
      prompt "DM9000 support" if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
      depends on [ARM || BLACKFIN || MIPS]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
      inherited [NETDEVICES && NET_ETHERNET && (ARM || BLACKFIN || MIPS)]
     }
     config SMC911X tristate {
      prompt "SMSC LAN911[5678] support" if [NETDEVICES && NET_ETHERNET && (ARCH_PXA || SH_MAGIC_PANEL_R2)]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ARCH_PXA || SH_MAGIC_PANEL_R2)]
      select MII if [NETDEVICES && NET_ETHERNET && (ARCH_PXA || SH_MAGIC_PANEL_R2)]
      depends on [ARCH_PXA || SH_MAGIC_PANEL_R2]
      inherited [NETDEVICES && NET_ETHERNET && (ARCH_PXA || SH_MAGIC_PANEL_R2)]
     }
     config NET_VENDOR_RACAL boolean {
      prompt "Racal-Interlan (Micom) NI cards" if [NETDEVICES && NET_ETHERNET && ISA]
      depends on [ISA]
      inherited [NETDEVICES && NET_ETHERNET && ISA]
      config NI5010 tristate {
       prompt "NI5010 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
       depends on [NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && EXPERIMENTAL && BROKEN_ON_SMP]
      }
      config NI52 tristate {
       prompt "NI5210 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA]
       depends on [NET_VENDOR_RACAL && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA]
      }
      config NI65 tristate {
       prompt "NI6510 support" if [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
       depends on [NET_VENDOR_RACAL && ISA && ISA_DMA_API]
       inherited [NETDEVICES && NET_ETHERNET && NET_VENDOR_RACAL && ISA && ISA_DMA_API]
      }
     }
     menuconfig NET_TULIP boolean {
      prompt "\"Tulip\" family network device support" if [NETDEVICES && NET_ETHERNET && (PCI || EISA || CARDBUS)]
      depends on [PCI || EISA || CARDBUS]
      inherited [NETDEVICES && NET_ETHERNET && (PCI || EISA || CARDBUS)]
      if [NETDEVICES && NET_ETHERNET && NET_TULIP] {
       config DE2104X tristate {
        prompt "Early DECchip Tulip (dc2104x) PCI support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
        depends on [PCI && EXPERIMENTAL]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI && EXPERIMENTAL]
       }
       config TULIP tristate {
        prompt "DECchip Tulip (dc2114x) PCI support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        config TULIP_MWI boolean {
         prompt "New bus configuration (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && EXPERIMENTAL]
         depends on [TULIP && EXPERIMENTAL]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP && EXPERIMENTAL]
        }
        config TULIP_MMIO boolean {
         prompt "Use PCI shared mem for NIC registers" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
         depends on [TULIP]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
        }
        config TULIP_NAPI boolean {
         prompt "Use RX polling (NAPI)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
         depends on [TULIP]
         inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP]
         config TULIP_NAPI_HW_MITIGATION boolean {
          prompt "Use Interrupt Mitigation" if [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP_NAPI]
          depends on [TULIP_NAPI]
          inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && TULIP_NAPI]
         }
        }
       }
       config DE4X5 tristate {
        prompt "Generic DECchip & DIGITAL EtherWORKS PCI/EISA" if [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
        depends on [PCI || EISA]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && (PCI || EISA)]
       }
       config WINBOND_840 tristate {
        prompt "Winbond W89c840 Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        select MII if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       }
       config DM9102 tristate {
        prompt "Davicom DM910x/DM980x support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       }
       config ULI526X tristate {
        prompt "ULi M526x controller support" if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        depends on [PCI]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && PCI]
       }
       config PCMCIA_XIRCOM tristate {
        prompt "Xircom CardBus support (new driver)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS]
        depends on [CARDBUS]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS]
       }
       config PCMCIA_XIRTULIP tristate {
        prompt "Xircom Tulip-like CardBus support (old driver)" if [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS && BROKEN_ON_SMP]
        depends on [CARDBUS && BROKEN_ON_SMP]
        select CRC32 if [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS && BROKEN_ON_SMP]
        inherited [NETDEVICES && NET_ETHERNET && NET_TULIP && CARDBUS && BROKEN_ON_SMP]
       }
      }
     }
     config AT1700 tristate {
      prompt "AT1700/1720 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
      depends on [(ISA || MCA_LEGACY) && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || MCA_LEGACY) && EXPERIMENTAL]
     }
     config DEPCA tristate {
      prompt "DEPCA, DE10x, DE200, DE201, DE202, DE422 support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
      depends on [ISA || EISA || MCA]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || MCA)]
     }
     config HP100 tristate {
      prompt "HP 10/100VG PCLAN (ISA, EISA, PCI) support" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
      depends on [ISA || EISA || PCI]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
     }
     config NET_ISA boolean {
      prompt "Other ISA cards" if [NETDEVICES && NET_ETHERNET && ISA]
      depends on [ISA]
      inherited [NETDEVICES && NET_ETHERNET && ISA]
      config E2100 tristate {
       prompt "Cabletron E21xx support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config EWRK3 tristate {
       prompt "EtherWORKS 3 (DE203, DE204, DE205) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config EEXPRESS tristate {
       prompt "EtherExpress 16 support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config EEXPRESS_PRO tristate {
       prompt "EtherExpressPro support/EtherExpress 10 (i82595) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config HPLAN_PLUS tristate {
       prompt "HP PCLAN+ (27247B and 27252A) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config HPLAN tristate {
       prompt "HP PCLAN (27245 and other 27xxx series) support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config LP486E tristate {
       prompt "LP486E on board Ethernet" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
      config ETH16I tristate {
       prompt "ICL EtherTeam 16i/32 support" if [NETDEVICES && NET_ETHERNET && NET_ISA]
       depends on [NET_ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_ISA]
      }
     }
     config NE2000 tristate {
      prompt "NE2000/NE1000 support" if [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || TOSHIBA_RBTX4927 || TOSHIBA_RBTX4938)]
      depends on [NET_ISA || Q40 && m || M32R || TOSHIBA_RBTX4927 || TOSHIBA_RBTX4938]
      select CRC32 if [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || TOSHIBA_RBTX4927 || TOSHIBA_RBTX4938)]
      inherited [NETDEVICES && NET_ETHERNET && (NET_ISA || Q40 && m && <choice> || M32R || TOSHIBA_RBTX4927 || TOSHIBA_RBTX4938)]
     }
     config ZNET tristate {
      prompt "Zenith Z-Note support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
      depends on [NET_ISA && EXPERIMENTAL && ISA_DMA_API]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL && ISA_DMA_API]
     }
     config SEEQ8005 tristate {
      prompt "SEEQ8005 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL]
      depends on [NET_ISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_ISA && EXPERIMENTAL]
     }
     config NE2_MCA tristate {
      prompt "NE/2 (ne2000 MCA version) support" if [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
      depends on [MCA_LEGACY]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
      inherited [NETDEVICES && NET_ETHERNET && MCA_LEGACY]
     }
     config IBMLANA tristate {
      prompt "IBM LAN Adapter/A support" if [NETDEVICES && NET_ETHERNET && MCA && MCA_LEGACY]
      depends on [MCA && MCA_LEGACY]
      inherited [NETDEVICES && NET_ETHERNET && MCA && MCA_LEGACY]
     }
     config IBMVETH tristate {
      prompt "IBM LAN Virtual Ethernet support" if [NETDEVICES && NET_ETHERNET && PPC_PSERIES]
      depends on [PPC_PSERIES]
      inherited [NETDEVICES && NET_ETHERNET && PPC_PSERIES]
     }
     config IBM_EMAC tristate {
      prompt "PowerPC 4xx on-chip Ethernet support" if [NETDEVICES && NET_ETHERNET && 4xx && !PPC_MERGE]
      depends on [4xx && !PPC_MERGE]
      inherited [NETDEVICES && NET_ETHERNET && 4xx && !PPC_MERGE]
      config IBM_EMAC_RXB integer {
       prompt "Number of receive buffers" if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       depends on [IBM_EMAC]
       default [128] if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC]
      }
      config IBM_EMAC_TXB integer {
       prompt "Number of transmit buffers" if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       depends on [IBM_EMAC]
       default [64] if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC]
      }
      config IBM_EMAC_POLL_WEIGHT integer {
       prompt "MAL NAPI polling weight" if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       depends on [IBM_EMAC]
       default [32] if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC]
      }
      config IBM_EMAC_RX_COPY_THRESHOLD integer {
       prompt "RX skb copy threshold (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       depends on [IBM_EMAC]
       default [256] if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC]
      }
      config IBM_EMAC_RX_SKB_HEADROOM integer {
       prompt "Additional RX skb headroom (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       depends on [IBM_EMAC]
       default [0] if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC]
      }
      config IBM_EMAC_PHY_RX_CLK_FIX boolean {
       prompt "PHY Rx clock workaround" if [NETDEVICES && NET_ETHERNET && IBM_EMAC && (405EP || 440GX || 440EP || 440GR)]
       depends on [IBM_EMAC && (405EP || 440GX || 440EP || 440GR)]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC && (405EP || 440GX || 440EP || 440GR)]
      }
      config IBM_EMAC_DEBUG boolean {
       prompt "Debugging" if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       depends on [IBM_EMAC]
       default [n] if [NETDEVICES && NET_ETHERNET && IBM_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC]
      }
      config IBM_EMAC_ZMII boolean {
       depends on [IBM_EMAC && (NP405H || NP405L || 44x)]
       default [y] if [NETDEVICES && NET_ETHERNET && IBM_EMAC && (NP405H || NP405L || 44x)]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC && (NP405H || NP405L || 44x)]
      }
      config IBM_EMAC_RGMII boolean {
       depends on [IBM_EMAC && 440GX]
       default [y] if [NETDEVICES && NET_ETHERNET && IBM_EMAC && 440GX]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC && 440GX]
      }
      config IBM_EMAC_TAH boolean {
       depends on [IBM_EMAC && 440GX]
       default [y] if [NETDEVICES && NET_ETHERNET && IBM_EMAC && 440GX]
       inherited [NETDEVICES && NET_ETHERNET && IBM_EMAC && 440GX]
      }
     }
     config IBM_NEW_EMAC tristate {
      prompt "IBM EMAC Ethernet support" if [NETDEVICES && NET_ETHERNET && PPC_DCR && PPC_MERGE]
      depends on [PPC_DCR && PPC_MERGE]
      inherited [NETDEVICES && NET_ETHERNET && PPC_DCR && PPC_MERGE]
      config IBM_NEW_EMAC_RXB integer {
       prompt "Number of receive buffers" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [128] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_TXB integer {
       prompt "Number of transmit buffers" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [64] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_POLL_WEIGHT integer {
       prompt "MAL NAPI polling weight" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [32] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_RX_COPY_THRESHOLD integer {
       prompt "RX skb copy threshold (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [256] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_RX_SKB_HEADROOM integer {
       prompt "Additional RX skb headroom (bytes)" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [0] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
      config IBM_NEW_EMAC_DEBUG boolean {
       prompt "Debugging" if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       depends on [IBM_NEW_EMAC]
       default [n] if [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
       inherited [NETDEVICES && NET_ETHERNET && IBM_NEW_EMAC]
      }
     }
     config IBM_NEW_EMAC_ZMII boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_RGMII boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_TAH boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config IBM_NEW_EMAC_EMAC4 boolean {
      default [n] if [NETDEVICES && NET_ETHERNET]
      inherited [NETDEVICES && NET_ETHERNET]
     }
     config NET_PCI boolean {
      prompt "EISA, VLB, PCI and on board controllers" if [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
      depends on [ISA || EISA || PCI]
      inherited [NETDEVICES && NET_ETHERNET && (ISA || EISA || PCI)]
      config PCNET32 tristate {
       prompt "AMD PCnet32 PCI support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       config PCNET32_NAPI boolean {
        prompt "Use RX polling (NAPI)" if [NETDEVICES && NET_ETHERNET && PCNET32]
        depends on [PCNET32]
        inherited [NETDEVICES && NET_ETHERNET && PCNET32]
       }
      }
      config AMD8111_ETH tristate {
       prompt "AMD 8111 (new PCI lance) support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       config AMD8111E_NAPI boolean {
        prompt "Use RX polling (NAPI)" if [NETDEVICES && NET_ETHERNET && AMD8111_ETH]
        depends on [AMD8111_ETH]
        inherited [NETDEVICES && NET_ETHERNET && AMD8111_ETH]
       }
      }
      config ADAPTEC_STARFIRE tristate {
       prompt "Adaptec Starfire/DuraLAN support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       depends on [NET_PCI && PCI]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
       config ADAPTEC_STARFIRE_NAPI boolean {
        prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && ADAPTEC_STARFIRE && EXPERIMENTAL]
        depends on [ADAPTEC_STARFIRE && EXPERIMENTAL]
        inherited [NETDEVICES && NET_ETHERNET && ADAPTEC_STARFIRE && EXPERIMENTAL]
       }
      }
      config AC3200 tristate {
       prompt "Ansel Communications EISA 3200 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       depends on [NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || EISA) && EXPERIMENTAL]
      }
      config APRICOT tristate {
       prompt "Apricot Xen-II on board Ethernet" if [NETDEVICES && NET_ETHERNET && NET_PCI && ISA]
       depends on [NET_PCI && ISA]
       inherited [NETDEVICES && NET_ETHERNET && NET_PCI && ISA]
      }
     }
     config B44 tristate {
      prompt "Broadcom 440x/47xx ethernet support" if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE]
      depends on [SSB_POSSIBLE]
      select SSB if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE]
      select MII if [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE]
      inherited [NETDEVICES && NET_ETHERNET && SSB_POSSIBLE]
      config B44_PCI_AUTOSELECT boolean {
       depends on [B44 && SSB_PCIHOST_POSSIBLE]
       select SSB_PCIHOST if [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
       default [y] if [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
       inherited [NETDEVICES && NET_ETHERNET && B44 && SSB_PCIHOST_POSSIBLE]
      }
      config B44_PCICORE_AUTOSELECT boolean {
       depends on [B44 && SSB_DRIVER_PCICORE_POSSIBLE]
       select SSB_DRIVER_PCICORE if [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
       default [y] if [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
       inherited [NETDEVICES && NET_ETHERNET && B44 && SSB_DRIVER_PCICORE_POSSIBLE]
      }
      config B44_PCI boolean {
       depends on [B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
       default [y] if [NETDEVICES && NET_ETHERNET && B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
       inherited [NETDEVICES && NET_ETHERNET && B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT]
      }
     }
     config FORCEDETH tristate {
      prompt "nForce Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config FORCEDETH_NAPI boolean {
       prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && FORCEDETH && EXPERIMENTAL]
       depends on [FORCEDETH && EXPERIMENTAL]
       inherited [NETDEVICES && NET_ETHERNET && FORCEDETH && EXPERIMENTAL]
      }
     }
     config CS89x0 tristate {
      prompt "CS89x0 support" if [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X)]
      depends on [NET_PCI && (ISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X)]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && (ISA || MACH_IXDP2351 || ARCH_IXDP2X01 || ARCH_PNX010X)]
     }
     config TC35815 tristate {
      prompt "TOSHIBA TC35815 Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
      depends on [NET_PCI && PCI && MIPS]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS]
     }
     config EEPRO100 tristate {
      prompt "EtherExpressPro/100 support (eepro100, original Becker driver)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config E100 tristate {
      prompt "Intel(R) PRO/100+ support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config LNE390 tristate {
      prompt "Mylex EISA LNE390A/B support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      depends on [NET_PCI && EISA && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     }
     config FEALNX tristate {
      prompt "Myson MTD-8xx PCI Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config NATSEMI tristate {
      prompt "National Semiconductor DP8381x series PCI Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config NE2K_PCI tristate {
      prompt "PCI NE2000 and clones support (see help)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config NE3210 tristate {
      prompt "Novell/Eagle/Microdyne NE3210 EISA support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      depends on [NET_PCI && EISA && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     }
     config ES3210 tristate {
      prompt "Racal-Interlan EISA ES3210 support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      depends on [NET_PCI && EISA && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && EISA && EXPERIMENTAL]
     }
     config 8139CP tristate {
      prompt "RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      depends on [NET_PCI && PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     }
     config 8139TOO tristate {
      prompt "RealTek RTL-8129/8130/8139 PCI Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config 8139TOO_PIO boolean {
       prompt "Use PIO instead of MMIO" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       default [y] if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
      config 8139TOO_TUNE_TWISTER boolean {
       prompt "Support for uncommon RTL-8139 rev. K (automatic channel equalization)" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
      config 8139TOO_8129 boolean {
       prompt "Support for older RTL-8129/8130 boards" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
      config 8139_OLD_RX_RESET boolean {
       prompt "Use older RX-reset method" if [NETDEVICES && NET_ETHERNET && 8139TOO]
       depends on [8139TOO]
       inherited [NETDEVICES && NET_ETHERNET && 8139TOO]
      }
     }
     config SIS900 tristate {
      prompt "SiS 900/7016 PCI Fast Ethernet Adapter support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config EPIC100 tristate {
      prompt "SMC EtherPower II" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
     }
     config SUNDANCE tristate {
      prompt "Sundance Alta support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config SUNDANCE_MMIO boolean {
       prompt "Use MMIO instead of PIO" if [NETDEVICES && NET_ETHERNET && SUNDANCE]
       depends on [SUNDANCE]
       inherited [NETDEVICES && NET_ETHERNET && SUNDANCE]
      }
     }
     config TLAN tristate {
      prompt "TI ThunderLAN support" if [NETDEVICES && NET_ETHERNET && NET_PCI && (PCI || EISA) && !64BIT]
      depends on [NET_PCI && (PCI || EISA) && !64BIT]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && (PCI || EISA) && !64BIT]
     }
     config VIA_RHINE tristate {
      prompt "VIA Rhine support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      depends on [NET_PCI && PCI]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      select MII if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI]
      config VIA_RHINE_MMIO boolean {
       prompt "Use MMIO instead of PIO" if [NETDEVICES && NET_ETHERNET && VIA_RHINE]
       depends on [VIA_RHINE]
       inherited [NETDEVICES && NET_ETHERNET && VIA_RHINE]
      }
      config VIA_RHINE_NAPI boolean {
       prompt "Use Rx Polling (NAPI)" if [NETDEVICES && NET_ETHERNET && VIA_RHINE]
       depends on [VIA_RHINE]
       inherited [NETDEVICES && NET_ETHERNET && VIA_RHINE]
      }
     }
     config LAN_SAA9730 boolean {
      prompt "Philips SAA9730 Ethernet support" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS_ATLAS]
      depends on [NET_PCI && PCI && MIPS_ATLAS]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && MIPS_ATLAS]
     }
     config SC92031 tristate {
      prompt "Silan SC92031 PCI Fast Ethernet Adapter driver (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      depends on [NET_PCI && PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NET_ETHERNET && NET_PCI && PCI && EXPERIMENTAL]
     }
     config CPMAC tristate {
      prompt "TI AR7 CPMAC Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
      depends on [NET_ETHERNET && EXPERIMENTAL && AR7]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
      select FIXED_PHY if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
      select FIXED_MII_100_FDX if [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
      inherited [NETDEVICES && NET_ETHERNET && EXPERIMENTAL && AR7]
     }
     config NET_POCKET boolean {
      prompt "Pocket and portable adapters" if [NETDEVICES && NET_ETHERNET && PARPORT]
      depends on [PARPORT]
      inherited [NETDEVICES && NET_ETHERNET && PARPORT]
      config ATP tristate {
       prompt "AT-LAN-TEC/RealTek pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
       depends on [NET_POCKET && PARPORT && X86]
       select CRC32 if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
       inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT && X86]
      }
      config DE600 tristate {
       prompt "D-Link DE600 pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
       depends on [NET_POCKET && PARPORT]
       inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
      }
      config DE620 tristate {
       prompt "D-Link DE620 pocket adapter support" if [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
       depends on [NET_POCKET && PARPORT]
       inherited [NETDEVICES && NET_ETHERNET && NET_POCKET && PARPORT]
      }
     }
     config SGISEEQ tristate {
      prompt "SGI Seeq ethernet controller support" if [NETDEVICES && NET_ETHERNET && SGI_IP22]
      depends on [SGI_IP22]
      inherited [NETDEVICES && NET_ETHERNET && SGI_IP22]
     }
     config DECLANCE tristate {
      prompt "DEC LANCE ethernet controller support" if [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
      depends on [MACH_DECSTATION]
      select CRC32 if [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
      inherited [NETDEVICES && NET_ETHERNET && MACH_DECSTATION]
     }
     config 68360_ENET boolean {
      prompt "Motorola 68360 ethernet controller" if [NETDEVICES && NET_ETHERNET && M68360]
      depends on [M68360]
      inherited [NETDEVICES && NET_ETHERNET && M68360]
     }
     config FEC boolean {
      prompt "FEC ethernet controller (of ColdFire CPUs)" if [NETDEVICES && NET_ETHERNET && (M523x || M527x || M5272 || M528x || M520x)]
      depends on [M523x || M527x || M5272 || M528x || M520x]
      inherited [NETDEVICES && NET_ETHERNET && (M523x || M527x || M5272 || M528x || M520x)]
      config FEC2 boolean {
       prompt "Second FEC ethernet controller (on some ColdFire CPUs)" if [NETDEVICES && NET_ETHERNET && FEC]
       depends on [FEC]
       inherited [NETDEVICES && NET_ETHERNET && FEC]
      }
     }
     config FEC_MPC52xx tristate {
      prompt "MPC52xx FEC driver" if [NETDEVICES && NET_ETHERNET && PPC_MERGE && PPC_MPC52xx && PPC_BESTCOMM_FEC]
      depends on [PPC_MERGE && PPC_MPC52xx && PPC_BESTCOMM_FEC]
      select CRC32 if [NETDEVICES && NET_ETHERNET && PPC_MERGE && PPC_MPC52xx && PPC_BESTCOMM_FEC]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && PPC_MERGE && PPC_MPC52xx && PPC_BESTCOMM_FEC]
      inherited [NETDEVICES && NET_ETHERNET && PPC_MERGE && PPC_MPC52xx && PPC_BESTCOMM_FEC]
      config FEC_MPC52xx_MDIO boolean {
       prompt "MPC52xx FEC MDIO bus driver" if [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
       depends on [FEC_MPC52xx]
       default [y] if [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
       inherited [NETDEVICES && NET_ETHERNET && FEC_MPC52xx]
      }
     }
     config NE_H8300 tristate {
      prompt "NE2000 compatible support for H8/300" if [NETDEVICES && NET_ETHERNET && H8300]
      depends on [H8300]
      inherited [NETDEVICES && NET_ETHERNET && H8300]
     }
     config FEC_8XX tristate {
      prompt "Motorola 8xx FEC driver" if [NETDEVICES && NET_ETHERNET && 8XX]
      depends on [8XX]
      select MII if [NETDEVICES && NET_ETHERNET && 8XX]
      inherited [NETDEVICES && NET_ETHERNET && 8XX]
      config FEC_8XX_GENERIC_PHY boolean {
       prompt "Support any generic PHY" if [NETDEVICES && NET_ETHERNET && FEC_8XX]
       depends on [FEC_8XX]
       default [y] if [NETDEVICES && NET_ETHERNET && FEC_8XX]
       inherited [NETDEVICES && NET_ETHERNET && FEC_8XX]
      }
      config FEC_8XX_DM9161_PHY boolean {
       prompt "Support DM9161 PHY" if [NETDEVICES && NET_ETHERNET && FEC_8XX]
       depends on [FEC_8XX]
       default [n] if [NETDEVICES && NET_ETHERNET && FEC_8XX]
       inherited [NETDEVICES && NET_ETHERNET && FEC_8XX]
      }
      config FEC_8XX_LXT971_PHY boolean {
       prompt "Support LXT971/LXT972 PHY" if [NETDEVICES && NET_ETHERNET && FEC_8XX]
       depends on [FEC_8XX]
       default [n] if [NETDEVICES && NET_ETHERNET && FEC_8XX]
       inherited [NETDEVICES && NET_ETHERNET && FEC_8XX]
      }
     }
     config FS_ENET tristate {
      prompt "Freescale Ethernet Driver" if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      depends on [CPM1 || CPM2]
      select MII if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      select PHYLIB if [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      inherited [NETDEVICES && NET_ETHERNET && (CPM1 || CPM2)]
      config FS_ENET_HAS_SCC boolean {
       prompt "Chip has an SCC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
       depends on [FS_ENET && (CPM1 || CPM2)]
       default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && (CPM1 || CPM2)]
      }
      config FS_ENET_HAS_FCC boolean {
       prompt "Chip has an FCC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       depends on [FS_ENET && CPM2]
       default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      }
      config FS_ENET_HAS_FEC boolean {
       prompt "Chip has an FEC usable for ethernet" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       depends on [FS_ENET && CPM1]
       select FS_ENET_MDIO_FEC if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       default [y] if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      }
      config FS_ENET_MDIO_FEC tristate {
       prompt "MDIO driver for FEC" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
       depends on [FS_ENET && CPM1]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM1]
      }
      config FS_ENET_MDIO_FCC tristate {
       prompt "MDIO driver for FCC" if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       depends on [FS_ENET && CPM2]
       select MDIO_BITBANG if [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
       inherited [NETDEVICES && NET_ETHERNET && FS_ENET && CPM2]
      }
     }
    }
   }
   menuconfig NETDEV_1000 boolean {
    prompt "Ethernet (1000 Mbit)" if [NETDEVICES && !UML]
    depends on [!UML]
    default [y] if [NETDEVICES && !UML]
    inherited [NETDEVICES && !UML]
    if [NETDEVICES && NETDEV_1000] {
     config ACENIC tristate {
      prompt "Alteon AceNIC/3Com 3C985/NetGear GA620 Gigabit support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config ACENIC_OMIT_TIGON_I boolean {
       prompt "Omit support for old Tigon I based AceNICs" if [NETDEVICES && NETDEV_1000 && ACENIC]
       depends on [ACENIC]
       inherited [NETDEVICES && NETDEV_1000 && ACENIC]
      }
     }
     config DL2K tristate {
      prompt "DL2000/TC902x-based Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config E1000 tristate {
      prompt "Intel(R) PRO/1000 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config E1000_NAPI boolean {
       prompt "Use Rx Polling (NAPI)" if [NETDEVICES && NETDEV_1000 && E1000]
       depends on [E1000]
       inherited [NETDEVICES && NETDEV_1000 && E1000]
      }
      config E1000_DISABLE_PACKET_SPLIT boolean {
       prompt "Disable Packet Split for PCI express adapters" if [NETDEVICES && NETDEV_1000 && E1000]
       depends on [E1000]
       inherited [NETDEVICES && NETDEV_1000 && E1000]
      }
     }
     config E1000E tristate {
      prompt "Intel(R) PRO/1000 PCI-Express Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config IP1000 tristate {
      prompt "IP1000 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     }
     config ENP2611_MSF_NET tristate {
      prompt "Radisys ENP2611 MSF network interface support" if [NETDEVICES && NETDEV_1000 && ARCH_ENP2611]
      depends on [ARCH_ENP2611]
      inherited [NETDEVICES && NETDEV_1000 && ARCH_ENP2611]
     }
     config MYRI_SBUS tristate {
      prompt "MyriCOM Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && SBUS]
      depends on [SBUS]
      inherited [NETDEVICES && NETDEV_1000 && SBUS]
     }
     config NS83820 tristate {
      prompt "National Semiconductor DP83820 support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config HAMACHI tristate {
      prompt "Packet Engines Hamachi GNIC-II support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config YELLOWFIN tristate {
      prompt "Packet Engines Yellowfin Gigabit-NIC support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     }
     config R8169 tristate {
      prompt "Realtek 8169 gigabit ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config R8169_NAPI boolean {
       prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && R8169 && EXPERIMENTAL]
       depends on [R8169 && EXPERIMENTAL]
       inherited [NETDEVICES && NETDEV_1000 && R8169 && EXPERIMENTAL]
      }
      config R8169_VLAN boolean {
       prompt "VLAN support" if [NETDEVICES && NETDEV_1000 && R8169 && VLAN_8021Q]
       depends on [R8169 && VLAN_8021Q]
       inherited [NETDEVICES && NETDEV_1000 && R8169 && VLAN_8021Q]
      }
     }
     config SB1250_MAC tristate {
      prompt "SB1250 Gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
      depends on [SIBYTE_SB1xxx_SOC]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
      inherited [NETDEVICES && NETDEV_1000 && SIBYTE_SB1xxx_SOC]
     }
     config SIS190 tristate {
      prompt "SiS190/SiS191 gigabit ethernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config SKGE tristate {
      prompt "New SysKonnect GigaEthernet support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config SKGE_DEBUG boolean {
       prompt "Debugging interface" if [NETDEVICES && NETDEV_1000 && SKGE && DEBUG_FS]
       depends on [SKGE && DEBUG_FS]
       inherited [NETDEVICES && NETDEV_1000 && SKGE && DEBUG_FS]
      }
     }
     config SKY2 tristate {
      prompt "SysKonnect Yukon2 support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
      config SKY2_DEBUG boolean {
       prompt "Debugging interface" if [NETDEVICES && NETDEV_1000 && SKY2 && DEBUG_FS]
       depends on [SKY2 && DEBUG_FS]
       inherited [NETDEVICES && NETDEV_1000 && SKY2 && DEBUG_FS]
      }
     }
     config SK98LIN tristate {
      prompt "Marvell Yukon Chipset / SysKonnect SK-98xx Support (DEPRECATED)" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config VIA_VELOCITY tristate {
      prompt "VIA Velocity support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select CRC_CCITT if [NETDEVICES && NETDEV_1000 && PCI]
      select MII if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config TIGON3 tristate {
      prompt "Broadcom Tigon3 support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config BNX2 tristate {
      prompt "Broadcom NetXtremeII support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI]
      select ZLIB_INFLATE if [NETDEVICES && NETDEV_1000 && PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config SPIDER_NET tristate {
      prompt "Spider Gigabit Ethernet driver" if [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
      depends on [PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
      select FW_LOADER if [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
      inherited [NETDEVICES && NETDEV_1000 && PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)]
     }
     config TSI108_ETH tristate {
      prompt "Tundra TSI108 gigabit Ethernet support" if [NETDEVICES && NETDEV_1000 && TSI108_BRIDGE]
      depends on [TSI108_BRIDGE]
      inherited [NETDEVICES && NETDEV_1000 && TSI108_BRIDGE]
     }
     config GELIC_NET tristate {
      prompt "PS3 Gigabit Ethernet driver" if [NETDEVICES && NETDEV_1000 && PPC_PS3]
      depends on [PPC_PS3]
      inherited [NETDEVICES && NETDEV_1000 && PPC_PS3]
     }
     config GIANFAR tristate {
      prompt "Gianfar Ethernet" if [NETDEVICES && NETDEV_1000 && (85xx || 83xx || PPC_86xx)]
      depends on [85xx || 83xx || PPC_86xx]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && (85xx || 83xx || PPC_86xx)]
      select CRC32 if [NETDEVICES && NETDEV_1000 && (85xx || 83xx || PPC_86xx)]
      inherited [NETDEVICES && NETDEV_1000 && (85xx || 83xx || PPC_86xx)]
      config GFAR_NAPI boolean {
       prompt "Use Rx Polling (NAPI)" if [NETDEVICES && NETDEV_1000 && GIANFAR]
       depends on [GIANFAR]
       inherited [NETDEVICES && NETDEV_1000 && GIANFAR]
      }
     }
     config UCC_GETH tristate {
      prompt "Freescale QE Gigabit Ethernet" if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
      depends on [QUICC_ENGINE]
      select PHYLIB if [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
      inherited [NETDEVICES && NETDEV_1000 && QUICC_ENGINE]
      config UGETH_NAPI boolean {
       prompt "Use Rx Polling (NAPI)" if [NETDEVICES && NETDEV_1000 && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NETDEVICES && NETDEV_1000 && UCC_GETH]
      }
      config UGETH_MAGIC_PACKET boolean {
       prompt "Magic Packet detection support" if [NETDEVICES && NETDEV_1000 && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NETDEVICES && NETDEV_1000 && UCC_GETH]
      }
      config UGETH_FILTERING boolean {
       prompt "Mac address filtering support" if [NETDEVICES && NETDEV_1000 && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NETDEVICES && NETDEV_1000 && UCC_GETH]
      }
      config UGETH_TX_ON_DEMAND boolean {
       prompt "Transmit on Demand support" if [NETDEVICES && NETDEV_1000 && UCC_GETH]
       depends on [UCC_GETH]
       inherited [NETDEVICES && NETDEV_1000 && UCC_GETH]
      }
     }
     config MV643XX_ETH tristate {
      prompt "Marvell Discovery (643XX) and Orion ethernet support" if [NETDEVICES && NETDEV_1000 && (MV64360 || MV64X60 || PPC_MULTIPLATFORM && PPC32 || ARCH_ORION)]
      depends on [MV64360 || MV64X60 || PPC_MULTIPLATFORM && PPC32 || ARCH_ORION]
      select MII if [NETDEVICES && NETDEV_1000 && (MV64360 || MV64X60 || PPC_MULTIPLATFORM && PPC32 || ARCH_ORION)]
      inherited [NETDEVICES && NETDEV_1000 && (MV64360 || MV64X60 || PPC_MULTIPLATFORM && PPC32 || ARCH_ORION)]
     }
     config QLA3XXX tristate {
      prompt "QLogic QLA3XXX Network Driver Support" if [NETDEVICES && NETDEV_1000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_1000 && PCI]
     }
     config ATL1 tristate {
      prompt "Attansic L1 Gigabit Ethernet support (EXPERIMENTAL)" if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      depends on [PCI && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      select MII if [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
      inherited [NETDEVICES && NETDEV_1000 && PCI && EXPERIMENTAL]
     }
    }
   }
   menuconfig NETDEV_10000 boolean {
    prompt "Ethernet (10000 Mbit)" if [NETDEVICES && !UML]
    depends on [!UML]
    default [y] if [NETDEVICES && !UML]
    inherited [NETDEVICES && !UML]
    if [NETDEVICES && NETDEV_10000] {
     config CHELSIO_T1 tristate {
      prompt "Chelsio 10Gb Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      select CRC32 if [NETDEVICES && NETDEV_10000 && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
      config CHELSIO_T1_1G boolean {
       prompt "Chelsio gigabit Ethernet support" if [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
       depends on [CHELSIO_T1]
       inherited [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
      }
      config CHELSIO_T1_NAPI boolean {
       prompt "Use Rx Polling (NAPI)" if [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
       depends on [CHELSIO_T1]
       default [y] if [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
       inherited [NETDEVICES && NETDEV_10000 && CHELSIO_T1]
      }
     }
     config CHELSIO_T3 tristate {
      prompt "Chelsio Communications T3 10Gb Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      select FW_LOADER if [NETDEVICES && NETDEV_10000 && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config EHEA tristate {
      prompt "eHEA Ethernet support" if [NETDEVICES && NETDEV_10000 && IBMEBUS && INET]
      depends on [IBMEBUS && INET]
      select INET_LRO if [NETDEVICES && NETDEV_10000 && IBMEBUS && INET]
      inherited [NETDEVICES && NETDEV_10000 && IBMEBUS && INET]
     }
     config IXGBE tristate {
      prompt "Intel(R) 10GbE PCI Express adapters support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config IXGB tristate {
      prompt "Intel(R) PRO/10GbE support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
      config IXGB_NAPI boolean {
       prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NETDEVICES && NETDEV_10000 && IXGB && EXPERIMENTAL]
       depends on [IXGB && EXPERIMENTAL]
       inherited [NETDEVICES && NETDEV_10000 && IXGB && EXPERIMENTAL]
      }
     }
     config S2IO tristate {
      prompt "S2IO 10Gbe XFrame NIC" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
      config S2IO_NAPI boolean {
       prompt "Use Rx Polling (NAPI) (EXPERIMENTAL)" if [NETDEVICES && NETDEV_10000 && S2IO && EXPERIMENTAL]
       depends on [S2IO && EXPERIMENTAL]
       inherited [NETDEVICES && NETDEV_10000 && S2IO && EXPERIMENTAL]
      }
     }
     config MYRI10GE tristate {
      prompt "Myricom Myri-10G Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI && INET]
      depends on [PCI && INET]
      select FW_LOADER if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select CRC32 if [NETDEVICES && NETDEV_10000 && PCI && INET]
      select INET_LRO if [NETDEVICES && NETDEV_10000 && PCI && INET]
      inherited [NETDEVICES && NETDEV_10000 && PCI && INET]
     }
     config NETXEN_NIC tristate {
      prompt "NetXen Multi port (1/10) Gigabit Ethernet NIC" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config NIU tristate {
      prompt "Sun Neptune 10Gbit Ethernet support" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config PASEMI_MAC tristate {
      prompt "PA Semi 1/10Gbit MAC" if [NETDEVICES && NETDEV_10000 && PPC64 && PCI]
      depends on [PPC64 && PCI]
      select PHYLIB if [NETDEVICES && NETDEV_10000 && PPC64 && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PPC64 && PCI]
     }
     config MLX4_CORE tristate {
      depends on [PCI]
      default [n] if [NETDEVICES && NETDEV_10000 && PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
     config MLX4_DEBUG boolean {
      prompt "Verbose debugging output" if [NETDEVICES && NETDEV_10000 && MLX4_CORE && EMBEDDED]
      depends on [MLX4_CORE]
      default [y] if [NETDEVICES && NETDEV_10000 && MLX4_CORE]
      inherited [NETDEVICES && NETDEV_10000 && MLX4_CORE]
     }
     config TEHUTI tristate {
      prompt "Tehuti Networks 10G Ethernet" if [NETDEVICES && NETDEV_10000 && PCI]
      depends on [PCI]
      inherited [NETDEVICES && NETDEV_10000 && PCI]
     }
    }
   }
   menuconfig TR boolean {
    prompt "Token Ring driver support" if [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
    depends on [NETDEVICES && !UML]
    depends on [PCI || ISA || MCA || CCW]
    select LLC if [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
    inherited [NETDEVICES && !UML && (PCI || ISA || MCA || CCW)]
    if [NETDEVICES && TR] {
     config IBMTR tristate {
      prompt "IBM Tropic chipset based adapter support" if [NETDEVICES && TR && (ISA || MCA)]
      depends on [ISA || MCA]
      inherited [NETDEVICES && TR && (ISA || MCA)]
     }
     config IBMOL tristate {
      prompt "IBM Olympic chipset PCI adapter support" if [NETDEVICES && TR && PCI]
      depends on [PCI]
      inherited [NETDEVICES && TR && PCI]
     }
     config IBMLS tristate {
      prompt "IBM Lanstreamer chipset PCI adapter support" if [NETDEVICES && TR && PCI && !64BIT]
      depends on [PCI && !64BIT]
      inherited [NETDEVICES && TR && PCI && !64BIT]
     }
     config 3C359 tristate {
      prompt "3Com 3C359 Token Link Velocity XL adapter support" if [NETDEVICES && TR && PCI]
      depends on [PCI]
      inherited [NETDEVICES && TR && PCI]
     }
     config TMS380TR tristate {
      prompt "Generic TMS380 Token Ring ISA/PCI adapter support" if [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
      depends on [PCI || ISA && ISA_DMA_API || MCA]
      select FW_LOADER if [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
      inherited [NETDEVICES && TR && (PCI || ISA && ISA_DMA_API || MCA)]
      config TMSPCI tristate {
       prompt "Generic TMS380 PCI support" if [NETDEVICES && TR && TMS380TR && PCI]
       depends on [TMS380TR && PCI]
       inherited [NETDEVICES && TR && TMS380TR && PCI]
      }
      config SKISA tristate {
       prompt "SysKonnect TR4/16 ISA support" if [NETDEVICES && TR && TMS380TR && ISA]
       depends on [TMS380TR && ISA]
       inherited [NETDEVICES && TR && TMS380TR && ISA]
      }
      config PROTEON tristate {
       prompt "Proteon ISA support" if [NETDEVICES && TR && TMS380TR && ISA]
       depends on [TMS380TR && ISA]
       inherited [NETDEVICES && TR && TMS380TR && ISA]
      }
      config ABYSS tristate {
       prompt "Madge Smart 16/4 PCI Mk2 support" if [NETDEVICES && TR && TMS380TR && PCI]
       depends on [TMS380TR && PCI]
       inherited [NETDEVICES && TR && TMS380TR && PCI]
      }
      config MADGEMC tristate {
       prompt "Madge Smart 16/4 Ringnode MicroChannel" if [NETDEVICES && TR && TMS380TR && MCA]
       depends on [TMS380TR && MCA]
       inherited [NETDEVICES && TR && TMS380TR && MCA]
      }
     }
     config SMCTR tristate {
      prompt "SMC ISA/MCA adapter support" if [NETDEVICES && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
      depends on [(ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
      inherited [NETDEVICES && TR && (ISA || MCA_LEGACY) && (BROKEN || !64BIT)]
     }
    }
   }
   menu "Wireless LAN" {
    depends on [NETDEVICES && !S390]
    config WLAN_PRE80211 boolean {
     prompt "Wireless LAN (pre-802.11)" if [!S390 && NETDEVICES]
     depends on [NETDEVICES]
     inherited [!S390 && NETDEVICES]
     config STRIP tristate {
      prompt "STRIP (Metricom starmode radio IP)" if [NETDEVICES && !S390 && INET && WLAN_PRE80211]
      depends on [INET && WLAN_PRE80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && INET && WLAN_PRE80211]
      inherited [NETDEVICES && !S390 && INET && WLAN_PRE80211]
     }
     config ARLAN tristate {
      prompt "Aironet Arlan 655 & IC2200 DS support" if [NETDEVICES && !S390 && ISA && !64BIT && WLAN_PRE80211]
      depends on [ISA && !64BIT && WLAN_PRE80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && ISA && !64BIT && WLAN_PRE80211]
      inherited [NETDEVICES && !S390 && ISA && !64BIT && WLAN_PRE80211]
     }
     config WAVELAN tristate {
      prompt "AT&T/Lucent old WaveLAN & DEC RoamAbout DS ISA support" if [NETDEVICES && !S390 && ISA && WLAN_PRE80211]
      depends on [ISA && WLAN_PRE80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && ISA && WLAN_PRE80211]
      inherited [NETDEVICES && !S390 && ISA && WLAN_PRE80211]
     }
     config PCMCIA_WAVELAN tristate {
      prompt "AT&T/Lucent old WaveLAN Pcmcia wireless support" if [NETDEVICES && !S390 && PCMCIA && WLAN_PRE80211]
      depends on [PCMCIA && WLAN_PRE80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCMCIA && WLAN_PRE80211]
      inherited [NETDEVICES && !S390 && PCMCIA && WLAN_PRE80211]
     }
     config PCMCIA_NETWAVE tristate {
      prompt "Xircom Netwave AirSurfer Pcmcia wireless support" if [NETDEVICES && !S390 && PCMCIA && WLAN_PRE80211]
      depends on [PCMCIA && WLAN_PRE80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCMCIA && WLAN_PRE80211]
      inherited [NETDEVICES && !S390 && PCMCIA && WLAN_PRE80211]
     }
    }
    config WLAN_80211 boolean {
     prompt "Wireless LAN (IEEE 802.11)" if [!S390 && NETDEVICES]
     depends on [NETDEVICES]
     inherited [!S390 && NETDEVICES]
     config PCMCIA_RAYCS tristate {
      prompt "Aviator/Raytheon 2.4MHz wireless support" if [NETDEVICES && !S390 && PCMCIA && WLAN_80211]
      depends on [PCMCIA && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCMCIA && WLAN_80211]
      inherited [NETDEVICES && !S390 && PCMCIA && WLAN_80211]
     }
     config IPW2100 tristate {
      prompt "Intel PRO/Wireless 2100 Network Connection" if [NETDEVICES && !S390 && PCI && WLAN_80211]
      depends on [PCI && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCI && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && PCI && WLAN_80211]
      select IEEE80211 if [NETDEVICES && !S390 && PCI && WLAN_80211]
      inherited [NETDEVICES && !S390 && PCI && WLAN_80211]
      config IPW2100_MONITOR boolean {
       prompt "Enable promiscuous mode" if [NETDEVICES && !S390 && IPW2100]
       depends on [IPW2100]
       inherited [NETDEVICES && !S390 && IPW2100]
      }
      config IPW2100_DEBUG boolean {
       prompt "Enable full debugging output in IPW2100 module." if [NETDEVICES && !S390 && IPW2100]
       depends on [IPW2100]
       inherited [NETDEVICES && !S390 && IPW2100]
      }
     }
     config IPW2200 tristate {
      prompt "Intel PRO/Wireless 2200BG and 2915ABG Network Connection" if [NETDEVICES && !S390 && PCI && WLAN_80211]
      depends on [PCI && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCI && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && PCI && WLAN_80211]
      select IEEE80211 if [NETDEVICES && !S390 && PCI && WLAN_80211]
      inherited [NETDEVICES && !S390 && PCI && WLAN_80211]
      config IPW2200_MONITOR boolean {
       prompt "Enable promiscuous mode" if [NETDEVICES && !S390 && IPW2200]
       depends on [IPW2200]
       inherited [NETDEVICES && !S390 && IPW2200]
       config IPW2200_RADIOTAP boolean {
        prompt "Enable radiotap format 802.11 raw packet support" if [NETDEVICES && !S390 && IPW2200_MONITOR]
        depends on [IPW2200_MONITOR]
        inherited [NETDEVICES && !S390 && IPW2200_MONITOR]
       }
       config IPW2200_PROMISCUOUS boolean {
        prompt "Enable creation of a RF radiotap promiscuous interface" if [NETDEVICES && !S390 && IPW2200_MONITOR]
        depends on [IPW2200_MONITOR]
        select IPW2200_RADIOTAP if [NETDEVICES && !S390 && IPW2200_MONITOR]
        inherited [NETDEVICES && !S390 && IPW2200_MONITOR]
       }
      }
      config IPW2200_QOS boolean {
       prompt "Enable QoS support" if [NETDEVICES && !S390 && IPW2200 && EXPERIMENTAL]
       depends on [IPW2200 && EXPERIMENTAL]
       inherited [NETDEVICES && !S390 && IPW2200 && EXPERIMENTAL]
      }
      config IPW2200_DEBUG boolean {
       prompt "Enable full debugging output in IPW2200 module." if [NETDEVICES && !S390 && IPW2200]
       depends on [IPW2200]
       inherited [NETDEVICES && !S390 && IPW2200]
      }
     }
     config LIBERTAS tristate {
      prompt "Marvell 8xxx Libertas WLAN driver support" if [NETDEVICES && !S390 && WLAN_80211]
      depends on [WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && WLAN_80211]
      select IEEE80211 if [NETDEVICES && !S390 && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && WLAN_80211]
      inherited [NETDEVICES && !S390 && WLAN_80211]
      config LIBERTAS_USB tristate {
       prompt "Marvell Libertas 8388 USB 802.11b/g cards" if [NETDEVICES && !S390 && LIBERTAS && USB]
       depends on [LIBERTAS && USB]
       inherited [NETDEVICES && !S390 && LIBERTAS && USB]
      }
      config LIBERTAS_CS tristate {
       prompt "Marvell Libertas 8385 CompactFlash 802.11b/g cards" if [NETDEVICES && !S390 && LIBERTAS && PCMCIA && EXPERIMENTAL]
       depends on [LIBERTAS && PCMCIA && EXPERIMENTAL]
       select FW_LOADER if [NETDEVICES && !S390 && LIBERTAS && PCMCIA && EXPERIMENTAL]
       inherited [NETDEVICES && !S390 && LIBERTAS && PCMCIA && EXPERIMENTAL]
      }
      config LIBERTAS_SDIO tristate {
       prompt "Marvell Libertas 8385 and 8686 SDIO 802.11b/g cards" if [NETDEVICES && !S390 && LIBERTAS && MMC]
       depends on [LIBERTAS && MMC]
       inherited [NETDEVICES && !S390 && LIBERTAS && MMC]
      }
      config LIBERTAS_DEBUG boolean {
       prompt "Enable full debugging output in the Libertas module." if [NETDEVICES && !S390 && LIBERTAS]
       depends on [LIBERTAS]
       inherited [NETDEVICES && !S390 && LIBERTAS]
      }
     }
     config AIRO tristate {
      prompt "Cisco/Aironet 34X/35X/4500/4800 ISA and PCI cards" if [NETDEVICES && !S390 && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
      depends on [ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
      select WIRELESS_EXT if [NETDEVICES && !S390 && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
      select CRYPTO if [NETDEVICES && !S390 && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
      inherited [NETDEVICES && !S390 && ISA_DMA_API && WLAN_80211 && (PCI || BROKEN)]
     }
     config HERMES tristate {
      prompt "Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)" if [NETDEVICES && !S390 && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211]
      depends on [(PPC_PMAC || PCI || PCMCIA) && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211]
      inherited [NETDEVICES && !S390 && (PPC_PMAC || PCI || PCMCIA) && WLAN_80211]
      config APPLE_AIRPORT tristate {
       prompt "Apple Airport support (built-in)" if [NETDEVICES && !S390 && PPC_PMAC && HERMES]
       depends on [PPC_PMAC && HERMES]
       inherited [NETDEVICES && !S390 && PPC_PMAC && HERMES]
      }
      config PLX_HERMES tristate {
       prompt "Hermes in PLX9052 based PCI adaptor support (Netgear MA301 etc.)" if [NETDEVICES && !S390 && PCI && HERMES]
       depends on [PCI && HERMES]
       inherited [NETDEVICES && !S390 && PCI && HERMES]
      }
      config TMD_HERMES tristate {
       prompt "Hermes in TMD7160 based PCI adaptor support" if [NETDEVICES && !S390 && PCI && HERMES]
       depends on [PCI && HERMES]
       inherited [NETDEVICES && !S390 && PCI && HERMES]
      }
      config NORTEL_HERMES tristate {
       prompt "Nortel emobility PCI adaptor support" if [NETDEVICES && !S390 && PCI && HERMES]
       depends on [PCI && HERMES]
       inherited [NETDEVICES && !S390 && PCI && HERMES]
      }
      config PCI_HERMES tristate {
       prompt "Prism 2.5 PCI 802.11b adaptor support" if [NETDEVICES && !S390 && PCI && HERMES]
       depends on [PCI && HERMES]
       inherited [NETDEVICES && !S390 && PCI && HERMES]
      }
      config PCMCIA_HERMES tristate {
       prompt "Hermes PCMCIA card support" if [NETDEVICES && !S390 && PCMCIA && HERMES]
       depends on [PCMCIA && HERMES]
       inherited [NETDEVICES && !S390 && PCMCIA && HERMES]
      }
      config PCMCIA_SPECTRUM tristate {
       prompt "Symbol Spectrum24 Trilogy PCMCIA card support" if [NETDEVICES && !S390 && PCMCIA && HERMES]
       depends on [PCMCIA && HERMES]
       select FW_LOADER if [NETDEVICES && !S390 && PCMCIA && HERMES]
       inherited [NETDEVICES && !S390 && PCMCIA && HERMES]
      }
     }
     config ATMEL tristate {
      prompt "Atmel at76c50x chipset  802.11b support" if [NETDEVICES && !S390 && (PCI || PCMCIA) && WLAN_80211]
      depends on [(PCI || PCMCIA) && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && (PCI || PCMCIA) && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && (PCI || PCMCIA) && WLAN_80211]
      select CRC32 if [NETDEVICES && !S390 && (PCI || PCMCIA) && WLAN_80211]
      inherited [NETDEVICES && !S390 && (PCI || PCMCIA) && WLAN_80211]
      config PCI_ATMEL tristate {
       prompt "Atmel at76c506 PCI cards" if [NETDEVICES && !S390 && ATMEL && PCI]
       depends on [ATMEL && PCI]
       inherited [NETDEVICES && !S390 && ATMEL && PCI]
      }
      config PCMCIA_ATMEL tristate {
       prompt "Atmel at76c502/at76c504 PCMCIA cards" if [NETDEVICES && !S390 && ATMEL && PCMCIA]
       depends on [ATMEL && PCMCIA]
       select WIRELESS_EXT if [NETDEVICES && !S390 && ATMEL && PCMCIA]
       select FW_LOADER if [NETDEVICES && !S390 && ATMEL && PCMCIA]
       select CRC32 if [NETDEVICES && !S390 && ATMEL && PCMCIA]
       inherited [NETDEVICES && !S390 && ATMEL && PCMCIA]
      }
     }
     config AIRO_CS tristate {
      prompt "Cisco/Aironet 34X/35X/4500/4800 PCMCIA cards" if [NETDEVICES && !S390 && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
      depends on [PCMCIA && (BROKEN || !M32R) && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
      select CRYPTO if [NETDEVICES && !S390 && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
      select CRYPTO_AES if [NETDEVICES && !S390 && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
      inherited [NETDEVICES && !S390 && PCMCIA && (BROKEN || !M32R) && WLAN_80211]
     }
     config PCMCIA_WL3501 tristate {
      prompt "Planet WL3501 PCMCIA cards" if [NETDEVICES && !S390 && EXPERIMENTAL && PCMCIA && WLAN_80211]
      depends on [EXPERIMENTAL && PCMCIA && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && EXPERIMENTAL && PCMCIA && WLAN_80211]
      inherited [NETDEVICES && !S390 && EXPERIMENTAL && PCMCIA && WLAN_80211]
     }
     config PRISM54 tristate {
      prompt "Intersil Prism GT/Duette/Indigo PCI/Cardbus" if [NETDEVICES && !S390 && PCI && EXPERIMENTAL && WLAN_80211]
      depends on [PCI && EXPERIMENTAL && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCI && EXPERIMENTAL && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && PCI && EXPERIMENTAL && WLAN_80211]
      inherited [NETDEVICES && !S390 && PCI && EXPERIMENTAL && WLAN_80211]
     }
     config USB_ZD1201 tristate {
      prompt "USB ZD1201 based Wireless device support" if [NETDEVICES && !S390 && USB && WLAN_80211]
      depends on [USB && WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && USB && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && USB && WLAN_80211]
      inherited [NETDEVICES && !S390 && USB && WLAN_80211]
     }
     config RTL8187 tristate {
      prompt "Realtek 8187 USB support" if [NETDEVICES && !S390 && MAC80211 && USB && WLAN_80211 && EXPERIMENTAL]
      depends on [MAC80211 && USB && WLAN_80211 && EXPERIMENTAL]
      select EEPROM_93CX6 if [NETDEVICES && !S390 && MAC80211 && USB && WLAN_80211 && EXPERIMENTAL]
      inherited [NETDEVICES && !S390 && MAC80211 && USB && WLAN_80211 && EXPERIMENTAL]
     }
     config ADM8211 tristate {
      prompt "ADMtek ADM8211 support" if [NETDEVICES && !S390 && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
      depends on [MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
      select CRC32 if [NETDEVICES && !S390 && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
      select EEPROM_93CX6 if [NETDEVICES && !S390 && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
      inherited [NETDEVICES && !S390 && MAC80211 && PCI && WLAN_80211 && EXPERIMENTAL]
     }
     config P54_COMMON tristate {
      prompt "Softmac Prism54 support" if [NETDEVICES && !S390 && MAC80211 && WLAN_80211 && FW_LOADER && EXPERIMENTAL]
      depends on [MAC80211 && WLAN_80211 && FW_LOADER && EXPERIMENTAL]
      inherited [NETDEVICES && !S390 && MAC80211 && WLAN_80211 && FW_LOADER && EXPERIMENTAL]
      config P54_USB tristate {
       prompt "Prism54 USB support" if [NETDEVICES && !S390 && P54_COMMON && USB]
       depends on [P54_COMMON && USB]
       select CRC32 if [NETDEVICES && !S390 && P54_COMMON && USB]
       inherited [NETDEVICES && !S390 && P54_COMMON && USB]
      }
      config P54_PCI tristate {
       prompt "Prism54 PCI support" if [NETDEVICES && !S390 && P54_COMMON && PCI]
       depends on [P54_COMMON && PCI]
       inherited [NETDEVICES && !S390 && P54_COMMON && PCI]
      }
     }
     config IWLWIFI boolean {
      prompt "Intel Wireless WiFi Link Drivers" if [NETDEVICES && !S390 && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
      depends on [PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
      select FW_LOADER if [NETDEVICES && !S390 && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
      default [n] if [NETDEVICES && !S390 && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
      inherited [NETDEVICES && !S390 && PCI && MAC80211 && WLAN_80211 && EXPERIMENTAL]
      config IWLWIFI_DEBUG boolean {
       prompt "Enable full debugging output in iwlwifi drivers" if [NETDEVICES && !S390 && IWLWIFI]
       depends on [IWLWIFI]
       default [y] if [NETDEVICES && !S390 && IWLWIFI]
       inherited [NETDEVICES && !S390 && IWLWIFI]
      }
      config IWLWIFI_SENSITIVITY boolean {
       prompt "Enable Sensitivity Calibration in iwlwifi drivers" if [NETDEVICES && !S390 && IWLWIFI]
       depends on [IWLWIFI]
       default [y] if [NETDEVICES && !S390 && IWLWIFI]
       inherited [NETDEVICES && !S390 && IWLWIFI]
      }
      config IWLWIFI_SPECTRUM_MEASUREMENT boolean {
       prompt "Enable Spectrum Measurement in iwlwifi drivers" if [NETDEVICES && !S390 && IWLWIFI]
       depends on [IWLWIFI]
       default [y] if [NETDEVICES && !S390 && IWLWIFI]
       inherited [NETDEVICES && !S390 && IWLWIFI]
      }
      config IWLWIFI_QOS boolean {
       prompt "Enable Wireless QoS in iwlwifi drivers" if [NETDEVICES && !S390 && IWLWIFI]
       depends on [IWLWIFI]
       default [y] if [NETDEVICES && !S390 && IWLWIFI]
       inherited [NETDEVICES && !S390 && IWLWIFI]
      }
      config IWLWIFI_HT boolean {
       prompt "Enable 802.11n HT features in iwlwifi drivers" if [NETDEVICES && !S390 && EXPERIMENTAL && IWLWIFI && MAC80211_HT]
       depends on [EXPERIMENTAL]
       depends on [IWLWIFI && MAC80211_HT]
       default [n] if [NETDEVICES && !S390 && EXPERIMENTAL && IWLWIFI && MAC80211_HT]
       inherited [NETDEVICES && !S390 && EXPERIMENTAL && IWLWIFI && MAC80211_HT]
      }
      config IWL4965 tristate {
       prompt "Intel Wireless WiFi 4965AGN" if [NETDEVICES && !S390 && m && <choice> && IWLWIFI && EXPERIMENTAL]
       depends on [m && IWLWIFI && EXPERIMENTAL]
       default [m] if [NETDEVICES && !S390 && m && <choice> && IWLWIFI && EXPERIMENTAL]
       inherited [NETDEVICES && !S390 && m && <choice> && IWLWIFI && EXPERIMENTAL]
      }
      config IWL3945 tristate {
       prompt "Intel PRO/Wireless 3945ABG/BG Network Connection" if [NETDEVICES && !S390 && m && <choice> && IWLWIFI && EXPERIMENTAL]
       depends on [m && IWLWIFI && EXPERIMENTAL]
       default [m] if [NETDEVICES && !S390 && m && <choice> && IWLWIFI && EXPERIMENTAL]
       inherited [NETDEVICES && !S390 && m && <choice> && IWLWIFI && EXPERIMENTAL]
      }
     }
     config HOSTAP tristate {
      prompt "IEEE 802.11 for Host AP (Prism2/2.5/3 and WEP/TKIP/CCMP)" if [NETDEVICES && !S390 && WLAN_80211]
      depends on [WLAN_80211]
      select WIRELESS_EXT if [NETDEVICES && !S390 && WLAN_80211]
      select IEEE80211 if [NETDEVICES && !S390 && WLAN_80211]
      select IEEE80211_CRYPT_WEP if [NETDEVICES && !S390 && WLAN_80211]
      inherited [NETDEVICES && !S390 && WLAN_80211]
      config HOSTAP_FIRMWARE boolean {
       prompt "Support downloading firmware images with Host AP driver" if [NETDEVICES && !S390 && HOSTAP]
       depends on [HOSTAP]
       inherited [NETDEVICES && !S390 && HOSTAP]
       config HOSTAP_FIRMWARE_NVRAM boolean {
        prompt "Support for non-volatile firmware download" if [NETDEVICES && !S390 && HOSTAP_FIRMWARE]
        depends on [HOSTAP_FIRMWARE]
        inherited [NETDEVICES && !S390 && HOSTAP_FIRMWARE]
       }
      }
      config HOSTAP_PLX tristate {
       prompt "Host AP driver for Prism2/2.5/3 in PLX9052 PCI adaptors" if [NETDEVICES && !S390 && PCI && HOSTAP]
       depends on [PCI && HOSTAP]
       inherited [NETDEVICES && !S390 && PCI && HOSTAP]
      }
      config HOSTAP_PCI tristate {
       prompt "Host AP driver for Prism2.5 PCI adaptors" if [NETDEVICES && !S390 && PCI && HOSTAP]
       depends on [PCI && HOSTAP]
       inherited [NETDEVICES && !S390 && PCI && HOSTAP]
      }
      config HOSTAP_CS tristate {
       prompt "Host AP driver for Prism2/2.5/3 PC Cards" if [NETDEVICES && !S390 && PCMCIA && HOSTAP]
       depends on [PCMCIA && HOSTAP]
       inherited [NETDEVICES && !S390 && PCMCIA && HOSTAP]
      }
     }
     config BCM43XX tristate {
      prompt "Broadcom BCM43xx wireless support" if [NETDEVICES && !S390 && PCI && IEEE80211 && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      depends on [PCI && IEEE80211 && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      select WIRELESS_EXT if [NETDEVICES && !S390 && PCI && IEEE80211 && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      select FW_LOADER if [NETDEVICES && !S390 && PCI && IEEE80211 && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      select HW_RANDOM if [NETDEVICES && !S390 && PCI && IEEE80211 && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      inherited [NETDEVICES && !S390 && PCI && IEEE80211 && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      config BCM43XX_DEBUG boolean {
       prompt "Broadcom BCM43xx debugging (RECOMMENDED)" if [NETDEVICES && !S390 && BCM43XX]
       depends on [BCM43XX]
       default [y] if [NETDEVICES && !S390 && BCM43XX]
       inherited [NETDEVICES && !S390 && BCM43XX]
      }
      config BCM43XX_DMA boolean {
       depends on [BCM43XX]
       inherited [NETDEVICES && !S390 && BCM43XX]
      }
      config BCM43XX_PIO boolean {
       depends on [BCM43XX]
       inherited [NETDEVICES && !S390 && BCM43XX]
      }
      choice boolean {
       prompt "BCM43xx data transfer mode" if [NETDEVICES && !S390 && BCM43XX]
       depends on [BCM43XX]
       default [BCM43XX_DMA_AND_PIO_MODE] if [NETDEVICES && !S390 && BCM43XX]
       config BCM43XX_DMA_AND_PIO_MODE boolean {
        prompt "DMA + PIO" if [<choice>]
        select BCM43XX_DMA if [<choice>]
        select BCM43XX_PIO if [<choice>]
        inherited [<choice>]
       }
       config BCM43XX_DMA_MODE boolean {
        prompt "DMA (Direct Memory Access) only" if [<choice>]
        select BCM43XX_DMA if [<choice>]
        inherited [<choice>]
       }
       config BCM43XX_PIO_MODE boolean {
        prompt "PIO (Programmed I/O) only" if [<choice>]
        select BCM43XX_PIO if [<choice>]
        inherited [<choice>]
       }
      }
     }
     config B43 tristate {
      prompt "Broadcom 43xx wireless support (mac80211 stack)" if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      depends on [SSB_POSSIBLE && MAC80211 && WLAN_80211]
      select SSB if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      select HW_RANDOM if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      inherited [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      config B43_PCI_AUTOSELECT boolean {
       depends on [B43 && SSB_PCIHOST_POSSIBLE]
       select SSB_PCIHOST if [NETDEVICES && !S390 && B43 && SSB_PCIHOST_POSSIBLE]
       default [y] if [NETDEVICES && !S390 && B43 && SSB_PCIHOST_POSSIBLE]
       inherited [NETDEVICES && !S390 && B43 && SSB_PCIHOST_POSSIBLE]
      }
      config B43_PCICORE_AUTOSELECT boolean {
       depends on [B43 && SSB_DRIVER_PCICORE_POSSIBLE]
       select SSB_DRIVER_PCICORE if [NETDEVICES && !S390 && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
       default [y] if [NETDEVICES && !S390 && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
       inherited [NETDEVICES && !S390 && B43 && SSB_DRIVER_PCICORE_POSSIBLE]
      }
      config B43_PCMCIA boolean {
       prompt "Broadcom 43xx PCMCIA device support (EXPERIMENTAL)" if [NETDEVICES && !S390 && B43 && SSB_PCMCIAHOST_POSSIBLE && EXPERIMENTAL]
       depends on [B43 && SSB_PCMCIAHOST_POSSIBLE && EXPERIMENTAL]
       select SSB_PCMCIAHOST if [NETDEVICES && !S390 && B43 && SSB_PCMCIAHOST_POSSIBLE && EXPERIMENTAL]
       inherited [NETDEVICES && !S390 && B43 && SSB_PCMCIAHOST_POSSIBLE && EXPERIMENTAL]
      }
      config B43_LEDS boolean {
       depends on [B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
       default [y] if [NETDEVICES && !S390 && B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
       inherited [NETDEVICES && !S390 && B43 && MAC80211_LEDS && (LEDS_CLASS="y" || LEDS_CLASS="B43")]
      }
      config B43_RFKILL boolean {
       depends on [B43 && (RFKILL="y" || RFKILL="B43") && RFKILL_INPUT && (INPUT_POLLDEV="y" || INPUT_POLLDEV="B43")]
       default [y] if [NETDEVICES && !S390 && B43 && (RFKILL="y" || RFKILL="B43") && RFKILL_INPUT && (INPUT_POLLDEV="y" || INPUT_POLLDEV="B43")]
       inherited [NETDEVICES && !S390 && B43 && (RFKILL="y" || RFKILL="B43") && RFKILL_INPUT && (INPUT_POLLDEV="y" || INPUT_POLLDEV="B43")]
      }
      config B43_DEBUG boolean {
       prompt "Broadcom 43xx debugging" if [NETDEVICES && !S390 && B43]
       depends on [B43]
       inherited [NETDEVICES && !S390 && B43]
      }
      config B43_DMA boolean {
       depends on [B43]
       inherited [NETDEVICES && !S390 && B43]
      }
      config B43_PIO boolean {
       depends on [B43]
       inherited [NETDEVICES && !S390 && B43]
      }
      choice boolean {
       prompt "Broadcom 43xx data transfer mode" if [NETDEVICES && !S390 && B43]
       depends on [B43]
       default [B43_DMA_AND_PIO_MODE] if [NETDEVICES && !S390 && B43]
       config B43_DMA_AND_PIO_MODE boolean {
        prompt "DMA + PIO" if [<choice>]
        select B43_DMA if [<choice>]
        select B43_PIO if [<choice>]
        inherited [<choice>]
       }
       config B43_DMA_MODE boolean {
        prompt "DMA (Direct Memory Access) only" if [<choice>]
        select B43_DMA if [<choice>]
        inherited [<choice>]
       }
       config B43_PIO_MODE boolean {
        prompt "PIO (Programmed I/O) only" if [<choice>]
        select B43_PIO if [<choice>]
        inherited [<choice>]
       }
      }
     }
     config B43LEGACY tristate {
      prompt "Broadcom 43xx-legacy wireless support (mac80211 stack)" if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      depends on [SSB_POSSIBLE && MAC80211 && WLAN_80211]
      select SSB if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      select FW_LOADER if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      select HW_RANDOM if [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      inherited [NETDEVICES && !S390 && SSB_POSSIBLE && MAC80211 && WLAN_80211]
      config B43LEGACY_PCI_AUTOSELECT boolean {
       depends on [B43LEGACY && SSB_PCIHOST_POSSIBLE]
       select SSB_PCIHOST if [NETDEVICES && !S390 && B43LEGACY && SSB_PCIHOST_POSSIBLE]
       default [y] if [NETDEVICES && !S390 && B43LEGACY && SSB_PCIHOST_POSSIBLE]
       inherited [NETDEVICES && !S390 && B43LEGACY && SSB_PCIHOST_POSSIBLE]
      }
      config B43LEGACY_PCICORE_AUTOSELECT boolean {
       depends on [B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
       select SSB_DRIVER_PCICORE if [NETDEVICES && !S390 && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
       default [y] if [NETDEVICES && !S390 && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
       inherited [NETDEVICES && !S390 && B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE]
      }
      config B43LEGACY_DEBUG boolean {
       prompt "Broadcom 43xx-legacy debugging" if [NETDEVICES && !S390 && B43LEGACY]
       depends on [B43LEGACY]
       default [y] if [NETDEVICES && !S390 && B43LEGACY]
       inherited [NETDEVICES && !S390 && B43LEGACY]
      }
      config B43LEGACY_DMA boolean {
       depends on [B43LEGACY]
       inherited [NETDEVICES && !S390 && B43LEGACY]
      }
      config B43LEGACY_PIO boolean {
       depends on [B43LEGACY]
       inherited [NETDEVICES && !S390 && B43LEGACY]
      }
      choice boolean {
       prompt "Broadcom 43xx-legacy data transfer mode" if [NETDEVICES && !S390 && B43LEGACY]
       depends on [B43LEGACY]
       default [B43LEGACY_DMA_AND_PIO_MODE] if [NETDEVICES && !S390 && B43LEGACY]
       config B43LEGACY_DMA_AND_PIO_MODE boolean {
        prompt "DMA + PIO" if [<choice>]
        select B43LEGACY_DMA if [<choice>]
        select B43LEGACY_PIO if [<choice>]
        inherited [<choice>]
       }
       config B43LEGACY_DMA_MODE boolean {
        prompt "DMA (Direct Memory Access) only" if [<choice>]
        select B43LEGACY_DMA if [<choice>]
        inherited [<choice>]
       }
       config B43LEGACY_PIO_MODE boolean {
        prompt "PIO (Programmed I/O) only" if [<choice>]
        select B43LEGACY_PIO if [<choice>]
        inherited [<choice>]
       }
      }
     }
     config ZD1211RW tristate {
      prompt "ZyDAS ZD1211/ZD1211B USB-wireless support" if [NETDEVICES && !S390 && USB && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      depends on [USB && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      select WIRELESS_EXT if [NETDEVICES && !S390 && USB && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      select FW_LOADER if [NETDEVICES && !S390 && USB && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      inherited [NETDEVICES && !S390 && USB && IEEE80211_SOFTMAC && WLAN_80211 && EXPERIMENTAL]
      config ZD1211RW_DEBUG boolean {
       prompt "ZyDAS ZD1211 debugging" if [NETDEVICES && !S390 && ZD1211RW]
       depends on [ZD1211RW]
       inherited [NETDEVICES && !S390 && ZD1211RW]
      }
     }
     config RT2X00 tristate {
      prompt "Ralink driver support" if [NETDEVICES && !S390 && MAC80211 && WLAN_80211 && EXPERIMENTAL]
      depends on [MAC80211 && WLAN_80211 && EXPERIMENTAL]
      inherited [NETDEVICES && !S390 && MAC80211 && WLAN_80211 && EXPERIMENTAL]
      config RT2X00_LIB tristate {
       depends on [RT2X00]
       inherited [NETDEVICES && !S390 && RT2X00]
      }
      config RT2X00_LIB_PCI tristate {
       depends on [RT2X00]
       select RT2X00_LIB if [NETDEVICES && !S390 && RT2X00]
       inherited [NETDEVICES && !S390 && RT2X00]
      }
      config RT2X00_LIB_USB tristate {
       depends on [RT2X00]
       select RT2X00_LIB if [NETDEVICES && !S390 && RT2X00]
       inherited [NETDEVICES && !S390 && RT2X00]
      }
     }
    }
    config RT2X00_LIB_FIRMWARE boolean {
     depends on [RT2X00_LIB]
     select CRC_ITU_T if [NETDEVICES && !S390 && RT2X00_LIB]
     select FW_LOADER if [NETDEVICES && !S390 && RT2X00_LIB]
     inherited [NETDEVICES && !S390 && RT2X00_LIB]
    }
    config RT2X00_LIB_RFKILL boolean {
     depends on [RT2X00_LIB]
     select RFKILL if [NETDEVICES && !S390 && RT2X00_LIB]
     select INPUT_POLLDEV if [NETDEVICES && !S390 && RT2X00_LIB]
     inherited [NETDEVICES && !S390 && RT2X00_LIB]
    }
    config RT2400PCI tristate {
     prompt "Ralink rt2400 pci/pcmcia support" if [NETDEVICES && !S390 && RT2X00 && PCI]
     depends on [RT2X00 && PCI]
     select RT2X00_LIB_PCI if [NETDEVICES && !S390 && RT2X00 && PCI]
     select EEPROM_93CX6 if [NETDEVICES && !S390 && RT2X00 && PCI]
     inherited [NETDEVICES && !S390 && RT2X00 && PCI]
     config RT2400PCI_RFKILL boolean {
      prompt "RT2400 rfkill support" if [NETDEVICES && !S390 && RT2400PCI]
      depends on [RT2400PCI]
      select RT2X00_LIB_RFKILL if [NETDEVICES && !S390 && RT2400PCI]
      inherited [NETDEVICES && !S390 && RT2400PCI]
     }
    }
    config RT2500PCI tristate {
     prompt "Ralink rt2500 pci/pcmcia support" if [NETDEVICES && !S390 && RT2X00 && PCI]
     depends on [RT2X00 && PCI]
     select RT2X00_LIB_PCI if [NETDEVICES && !S390 && RT2X00 && PCI]
     select EEPROM_93CX6 if [NETDEVICES && !S390 && RT2X00 && PCI]
     inherited [NETDEVICES && !S390 && RT2X00 && PCI]
     config RT2500PCI_RFKILL boolean {
      prompt "RT2500 rfkill support" if [NETDEVICES && !S390 && RT2500PCI]
      depends on [RT2500PCI]
      select RT2X00_LIB_RFKILL if [NETDEVICES && !S390 && RT2500PCI]
      inherited [NETDEVICES && !S390 && RT2500PCI]
     }
    }
    config RT61PCI tristate {
     prompt "Ralink rt61 pci/pcmcia support" if [NETDEVICES && !S390 && RT2X00 && PCI]
     depends on [RT2X00 && PCI]
     select RT2X00_LIB_PCI if [NETDEVICES && !S390 && RT2X00 && PCI]
     select RT2X00_LIB_FIRMWARE if [NETDEVICES && !S390 && RT2X00 && PCI]
     select EEPROM_93CX6 if [NETDEVICES && !S390 && RT2X00 && PCI]
     inherited [NETDEVICES && !S390 && RT2X00 && PCI]
     config RT61PCI_RFKILL boolean {
      prompt "RT61 rfkill support" if [NETDEVICES && !S390 && RT61PCI]
      depends on [RT61PCI]
      select RT2X00_LIB_RFKILL if [NETDEVICES && !S390 && RT61PCI]
      inherited [NETDEVICES && !S390 && RT61PCI]
     }
    }
    config RT2500USB tristate {
     prompt "Ralink rt2500 usb support" if [NETDEVICES && !S390 && RT2X00 && USB]
     depends on [RT2X00 && USB]
     select RT2X00_LIB_USB if [NETDEVICES && !S390 && RT2X00 && USB]
     inherited [NETDEVICES && !S390 && RT2X00 && USB]
    }
    config RT73USB tristate {
     prompt "Ralink rt73 usb support" if [NETDEVICES && !S390 && RT2X00 && USB]
     depends on [RT2X00 && USB]
     select RT2X00_LIB_USB if [NETDEVICES && !S390 && RT2X00 && USB]
     select RT2X00_LIB_FIRMWARE if [NETDEVICES && !S390 && RT2X00 && USB]
     inherited [NETDEVICES && !S390 && RT2X00 && USB]
    }
    config RT2X00_LIB_DEBUGFS boolean {
     prompt "Ralink debugfs support" if [NETDEVICES && !S390 && RT2X00_LIB && MAC80211_DEBUGFS]
     depends on [RT2X00_LIB && MAC80211_DEBUGFS]
     inherited [NETDEVICES && !S390 && RT2X00_LIB && MAC80211_DEBUGFS]
    }
    config RT2X00_DEBUG boolean {
     prompt "Ralink debug output" if [NETDEVICES && !S390 && RT2X00_LIB]
     depends on [RT2X00_LIB]
     inherited [NETDEVICES && !S390 && RT2X00_LIB]
    }
   }
   menu "USB Network Adapters" {
    depends on [NETDEVICES && USB && NET]
    config USB_CATC tristate {
     prompt "USB CATC NetMate-based Ethernet device support (EXPERIMENTAL)" if [NETDEVICES && USB && NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select CRC32 if [NETDEVICES && USB && NET && EXPERIMENTAL]
     inherited [NETDEVICES && USB && NET && EXPERIMENTAL]
    }
    config USB_KAWETH tristate {
     prompt "USB KLSI KL5USB101-based ethernet device support" if [NETDEVICES && USB && NET]
     inherited [NETDEVICES && USB && NET]
    }
    config USB_PEGASUS tristate {
     prompt "USB Pegasus/Pegasus-II based ethernet device support" if [NETDEVICES && USB && NET]
     select MII if [NETDEVICES && USB && NET]
     inherited [NETDEVICES && USB && NET]
    }
    config USB_RTL8150 tristate {
     prompt "USB RTL8150 based ethernet device support (EXPERIMENTAL)" if [NETDEVICES && USB && NET && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select MII if [NETDEVICES && USB && NET && EXPERIMENTAL]
     inherited [NETDEVICES && USB && NET && EXPERIMENTAL]
    }
    config USB_USBNET tristate {
     prompt "Multi-purpose USB Networking Framework" if [NETDEVICES && USB && NET]
     select MII if [NETDEVICES && USB && NET]
     inherited [NETDEVICES && USB && NET]
     config USB_NET_AX8817X tristate {
      prompt "ASIX AX88xxx Based USB 2.0 Ethernet Adapters" if [NETDEVICES && USB && NET && USB_USBNET && NET_ETHERNET]
      depends on [USB_USBNET && NET_ETHERNET]
      select CRC32 if [NETDEVICES && USB && NET && USB_USBNET && NET_ETHERNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET && NET_ETHERNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET && NET_ETHERNET]
     }
     config USB_NET_CDCETHER tristate {
      prompt "CDC Ethernet support (smart devices such as cable modems)" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_DM9601 tristate {
      prompt "Davicom DM9601 based USB 1.1 10/100 ethernet devices" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_GL620A tristate {
      prompt "GeneSys GL620USB-A based cables" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_NET1080 tristate {
      prompt "NetChip 1080 based cables (Laplink, ...)" if [NETDEVICES && USB && NET && USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_PLUSB tristate {
      prompt "Prolific PL-2301/2302 based cables" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
      depends on [USB_USBNET && EXPERIMENTAL]
      inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     }
     config USB_NET_MCS7830 tristate {
      prompt "MosChip MCS7830 based Ethernet adapters" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
     config USB_NET_RNDIS_HOST tristate {
      prompt "Host for RNDIS and ActiveSync devices (EXPERIMENTAL)" if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
      depends on [USB_USBNET && EXPERIMENTAL]
      select USB_NET_CDCETHER if [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
      inherited [NETDEVICES && USB && NET && USB_USBNET && EXPERIMENTAL]
     }
     config USB_NET_CDC_SUBSET tristate {
      prompt "Simple USB Network Links (CDC Ethernet subset)" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
      config USB_ALI_M5632 boolean {
       prompt "ALi M5632 based 'USB 2.0 Data Link' cables" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_AN2720 boolean {
       prompt "AnchorChips 2720 based cables (Xircom PGUNET, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_BELKIN boolean {
       prompt "eTEK based host-to-host cables (Advance, Belkin, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       default [y] if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_ARMLINUX boolean {
       prompt "Embedded ARM Linux links (iPaq, ...)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       default [y] if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_EPSON2888 boolean {
       prompt "Epson 2888 based firmware (DEVELOPMENT)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
       depends on [USB_NET_CDC_SUBSET]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET]
      }
      config USB_KC2190 boolean {
       prompt "KT Technology KC2190 based cables (InstaNet)" if [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET && EXPERIMENTAL]
       depends on [USB_NET_CDC_SUBSET && EXPERIMENTAL]
       inherited [NETDEVICES && USB && NET && USB_NET_CDC_SUBSET && EXPERIMENTAL]
      }
     }
     config USB_NET_ZAURUS tristate {
      prompt "Sharp Zaurus (stock ROMs) and compatible" if [NETDEVICES && USB && NET && USB_USBNET]
      depends on [USB_USBNET]
      select USB_NET_CDCETHER if [NETDEVICES && USB && NET && USB_USBNET]
      select CRC32 if [NETDEVICES && USB && NET && USB_USBNET]
      default [y] if [NETDEVICES && USB && NET && USB_USBNET]
      inherited [NETDEVICES && USB && NET && USB_USBNET]
     }
    }
   }
   menuconfig NET_PCMCIA boolean {
    prompt "PCMCIA network device support" if [NETDEVICES && PCMCIA]
    depends on [PCMCIA]
    inherited [NETDEVICES && PCMCIA]
    if [NETDEVICES && NET_PCMCIA && PCMCIA] {
     config PCMCIA_3C589 tristate {
      prompt "3Com 3c589 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_3C574 tristate {
      prompt "3Com 3c574 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_FMVJ18X tristate {
      prompt "Fujitsu FMV-J18x PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_PCNET tristate {
      prompt "NE2000 compatible PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_NMCLAN tristate {
      prompt "New Media PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_SMC91C92 tristate {
      prompt "SMC 91Cxx PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select CRC32 if [NETDEVICES && NET_PCMCIA && PCMCIA]
      select MII if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_XIRC2PS tristate {
      prompt "Xircom 16-bit PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config PCMCIA_AXNET tristate {
      prompt "Asix AX88190 PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA]
     }
     config ARCNET_COM20020_CS tristate {
      prompt "COM20020 ARCnet PCMCIA support" if [NETDEVICES && NET_PCMCIA && PCMCIA && ARCNET_COM20020]
      depends on [ARCNET_COM20020]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA && ARCNET_COM20020]
     }
     config PCMCIA_IBMTR tristate {
      prompt "IBM PCMCIA tokenring adapter support" if [NETDEVICES && NET_PCMCIA && PCMCIA && IBMTR!="y" && TR && !64BIT]
      depends on [IBMTR!="y" && TR && !64BIT]
      inherited [NETDEVICES && NET_PCMCIA && PCMCIA && IBMTR!="y" && TR && !64BIT]
     }
    }
   }
   menuconfig WAN boolean {
    prompt "Wan interfaces support" if [NETDEVICES]
    inherited [NETDEVICES]
    if [NETDEVICES && WAN] {
     config HOSTESS_SV11 tristate {
      prompt "Comtrol Hostess SV-11 support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET]
      depends on [ISA && m && ISA_DMA_API && INET]
      inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET]
     }
     config COSA tristate {
      prompt "COSA/SRP sync serial boards support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API]
      depends on [ISA && m && ISA_DMA_API]
      inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API]
     }
     config LANMEDIA tristate {
      prompt "LanMedia Corp. SSI/V.35, T1/E1, HSSI, T3 boards" if [NETDEVICES && WAN && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      inherited [NETDEVICES && WAN && PCI && VIRT_TO_BUS]
     }
     config SEALEVEL_4021 tristate {
      prompt "Sealevel Systems 4021 support" if [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET]
      depends on [ISA && m && ISA_DMA_API && INET]
      inherited [NETDEVICES && WAN && ISA && m && <choice> && ISA_DMA_API && INET]
     }
     config HDLC tristate {
      prompt "Generic HDLC layer" if [NETDEVICES && WAN]
      inherited [NETDEVICES && WAN]
      config HDLC_RAW tristate {
       prompt "Raw HDLC support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_RAW_ETH tristate {
       prompt "Raw HDLC Ethernet device support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_CISCO tristate {
       prompt "Cisco HDLC support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_FR tristate {
       prompt "Frame Relay support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_PPP tristate {
       prompt "Synchronous Point-to-Point Protocol (PPP) support" if [NETDEVICES && WAN && HDLC]
       depends on [HDLC]
       inherited [NETDEVICES && WAN && HDLC]
      }
      config HDLC_X25 tristate {
       prompt "X.25 protocol support" if [NETDEVICES && WAN && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
       depends on [HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
       inherited [NETDEVICES && WAN && HDLC && (LAPB="m" && HDLC="m" || LAPB="y")]
      }
      config PCI200SYN tristate {
       prompt "Goramo PCI200SYN support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
      }
      config WANXL tristate {
       prompt "SBE Inc. wanXL support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
       config WANXL_BUILD_FIRMWARE boolean {
        prompt "rebuild wanXL firmware" if [NETDEVICES && WAN && WANXL && !PREVENT_FIRMWARE_BUILD]
        depends on [WANXL && !PREVENT_FIRMWARE_BUILD]
        inherited [NETDEVICES && WAN && WANXL && !PREVENT_FIRMWARE_BUILD]
       }
      }
      config PC300 tristate {
       prompt "Cyclades-PC300 support (RS-232/V.35, X.21, T1/E1 boards)" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
       config PC300_MLPPP boolean {
        prompt "Cyclades-PC300 MLPPP support" if [NETDEVICES && WAN && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
        depends on [PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
        inherited [NETDEVICES && WAN && PC300 && PPP_MULTILINK && PPP_SYNC_TTY && HDLC_PPP]
       }
      }
      config PC300TOO tristate {
       prompt "Cyclades PC300 RSV/X21 alternative support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
      }
      config N2 tristate {
       prompt "SDL RISCom/N2 support" if [NETDEVICES && WAN && HDLC && ISA]
       depends on [HDLC && ISA]
       inherited [NETDEVICES && WAN && HDLC && ISA]
      }
      config C101 tristate {
       prompt "Moxa C101 support" if [NETDEVICES && WAN && HDLC && ISA]
       depends on [HDLC && ISA]
       inherited [NETDEVICES && WAN && HDLC && ISA]
      }
      config FARSYNC tristate {
       prompt "FarSync T-Series support" if [NETDEVICES && WAN && HDLC && PCI]
       depends on [HDLC && PCI]
       inherited [NETDEVICES && WAN && HDLC && PCI]
      }
      config DSCC4 tristate {
       prompt "Etinc PCISYNC serial board support" if [NETDEVICES && WAN && HDLC && PCI && m && <choice>]
       depends on [HDLC && PCI && m]
       inherited [NETDEVICES && WAN && HDLC && PCI && m && <choice>]
       config DSCC4_PCISYNC boolean {
        prompt "Etinc PCISYNC features" if [NETDEVICES && WAN && DSCC4]
        depends on [DSCC4]
        inherited [NETDEVICES && WAN && DSCC4]
       }
       config DSCC4_PCI_RST boolean {
        prompt "Hard reset support" if [NETDEVICES && WAN && DSCC4]
        depends on [DSCC4]
        inherited [NETDEVICES && WAN && DSCC4]
       }
      }
     }
     config DLCI tristate {
      prompt "Frame Relay DLCI support" if [NETDEVICES && WAN]
      inherited [NETDEVICES && WAN]
      config DLCI_MAX integer {
       prompt "Max DLCI per device" if [NETDEVICES && WAN && DLCI]
       depends on [DLCI]
       default [8] if [NETDEVICES && WAN && DLCI]
       inherited [NETDEVICES && WAN && DLCI]
      }
      config SDLA tristate {
       prompt "SDLA (Sangoma S502/S508) support" if [NETDEVICES && WAN && DLCI && ISA]
       depends on [DLCI && ISA]
       inherited [NETDEVICES && WAN && DLCI && ISA]
      }
     }
     config WAN_ROUTER_DRIVERS tristate {
      prompt "WAN router drivers" if [NETDEVICES && WAN && WAN_ROUTER]
      depends on [WAN_ROUTER]
      inherited [NETDEVICES && WAN && WAN_ROUTER]
      config CYCLADES_SYNC tristate {
       prompt "Cyclom 2X(tm) cards (EXPERIMENTAL)" if [NETDEVICES && WAN && WAN_ROUTER_DRIVERS && (PCI || ISA)]
       depends on [WAN_ROUTER_DRIVERS && (PCI || ISA)]
       inherited [NETDEVICES && WAN && WAN_ROUTER_DRIVERS && (PCI || ISA)]
       config CYCLOMX_X25 boolean {
        prompt "Cyclom 2X X.25 support (EXPERIMENTAL)" if [NETDEVICES && WAN && CYCLADES_SYNC]
        depends on [CYCLADES_SYNC]
        inherited [NETDEVICES && WAN && CYCLADES_SYNC]
       }
      }
     }
     config LAPBETHER tristate {
      prompt "LAPB over Ethernet driver (EXPERIMENTAL)" if [NETDEVICES && WAN && LAPB && X25]
      depends on [LAPB && X25]
      inherited [NETDEVICES && WAN && LAPB && X25]
     }
     config X25_ASY tristate {
      prompt "X.25 async driver (EXPERIMENTAL)" if [NETDEVICES && WAN && LAPB && X25]
      depends on [LAPB && X25]
      inherited [NETDEVICES && WAN && LAPB && X25]
     }
     config SBNI tristate {
      prompt "Granch SBNI12 Leased Line adapter support" if [NETDEVICES && WAN && X86]
      depends on [X86]
      inherited [NETDEVICES && WAN && X86]
      config SBNI_MULTILINE boolean {
       prompt "Multiple line feature support" if [NETDEVICES && WAN && SBNI]
       depends on [SBNI]
       inherited [NETDEVICES && WAN && SBNI]
      }
     }
    }
   }
   menuconfig ATM_DRIVERS boolean {
    prompt "ATM drivers" if [NETDEVICES && ATM]
    depends on [NETDEVICES && ATM]
    default [y] if [NETDEVICES && ATM]
    inherited [NETDEVICES && ATM]
    if [ATM_DRIVERS && NETDEVICES && ATM] {
     config ATM_DUMMY tristate {
      prompt "Dummy ATM driver" if [ATM_DRIVERS && NETDEVICES && ATM]
      inherited [ATM_DRIVERS && NETDEVICES && ATM]
     }
     config ATM_TCP tristate {
      prompt "ATM over TCP" if [ATM_DRIVERS && NETDEVICES && ATM && INET]
      depends on [INET]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && INET]
     }
     config ATM_LANAI tristate {
      prompt "Efficient Networks Speedstream 3010" if [ATM_DRIVERS && NETDEVICES && PCI && ATM]
      depends on [PCI && ATM]
      inherited [ATM_DRIVERS && NETDEVICES && PCI && ATM]
     }
     config ATM_ENI tristate {
      prompt "Efficient Networks ENI155P" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      config ATM_ENI_DEBUG boolean {
       prompt "Enable extended debugging" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
       depends on [ATM_ENI]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
      }
      config ATM_ENI_TUNE_BURST boolean {
       prompt "Fine-tune burst settings" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
       depends on [ATM_ENI]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI]
       config ATM_ENI_BURST_TX_16W boolean {
        prompt "Enable 16W TX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_8W boolean {
        prompt "Enable 8W TX bursts (recommended)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_4W boolean {
        prompt "Enable 4W TX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_TX_2W boolean {
        prompt "Enable 2W TX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_16W boolean {
        prompt "Enable 16W RX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_8W boolean {
        prompt "Enable 8W RX bursts (discouraged)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_4W boolean {
        prompt "Enable 4W RX bursts (recommended)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
       config ATM_ENI_BURST_RX_2W boolean {
        prompt "Enable 2W RX bursts (optional)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
        depends on [ATM_ENI_TUNE_BURST]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ENI_TUNE_BURST]
       }
      }
     }
     config ATM_FIRESTREAM tristate {
      prompt "Fujitsu FireStream (FS50/FS155) " if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
     }
     config ATM_ZATM tristate {
      prompt "ZeitNet ZN1221/ZN1225" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      config ATM_ZATM_DEBUG boolean {
       prompt "Enable extended debugging" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_ZATM]
       depends on [ATM_ZATM]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_ZATM]
      }
     }
     config ATM_NICSTAR tristate {
      prompt "IDT 77201 (NICStAR) (ForeRunnerLE)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT && VIRT_TO_BUS]
      depends on [PCI && !64BIT && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT && VIRT_TO_BUS]
      config ATM_NICSTAR_USE_SUNI boolean {
       prompt "Use suni PHY driver (155Mbps)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
       depends on [ATM_NICSTAR]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
      }
      config ATM_NICSTAR_USE_IDT77105 boolean {
       prompt "Use IDT77015 PHY driver (25Mbps)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
       depends on [ATM_NICSTAR]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_NICSTAR]
      }
     }
     config ATM_IDT77252 tristate {
      prompt "IDT 77252 (NICStAR II)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      config ATM_IDT77252_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
       depends on [ATM_IDT77252]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      }
      config ATM_IDT77252_RCV_ALL boolean {
       prompt "Receive ALL cells in raw queue" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
       depends on [ATM_IDT77252]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      }
      config ATM_IDT77252_USE_SUNI boolean {
       depends on [ATM_IDT77252]
       default [y] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IDT77252]
      }
     }
     config ATM_AMBASSADOR tristate {
      prompt "Madge Ambassador (Collage PCI 155 Server)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      select BITREVERSE if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      config ATM_AMBASSADOR_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_AMBASSADOR]
       depends on [ATM_AMBASSADOR]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_AMBASSADOR]
      }
     }
     config ATM_HORIZON tristate {
      prompt "Madge Horizon [Ultra] (Collage PCI 25 and Collage PCI 155 Client)" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      depends on [PCI && VIRT_TO_BUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && VIRT_TO_BUS]
      config ATM_HORIZON_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_HORIZON]
       depends on [ATM_HORIZON]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_HORIZON]
      }
     }
     config ATM_IA tristate {
      prompt "Interphase ATM PCI x575/x525/x531" if [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT]
      depends on [PCI && !64BIT]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI && !64BIT]
      config ATM_IA_DEBUG boolean {
       prompt "Enable debugging messages" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_IA]
       depends on [ATM_IA]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_IA]
      }
     }
     config ATM_FORE200E_MAYBE tristate {
      prompt "FORE Systems 200E-series" if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
      depends on [PCI || SBUS]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS)]
      config ATM_FORE200E_PCA boolean {
       prompt "PCA-200E support" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_MAYBE && PCI]
       depends on [ATM_FORE200E_MAYBE && PCI]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_MAYBE && PCI]
       config ATM_FORE200E_PCA_DEFAULT_FW boolean {
        prompt "Use default PCA-200E firmware (normally enabled)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_PCA]
        depends on [ATM_FORE200E_PCA]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_PCA]
        config ATM_FORE200E_PCA_FW string {
         prompt "Pathname of user-supplied binary firmware" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
         depends on [ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
         default [""] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
         inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_PCA && !ATM_FORE200E_PCA_DEFAULT_FW]
        }
       }
      }
      config ATM_FORE200E_SBA boolean {
       prompt "SBA-200E support" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_MAYBE && SBUS]
       depends on [ATM_FORE200E_MAYBE && SBUS]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_MAYBE && SBUS]
       config ATM_FORE200E_SBA_DEFAULT_FW boolean {
        prompt "Use default SBA-200E firmware (normally enabled)" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_SBA]
        depends on [ATM_FORE200E_SBA]
        inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_SBA]
        config ATM_FORE200E_SBA_FW string {
         prompt "Pathname of user-supplied binary firmware" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
         depends on [ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
         default [""] if [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
         inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_FORE200E_SBA && !ATM_FORE200E_SBA_DEFAULT_FW]
        }
       }
      }
     }
     config ATM_FORE200E_USE_TASKLET boolean {
      prompt "Defer interrupt work to a tasklet" if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [n] if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_FORE200E_TX_RETRY integer {
      prompt "Maximum number of tx retries" if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [16] if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_FORE200E_DEBUG integer {
      prompt "Debugging level (0-3)" if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [0] if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_FORE200E tristate {
      depends on [(PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
      default [m] if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA) && ATM_FORE200E_MAYBE!="y"]
      default [y] if [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA) && ATM_FORE200E_MAYBE="y"]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && (PCI || SBUS) && (ATM_FORE200E_PCA || ATM_FORE200E_SBA)]
     }
     config ATM_HE tristate {
      prompt "ForeRunner HE Series" if [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      depends on [PCI]
      inherited [ATM_DRIVERS && NETDEVICES && ATM && PCI]
      config ATM_HE_USE_SUNI boolean {
       prompt "Use S/UNI PHY driver" if [ATM_DRIVERS && NETDEVICES && ATM && ATM_HE]
       depends on [ATM_HE]
       inherited [ATM_DRIVERS && NETDEVICES && ATM && ATM_HE]
      }
     }
    }
   }
   menu "S/390 network device drivers" {
    depends on [NETDEVICES && S390]
    config LCS tristate {
     prompt "Lan Channel Station Interface" if [S390 && CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
     depends on [CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
     inherited [S390 && CCW && NETDEVICES && (NET_ETHERNET || TR || FDDI)]
    }
    config CTC tristate {
     prompt "CTC device support" if [S390 && CCW && NETDEVICES]
     depends on [CCW && NETDEVICES]
     inherited [S390 && CCW && NETDEVICES]
    }
    config NETIUCV tristate {
     prompt "IUCV network device support (VM only)" if [S390 && IUCV && NETDEVICES]
     depends on [IUCV && NETDEVICES]
     inherited [S390 && IUCV && NETDEVICES]
    }
    config SMSGIUCV tristate {
     prompt "IUCV special message support (VM only)" if [NETDEVICES && S390 && IUCV]
     depends on [IUCV]
     inherited [NETDEVICES && S390 && IUCV]
    }
    config CLAW tristate {
     prompt "CLAW device support" if [S390 && CCW && NETDEVICES]
     depends on [CCW && NETDEVICES]
     inherited [S390 && CCW && NETDEVICES]
    }
    config QETH tristate {
     prompt "Gigabit Ethernet device support" if [S390 && CCW && NETDEVICES && IP_MULTICAST && QDIO]
     depends on [CCW && NETDEVICES && IP_MULTICAST && QDIO]
     inherited [S390 && CCW && NETDEVICES && IP_MULTICAST && QDIO]
    }
    config QETH_IPV6 boolean {
     prompt "IPv6 support for gigabit ethernet" if [NETDEVICES && S390 && (QETH="IPV6" || QETH && IPV6="y")]
     depends on [QETH="IPV6" || QETH && IPV6="y"]
     inherited [NETDEVICES && S390 && (QETH="IPV6" || QETH && IPV6="y")]
    }
    config QETH_VLAN boolean {
     prompt "VLAN support for gigabit ethernet" if [NETDEVICES && S390 && (QETH="VLAN_8021Q" || QETH && VLAN_8021Q="y")]
     depends on [QETH="VLAN_8021Q" || QETH && VLAN_8021Q="y"]
     inherited [NETDEVICES && S390 && (QETH="VLAN_8021Q" || QETH && VLAN_8021Q="y")]
    }
    config CCWGROUP tristate {
     default [LCS || CTC || QETH] if [NETDEVICES && S390]
     inherited [NETDEVICES && S390]
    }
   }
   config XEN_NETDEV_FRONTEND tristate {
    prompt "Xen network device frontend driver" if [NETDEVICES && XEN]
    depends on [XEN]
    default [y] if [NETDEVICES && XEN]
    inherited [NETDEVICES && XEN]
   }
   config ISERIES_VETH tristate {
    prompt "iSeries Virtual Ethernet driver support" if [NETDEVICES && PPC_ISERIES]
    depends on [PPC_ISERIES]
    inherited [NETDEVICES && PPC_ISERIES]
   }
   config RIONET tristate {
    prompt "RapidIO Ethernet over messaging driver support" if [NETDEVICES && RAPIDIO]
    depends on [RAPIDIO]
    inherited [NETDEVICES && RAPIDIO]
    config RIONET_TX_SIZE integer {
     prompt "Number of outbound queue entries" if [NETDEVICES && RIONET]
     depends on [RIONET]
     default [128] if [NETDEVICES && RIONET]
     inherited [NETDEVICES && RIONET]
    }
    config RIONET_RX_SIZE integer {
     prompt "Number of inbound queue entries" if [NETDEVICES && RIONET]
     depends on [RIONET]
     default [128] if [NETDEVICES && RIONET]
     inherited [NETDEVICES && RIONET]
    }
   }
   config FDDI boolean {
    prompt "FDDI driver support" if [NETDEVICES && (PCI || EISA || TC)]
    depends on [PCI || EISA || TC]
    inherited [NETDEVICES && (PCI || EISA || TC)]
    config DEFXX tristate {
     prompt "Digital DEFTA/DEFEA/DEFPA adapter support" if [NETDEVICES && FDDI && (PCI || EISA || TC)]
     depends on [FDDI && (PCI || EISA || TC)]
     inherited [NETDEVICES && FDDI && (PCI || EISA || TC)]
     config DEFXX_MMIO boolean {
      prompt "Use MMIO instead of PIO" if [NETDEVICES && DEFXX && (PCI || EISA)]
      depends on [DEFXX]
      default [n] if [NETDEVICES && DEFXX && (PCI || EISA)]
      default [y] if [NETDEVICES && DEFXX]
      inherited [NETDEVICES && DEFXX]
     }
    }
    config SKFP tristate {
     prompt "SysKonnect FDDI PCI support" if [NETDEVICES && FDDI && PCI]
     depends on [FDDI && PCI]
     select BITREVERSE if [NETDEVICES && FDDI && PCI]
     inherited [NETDEVICES && FDDI && PCI]
    }
   }
   config HIPPI boolean {
    prompt "HIPPI driver support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && INET && PCI]
    depends on [EXPERIMENTAL && INET && PCI]
    inherited [NETDEVICES && EXPERIMENTAL && INET && PCI]
    config ROADRUNNER tristate {
     prompt "Essential RoadRunner HIPPI PCI adapter support (EXPERIMENTAL)" if [NETDEVICES && HIPPI && PCI]
     depends on [HIPPI && PCI]
     inherited [NETDEVICES && HIPPI && PCI]
     config ROADRUNNER_LARGE_RINGS boolean {
      prompt "Use large TX/RX rings (EXPERIMENTAL)" if [NETDEVICES && ROADRUNNER]
      depends on [ROADRUNNER]
      inherited [NETDEVICES && ROADRUNNER]
     }
    }
   }
   config PLIP tristate {
    prompt "PLIP (parallel port) support" if [NETDEVICES && PARPORT]
    depends on [PARPORT]
    inherited [NETDEVICES && PARPORT]
   }
   config PPP tristate {
    prompt "PPP (point-to-point protocol) support" if [NETDEVICES]
    select SLHC if [NETDEVICES]
    inherited [NETDEVICES]
    config PPP_MULTILINK boolean {
     prompt "PPP multilink support (EXPERIMENTAL)" if [NETDEVICES && PPP && EXPERIMENTAL]
     depends on [PPP && EXPERIMENTAL]
     inherited [NETDEVICES && PPP && EXPERIMENTAL]
    }
    config PPP_FILTER boolean {
     prompt "PPP filtering" if [NETDEVICES && PPP]
     depends on [PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_ASYNC tristate {
     prompt "PPP support for async serial ports" if [NETDEVICES && PPP]
     depends on [PPP]
     select CRC_CCITT if [NETDEVICES && PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_SYNC_TTY tristate {
     prompt "PPP support for sync tty ports" if [NETDEVICES && PPP]
     depends on [PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_DEFLATE tristate {
     prompt "PPP Deflate compression" if [NETDEVICES && PPP]
     depends on [PPP]
     select ZLIB_INFLATE if [NETDEVICES && PPP]
     select ZLIB_DEFLATE if [NETDEVICES && PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_BSDCOMP tristate {
     prompt "PPP BSD-Compress compression" if [NETDEVICES && PPP]
     depends on [PPP]
     inherited [NETDEVICES && PPP]
    }
    config PPP_MPPE tristate {
     prompt "PPP MPPE compression (encryption) (EXPERIMENTAL)" if [NETDEVICES && PPP && EXPERIMENTAL]
     depends on [PPP && EXPERIMENTAL]
     select CRYPTO if [NETDEVICES && PPP && EXPERIMENTAL]
     select CRYPTO_SHA1 if [NETDEVICES && PPP && EXPERIMENTAL]
     select CRYPTO_ARC4 if [NETDEVICES && PPP && EXPERIMENTAL]
     select CRYPTO_ECB if [NETDEVICES && PPP && EXPERIMENTAL]
     inherited [NETDEVICES && PPP && EXPERIMENTAL]
    }
    config PPPOE tristate {
     prompt "PPP over Ethernet (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && PPP]
     depends on [EXPERIMENTAL && PPP]
     inherited [NETDEVICES && EXPERIMENTAL && PPP]
    }
    config PPPOATM tristate {
     prompt "PPP over ATM" if [NETDEVICES && ATM && PPP]
     depends on [ATM && PPP]
     inherited [NETDEVICES && ATM && PPP]
    }
    config PPPOL2TP tristate {
     prompt "PPP over L2TP (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && PPP && INET]
     depends on [EXPERIMENTAL && PPP && INET]
     inherited [NETDEVICES && EXPERIMENTAL && PPP && INET]
    }
   }
   config SLIP tristate {
    prompt "SLIP (serial line) support" if [NETDEVICES]
    inherited [NETDEVICES]
    config SLIP_COMPRESSED boolean {
     prompt "CSLIP compressed headers" if [NETDEVICES && SLIP]
     depends on [SLIP]
     select SLHC if [NETDEVICES && SLIP]
     inherited [NETDEVICES && SLIP]
    }
   }
   config SLHC tristate {
    inherited [NETDEVICES]
   }
   config SLIP_SMART boolean {
    prompt "Keepalive and linefill" if [NETDEVICES && SLIP]
    depends on [SLIP]
    inherited [NETDEVICES && SLIP]
   }
   config SLIP_MODE_SLIP6 boolean {
    prompt "Six bit SLIP encapsulation" if [NETDEVICES && SLIP]
    depends on [SLIP]
    inherited [NETDEVICES && SLIP]
   }
   config NET_FC boolean {
    prompt "Fibre Channel driver support" if [NETDEVICES && SCSI && PCI]
    depends on [SCSI && PCI]
    inherited [NETDEVICES && SCSI && PCI]
   }
   config SHAPER tristate {
    prompt "Traffic Shaper (OBSOLETE)" if [NETDEVICES && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NETDEVICES && EXPERIMENTAL]
   }
   config NETCONSOLE tristate {
    prompt "Network console logging support (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [NETDEVICES && EXPERIMENTAL]
    config NETCONSOLE_DYNAMIC boolean {
     prompt "Dynamic reconfiguration of logging targets (EXPERIMENTAL)" if [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
     depends on [NETCONSOLE && SYSFS && EXPERIMENTAL]
     select CONFIGFS_FS if [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
     inherited [NETDEVICES && NETCONSOLE && SYSFS && EXPERIMENTAL]
    }
   }
   config NETPOLL boolean {
    default [NETCONSOLE] if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config NETPOLL_TRAP boolean {
    prompt "Netpoll traffic trapping" if [NETDEVICES && NETPOLL]
    default [n] if [NETDEVICES && NETPOLL]
    depends on [NETPOLL]
    inherited [NETDEVICES && NETPOLL]
   }
   config NET_POLL_CONTROLLER boolean {
    default [NETPOLL] if [NETDEVICES]
    inherited [NETDEVICES]
   }
   config VIRTIO_NET tristate {
    prompt "Virtio network driver (EXPERIMENTAL)" if [NETDEVICES && EXPERIMENTAL && VIRTIO]
    depends on [EXPERIMENTAL && VIRTIO]
    inherited [NETDEVICES && EXPERIMENTAL && VIRTIO]
   }
  }
 }
 menuconfig ISDN tristate {
  prompt "ISDN support" if [NET && !S390]
  depends on [NET]
  depends on [!S390]
  inherited [NET && !S390]
  if [ISDN] {
   menuconfig ISDN_I4L tristate {
    prompt "Old ISDN4Linux (deprecated)" if [ISDN]
    inherited [ISDN]
    if [ISDN && ISDN_I4L] {
     config ISDN_PPP boolean {
      prompt "Support synchronous PPP" if [ISDN && ISDN_I4L && INET]
      depends on [INET]
      select SLHC if [ISDN && ISDN_I4L && INET]
      inherited [ISDN && ISDN_I4L && INET]
      config ISDN_PPP_VJ boolean {
       prompt "Use VJ-compression with synchronous PPP" if [ISDN && ISDN_I4L && ISDN_PPP]
       depends on [ISDN_PPP]
       inherited [ISDN && ISDN_I4L && ISDN_PPP]
      }
      config ISDN_MPP boolean {
       prompt "Support generic MP (RFC 1717)" if [ISDN && ISDN_I4L && ISDN_PPP]
       depends on [ISDN_PPP]
       inherited [ISDN && ISDN_I4L && ISDN_PPP]
      }
      config IPPP_FILTER boolean {
       prompt "Filtering for synchronous PPP" if [ISDN && ISDN_I4L && ISDN_PPP]
       depends on [ISDN_PPP]
       inherited [ISDN && ISDN_I4L && ISDN_PPP]
      }
      config ISDN_PPP_BSDCOMP tristate {
       prompt "Support BSD compression" if [ISDN && ISDN_I4L && ISDN_PPP]
       depends on [ISDN_PPP]
       inherited [ISDN && ISDN_I4L && ISDN_PPP]
      }
     }
     config ISDN_AUDIO boolean {
      prompt "Support audio via ISDN" if [ISDN && ISDN_I4L]
      inherited [ISDN && ISDN_I4L]
      config ISDN_TTY_FAX boolean {
       prompt "Support AT-Fax Class 1 and 2 commands" if [ISDN && ISDN_I4L && ISDN_AUDIO]
       depends on [ISDN_AUDIO]
       inherited [ISDN && ISDN_I4L && ISDN_AUDIO]
      }
     }
     config ISDN_X25 boolean {
      prompt "X.25 PLP on top of ISDN" if [ISDN && ISDN_I4L && X25]
      depends on [X25]
      inherited [ISDN && ISDN_I4L && X25]
     }
     menu "ISDN feature submodules" {
      depends on [ISDN && ISDN_I4L]
      config ISDN_DRV_LOOP tristate {
       prompt "isdnloop support" if [ISDN && ISDN_I4L && BROKEN_ON_SMP]
       depends on [BROKEN_ON_SMP]
       inherited [ISDN && ISDN_I4L && BROKEN_ON_SMP]
      }
      config ISDN_DIVERSION tristate {
       prompt "Support isdn diversion services" if [ISDN && ISDN_I4L]
       inherited [ISDN && ISDN_I4L]
      }
     }
     menu "Passive cards" {
      depends on [ISDN && ISDN_I4L]
      config ISDN_DRV_HISAX tristate {
       prompt "HiSax SiemensChipSet driver support" if [ISDN && ISDN_I4L]
       select CRC_CCITT if [ISDN && ISDN_I4L]
       inherited [ISDN && ISDN_I4L]
       if [ISDN && ISDN_I4L && ISDN_DRV_HISAX!="n"] {
        config HISAX_EURO boolean {
         prompt "HiSax Support for EURO/DSS1" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         config DE_AOC boolean {
          prompt "Support for german chargeinfo" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          depends on [HISAX_EURO]
          inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         }
         config HISAX_NO_SENDCOMPLETE boolean {
          prompt "Disable sending complete" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          depends on [HISAX_EURO]
          inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         }
         config HISAX_NO_LLC boolean {
          prompt "Disable sending low layer compatibility" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          depends on [HISAX_EURO]
          inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         }
         config HISAX_NO_KEYPAD boolean {
          prompt "Disable keypad protocol option" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
          depends on [HISAX_EURO]
          inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_EURO]
         }
        }
        config HISAX_1TR6 boolean {
         prompt "HiSax Support for german 1TR6" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_NI1 boolean {
         prompt "HiSax Support for US NI1" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_MAX_CARDS integer {
         prompt "Maximum number of cards supported by HiSax" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         default [8] if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_16_0 boolean {
         prompt "Teles 16.0/8.0" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_16_3 boolean {
         prompt "Teles 16.3 or PNP or PCMCIA" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_TELESPCI boolean {
         prompt "Teles PCI" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        }
        config HISAX_S0BOX boolean {
         prompt "Teles S0Box" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_AVM_A1 boolean {
         prompt "AVM A1 (Fritz)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_FRITZPCI boolean {
         prompt "AVM PnP/PCI (Fritz!PnP/PCI)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && (BROKEN || !PPC64)]
         depends on [BROKEN || !PPC64]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && (BROKEN || !PPC64)]
        }
        config HISAX_AVM_A1_PCMCIA boolean {
         prompt "AVM A1 PCMCIA (Fritz)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         depends on [HISAX_AVM_A1_CS]
         default [y] if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_ELSA boolean {
         prompt "Elsa cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_IX1MICROR2 boolean {
         prompt "ITK ix1-micro Revision 2" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_DIEHLDIVA boolean {
         prompt "Eicon.Diehl Diva cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_ASUSCOM boolean {
         prompt "ASUSCOM ISA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_TELEINT boolean {
         prompt "TELEINT cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_HFCS boolean {
         prompt "HFC-S based cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_SEDLBAUER boolean {
         prompt "Sedlbauer cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_SPORTSTER boolean {
         prompt "USR Sportster internal TA" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_MIC boolean {
         prompt "MIC card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_NETJET boolean {
         prompt "NETjet card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        }
        config HISAX_NETJET_U boolean {
         prompt "NETspider U card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        }
        config HISAX_NICCY boolean {
         prompt "Niccy PnP/PCI card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_ISURF boolean {
         prompt "Siemens I-Surf card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_HSTSAPHIR boolean {
         prompt "HST Saphir card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
         depends on [ISA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && ISA]
        }
        config HISAX_BKM_A4T boolean {
         prompt "Telekom A4T card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
         depends on [PCI && PCI_LEGACY]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
        }
        config HISAX_SCT_QUADRO boolean {
         prompt "Scitel Quadro card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
         depends on [PCI && PCI_LEGACY]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
        }
        config HISAX_GAZEL boolean {
         prompt "Gazel cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_HFC_PCI boolean {
         prompt "HFC PCI-Bus cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         depends on [PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        }
        config HISAX_W6692 boolean {
         prompt "Winbond W6692 based cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
         depends on [PCI && PCI_LEGACY]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY]
        }
        config HISAX_HFC_SX boolean {
         prompt "HFC-S+, HFC-SP, HFC-PCMCIA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_ENTERNOW_PCI boolean {
         prompt "Formula-n enter:now PCI card" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_NETJET && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
         depends on [HISAX_NETJET && PCI && PCI_LEGACY && (BROKEN || !(SPARC || PPC || PARISC || M68K || MIPS && !CPU_LITTLE_ENDIAN || FRV))]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_NETJET && PCI && PCI_LEGACY && (BROKEN || !SPARC && !PPC && !PARISC && !M68K && (!MIPS || CPU_LITTLE_ENDIAN) && !FRV)]
        }
       }
       if [ISDN && ISDN_I4L && ISDN_DRV_HISAX] {
        config HISAX_DEBUG boolean {
         prompt "HiSax debugging" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
        }
        config HISAX_SEDLBAUER_CS tristate {
         prompt "Sedlbauer PCMCIA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_SEDLBAUER]
         depends on [PCMCIA && HISAX_SEDLBAUER]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_SEDLBAUER]
        }
        config HISAX_ELSA_CS tristate {
         prompt "ELSA PCMCIA MicroLink cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_ELSA]
         depends on [PCMCIA && HISAX_ELSA]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_ELSA]
        }
        config HISAX_AVM_A1_CS tristate {
         prompt "AVM A1 PCMCIA cards" if [ISDN && ISDN_I4L && PCMCIA && ISDN_DRV_HISAX]
         depends on [PCMCIA && ISDN_DRV_HISAX]
         inherited [ISDN && ISDN_I4L && PCMCIA && ISDN_DRV_HISAX]
        }
        config HISAX_TELES_CS tristate {
         prompt "TELES PCMCIA cards" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_16_3]
         depends on [PCMCIA && HISAX_16_3]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCMCIA && HISAX_16_3]
        }
        config HISAX_ST5481 tristate {
         prompt "ST5481 USB ISDN modem (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
         depends on [USB && EXPERIMENTAL]
         select CRC_CCITT if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
         select BITREVERSE if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
        }
        config HISAX_HFCUSB tristate {
         prompt "HFC USB based ISDN modems (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
         depends on [USB && EXPERIMENTAL]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && USB && EXPERIMENTAL]
        }
        config HISAX_HFC4S8S tristate {
         prompt "HFC-4S/8S based ISDN cards (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL]
         depends on [EXPERIMENTAL]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && EXPERIMENTAL]
        }
        config HISAX_FRITZ_PCIPNP tristate {
         prompt "AVM Fritz!Card PCI/PCIv2/PnP support (EXPERIMENTAL)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && EXPERIMENTAL]
         depends on [PCI && PCI_LEGACY && EXPERIMENTAL]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && PCI && PCI_LEGACY && EXPERIMENTAL]
        }
        config HISAX_HDLC boolean {
         depends on [HISAX_ST5481]
         default [y] if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_ST5481]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_ST5481]
        }
        config HISAX_AVM_A1_PCMCIA boolean {
         prompt "AVM A1 PCMCIA (Fritz)" if [ISDN && ISDN_I4L && ISDN_DRV_HISAX]
         depends on [HISAX_AVM_A1_CS]
         default [y] if [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
         inherited [ISDN && ISDN_I4L && ISDN_DRV_HISAX && HISAX_AVM_A1_CS]
        }
       }
      }
     }
     menu "Active cards" {
      depends on [ISDN && ISDN_I4L]
      config ISDN_DRV_ICN tristate {
       prompt "ICN 2B and 4B support" if [ISDN && ISDN_I4L && ISA]
       depends on [ISA]
       inherited [ISDN && ISDN_I4L && ISA]
      }
      config ISDN_DRV_PCBIT tristate {
       prompt "PCBIT-D support" if [ISDN && ISDN_I4L && ISA && (BROKEN || X86)]
       depends on [ISA && (BROKEN || X86)]
       inherited [ISDN && ISDN_I4L && ISA && (BROKEN || X86)]
      }
      config ISDN_DRV_SC tristate {
       prompt "Spellcaster support" if [ISDN && ISDN_I4L && ISA]
       depends on [ISA]
       inherited [ISDN && ISDN_I4L && ISA]
      }
      config ISDN_DRV_ACT2000 tristate {
       prompt "IBM Active 2000 support" if [ISDN && ISDN_I4L && ISA]
       depends on [ISA]
       inherited [ISDN && ISDN_I4L && ISA]
      }
      config HYSDN tristate {
       prompt "Hypercope HYSDN cards (Champ, Ergo, Metro) support (module only)" if [ISDN && ISDN_I4L && m && <choice> && PROC_FS && PCI && BROKEN_ON_SMP]
       depends on [m && PROC_FS && PCI && BROKEN_ON_SMP]
       inherited [ISDN && ISDN_I4L && m && <choice> && PROC_FS && PCI && BROKEN_ON_SMP]
       config HYSDN_CAPI boolean {
        prompt "HYSDN CAPI 2.0 support" if [ISDN && ISDN_I4L && HYSDN && ISDN_CAPI]
        depends on [HYSDN && ISDN_CAPI]
        inherited [ISDN && ISDN_I4L && HYSDN && ISDN_CAPI]
       }
      }
     }
     menuconfig ISDN_DRV_GIGASET tristate {
      prompt "Siemens Gigaset support (isdn)" if [ISDN && ISDN_I4L]
      select CRC_CCITT if [ISDN && ISDN_I4L]
      select BITREVERSE if [ISDN && ISDN_I4L]
      inherited [ISDN && ISDN_I4L]
      if [ISDN && ISDN_I4L && ISDN_DRV_GIGASET!="n"] {
       config GIGASET_BASE tristate {
        prompt "Gigaset base station support" if [ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
        depends on [ISDN_DRV_GIGASET && USB]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
       }
       config GIGASET_M105 tristate {
        prompt "Gigaset M105 support" if [ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
        depends on [ISDN_DRV_GIGASET && USB]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_GIGASET && USB]
       }
       config GIGASET_M101 tristate {
        prompt "Gigaset M101 support" if [ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
        depends on [ISDN_DRV_GIGASET]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
       }
       config GIGASET_DEBUG boolean {
        prompt "Gigaset debugging" if [ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
       }
       config GIGASET_UNDOCREQ boolean {
        prompt "Support for undocumented USB requests" if [ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
        inherited [ISDN && ISDN_I4L && ISDN_DRV_GIGASET]
       }
      }
     }
    }
   }
   menuconfig ISDN_CAPI tristate {
    prompt "CAPI 2.0 subsystem" if [ISDN]
    inherited [ISDN]
    if [ISDN && ISDN_CAPI] {
     config ISDN_DRV_AVMB1_VERBOSE_REASON boolean {
      prompt "Verbose reason code reporting" if [ISDN && ISDN_CAPI]
      default [y] if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
     }
     config CAPI_TRACE boolean {
      prompt "CAPI trace support" if [ISDN && ISDN_CAPI]
      default [y] if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
     }
     config ISDN_CAPI_MIDDLEWARE boolean {
      prompt "CAPI2.0 Middleware support (EXPERIMENTAL)" if [ISDN && ISDN_CAPI && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      inherited [ISDN && ISDN_CAPI && EXPERIMENTAL]
     }
     config ISDN_CAPI_CAPI20 tristate {
      prompt "CAPI2.0 /dev/capi support" if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
      config ISDN_CAPI_CAPIFS_BOOL boolean {
       prompt "CAPI2.0 filesystem support" if [ISDN && ISDN_CAPI && ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
       depends on [ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
       inherited [ISDN && ISDN_CAPI && ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20]
       config ISDN_CAPI_CAPIFS tristate {
        depends on [ISDN_CAPI_CAPIFS_BOOL]
        default [ISDN_CAPI_CAPI20] if [ISDN && ISDN_CAPI && ISDN_CAPI_CAPIFS_BOOL]
        inherited [ISDN && ISDN_CAPI && ISDN_CAPI_CAPIFS_BOOL]
       }
      }
     }
     config ISDN_CAPI_CAPIDRV tristate {
      prompt "CAPI2.0 capidrv interface support" if [ISDN && ISDN_CAPI && ISDN_I4L]
      depends on [ISDN_I4L]
      inherited [ISDN && ISDN_CAPI && ISDN_I4L]
     }
     menuconfig CAPI_AVM boolean {
      prompt "Active AVM cards" if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
      if [ISDN && ISDN_CAPI && CAPI_AVM] {
       config ISDN_DRV_AVMB1_B1ISA tristate {
        prompt "AVM B1 ISA support" if [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
       }
       config ISDN_DRV_AVMB1_B1PCI tristate {
        prompt "AVM B1 PCI support" if [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        depends on [PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        config ISDN_DRV_AVMB1_B1PCIV4 boolean {
         prompt "AVM B1 PCI V4 support" if [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCI]
         depends on [ISDN_DRV_AVMB1_B1PCI]
         inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCI]
        }
       }
       config ISDN_DRV_AVMB1_T1ISA tristate {
        prompt "AVM T1/T1-B ISA support" if [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
        depends on [ISA]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISA]
       }
       config ISDN_DRV_AVMB1_B1PCMCIA tristate {
        prompt "AVM B1/M1/M2 PCMCIA support" if [ISDN && ISDN_CAPI && CAPI_AVM]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM]
        config ISDN_DRV_AVMB1_AVM_CS tristate {
         prompt "AVM B1/M1/M2 PCMCIA cs module" if [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
         depends on [ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
         inherited [ISDN && ISDN_CAPI && CAPI_AVM && ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA]
        }
       }
       config ISDN_DRV_AVMB1_T1PCI tristate {
        prompt "AVM T1/T1-B PCI support" if [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        depends on [PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
       }
       config ISDN_DRV_AVMB1_C4 tristate {
        prompt "AVM C4/C2 support" if [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
        depends on [PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_AVM && PCI]
       }
      }
     }
     menuconfig CAPI_EICON boolean {
      prompt "Active Eicon DIVA Server cards" if [ISDN && ISDN_CAPI]
      inherited [ISDN && ISDN_CAPI]
      if [ISDN && ISDN_CAPI && CAPI_EICON] {
       config ISDN_DIVAS tristate {
        prompt "Support Eicon DIVA Server cards" if [ISDN && ISDN_CAPI && CAPI_EICON && PROC_FS && PCI]
        depends on [PROC_FS && PCI]
        inherited [ISDN && ISDN_CAPI && CAPI_EICON && PROC_FS && PCI]
        if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS] {
         config ISDN_DIVAS_BRIPCI boolean {
          prompt "DIVA Server BRI/PCI support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_PRIPCI boolean {
          prompt "DIVA Server PRI/PCI support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_DIVACAPI tristate {
          prompt "DIVA CAPI2.0 interface support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_USERIDI tristate {
          prompt "DIVA User-IDI interface support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS]
         }
         config ISDN_DIVAS_MAINT tristate {
          prompt "DIVA Maint driver support" if [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS && m && <choice>]
          depends on [m]
          inherited [ISDN && ISDN_CAPI && CAPI_EICON && ISDN_DIVAS && m && <choice>]
         }
        }
       }
      }
     }
    }
   }
  }
 }
 menuconfig PHONE tristate {
  prompt "Telephony support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [PHONE] {
   config PHONE_IXJ tristate {
    prompt "QuickNet Internet LineJack/PhoneJack support" if [PHONE && (ISA || PCI)]
    depends on [ISA || PCI]
    inherited [PHONE && (ISA || PCI)]
    config PHONE_IXJ_PCMCIA tristate {
     prompt "QuickNet Internet LineJack/PhoneJack PCMCIA support" if [PHONE && PHONE_IXJ && PCMCIA]
     depends on [PHONE_IXJ && PCMCIA]
     inherited [PHONE && PHONE_IXJ && PCMCIA]
    }
   }
  }
 }
 menu "Input device support" {
  depends on [!S390]
  config INPUT tristate {
   prompt "Generic input layer (needed for keyboard, mouse, ...)" if [!S390 && EMBEDDED]
   default [y] if [!S390]
   inherited [!S390]
   if [!S390 && INPUT] {
    config INPUT_FF_MEMLESS tristate {
     prompt "Support for memoryless force-feedback devices" if [!S390 && INPUT]
     default [n] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_POLLDEV tristate {
     prompt "Polled input device skeleton" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_MOUSEDEV tristate {
     prompt "Mouse interface" if [!S390 && INPUT && EMBEDDED]
     default [y] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     config INPUT_MOUSEDEV_PSAUX boolean {
      prompt "Provide legacy /dev/psaux device" if [!S390 && INPUT && INPUT_MOUSEDEV]
      default [y] if [!S390 && INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      inherited [!S390 && INPUT && INPUT_MOUSEDEV]
     }
     config INPUT_MOUSEDEV_SCREEN_X integer {
      prompt "Horizontal screen resolution" if [!S390 && INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      default [1024] if [!S390 && INPUT && INPUT_MOUSEDEV]
      inherited [!S390 && INPUT && INPUT_MOUSEDEV]
     }
     config INPUT_MOUSEDEV_SCREEN_Y integer {
      prompt "Vertical screen resolution" if [!S390 && INPUT && INPUT_MOUSEDEV]
      depends on [INPUT_MOUSEDEV]
      default [768] if [!S390 && INPUT && INPUT_MOUSEDEV]
      inherited [!S390 && INPUT && INPUT_MOUSEDEV]
     }
    }
    config INPUT_JOYDEV tristate {
     prompt "Joystick interface" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_EVDEV tristate {
     prompt "Event interface" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    config INPUT_EVBUG tristate {
     prompt "Event debugging" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
    }
    menuconfig INPUT_KEYBOARD boolean {
     prompt "Keyboards" if [!S390 && INPUT && (EMBEDDED || !X86)]
     default [y] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_KEYBOARD] {
      config KEYBOARD_ATKBD tristate {
       prompt "AT keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && (EMBEDDED || !X86_PC)]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO_LIBPS2 if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO_I8042 if [!S390 && INPUT && INPUT_KEYBOARD && X86_PC]
       select SERIO_GSCPS2 if [!S390 && INPUT && INPUT_KEYBOARD && GSC]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
       config KEYBOARD_ATKBD_HP_KEYCODES boolean {
        prompt "Use HP keyboard scancodes" if [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        depends on [PARISC && KEYBOARD_ATKBD]
        default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        inherited [!S390 && INPUT && INPUT_KEYBOARD && PARISC && KEYBOARD_ATKBD]
        config KEYBOARD_ATKBD_RDI_KEYCODES boolean {
         prompt "Use PrecisionBook keyboard scancodes" if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
         depends on [KEYBOARD_ATKBD_HP_KEYCODES]
         default [n] if [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
         inherited [!S390 && INPUT && INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES]
        }
       }
      }
      config KEYBOARD_SUNKBD tristate {
       prompt "Sun Type 4 and Type 5 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_LKKBD tristate {
       prompt "DECstation/VAXstation LK201/LK401 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_LOCOMO tristate {
       prompt "LoCoMo Keyboard Support" if [!S390 && INPUT && SHARP_LOCOMO && INPUT_KEYBOARD]
       depends on [SHARP_LOCOMO && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && SHARP_LOCOMO && INPUT_KEYBOARD]
      }
      config KEYBOARD_XTKBD tristate {
       prompt "XT keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_NEWTON tristate {
       prompt "Newton keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_STOWAWAY tristate {
       prompt "Stowaway keyboard" if [!S390 && INPUT && INPUT_KEYBOARD]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD]
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_CORGI tristate {
       prompt "Corgi keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      }
      config KEYBOARD_SPITZ tristate {
       prompt "Spitz keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && PXA_SHARPSL]
      }
      config KEYBOARD_AMIGA tristate {
       prompt "Amiga keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && AMIGA]
       depends on [AMIGA]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && AMIGA]
      }
      config ATARI_KBD_CORE boolean {
       inherited [!S390 && INPUT && INPUT_KEYBOARD]
      }
      config KEYBOARD_ATARI tristate {
       prompt "Atari keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
       depends on [ATARI]
       select ATARI_KBD_CORE if [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && ATARI]
      }
      config KEYBOARD_HIL_OLD tristate {
       prompt "HP HIL keyboard support (simple driver)" if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       depends on [GSC || HP300]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      }
      config KEYBOARD_HIL tristate {
       prompt "HP HIL keyboard support" if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       depends on [GSC || HP300]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select HP_SDC if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select HIL_MLC if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       select SERIO if [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (GSC || HP300)]
      }
      config KEYBOARD_HP6XX tristate {
       prompt "HP Jornada 6xx keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
       depends on [SH_HP6XX]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SH_HP6XX]
      }
      config KEYBOARD_HP7XX tristate {
       prompt "HP Jornada 7xx keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SA1100_JORNADA720_SSP && SA1100_SSP]
       depends on [SA1100_JORNADA720_SSP && SA1100_SSP]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SA1100_JORNADA720_SSP && SA1100_SSP]
      }
      config KEYBOARD_OMAP tristate {
       prompt "TI OMAP keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
       depends on [ARCH_OMAP1 || ARCH_OMAP2]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)]
      }
      config KEYBOARD_PXA27x tristate {
       prompt "PXA27x keyboard support" if [!S390 && INPUT && INPUT_KEYBOARD && PXA27x]
       depends on [PXA27x]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && PXA27x]
      }
      config KEYBOARD_AAED2000 tristate {
       prompt "AAED-2000 keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       depends on [MACH_AAED2000]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       default [y] if [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && MACH_AAED2000]
      }
      config KEYBOARD_GPIO tristate {
       prompt "GPIO Buttons" if [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
       depends on [GENERIC_GPIO]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && GENERIC_GPIO]
      }
      config KEYBOARD_MAPLE tristate {
       prompt "Maple bus keyboard" if [!S390 && INPUT && INPUT_KEYBOARD && SH_DREAMCAST && MAPLE]
       depends on [SH_DREAMCAST && MAPLE]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && SH_DREAMCAST && MAPLE]
      }
      config KEYBOARD_BFIN tristate {
       prompt "Blackfin BF54x keypad support" if [!S390 && INPUT && INPUT_KEYBOARD && BF54x && !BF544]
       depends on [BF54x && !BF544]
       inherited [!S390 && INPUT && INPUT_KEYBOARD && BF54x && !BF544]
      }
     }
    }
    menuconfig INPUT_MOUSE boolean {
     prompt "Mice" if [!S390 && INPUT]
     default [y] if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_MOUSE] {
      config MOUSE_PS2 tristate {
       prompt "PS/2 mouse" if [!S390 && INPUT && INPUT_MOUSE]
       default [y] if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO_LIBPS2 if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO_I8042 if [!S390 && INPUT && INPUT_MOUSE && X86_PC]
       select SERIO_GSCPS2 if [!S390 && INPUT && INPUT_MOUSE && GSC]
       inherited [!S390 && INPUT && INPUT_MOUSE]
       config MOUSE_PS2_ALPS boolean {
        prompt "ALPS PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_LOGIPS2PP boolean {
        prompt "Logitech PS/2++ mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_SYNAPTICS boolean {
        prompt "Synaptics PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_LIFEBOOK boolean {
        prompt "Fujitsu Lifebook PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_TRACKPOINT boolean {
        prompt "IBM Trackpoint PS/2 mouse protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2 && EMBEDDED]
        default [y] if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
       config MOUSE_PS2_TOUCHKIT boolean {
        prompt "eGalax TouchKit PS/2 protocol extension" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
        depends on [MOUSE_PS2]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_PS2]
       }
      }
      config MOUSE_SERIAL tristate {
       prompt "Serial mouse" if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO if [!S390 && INPUT && INPUT_MOUSE]
       inherited [!S390 && INPUT && INPUT_MOUSE]
      }
      config MOUSE_APPLETOUCH tristate {
       prompt "Apple USB Touchpad support" if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MOUSE && USB_ARCH_HAS_HCD]
      }
      config MOUSE_INPORT tristate {
       prompt "InPort/MS/ATIXL busmouse" if [!S390 && INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
       config MOUSE_ATIXL boolean {
        prompt "ATI XL variant" if [!S390 && INPUT && INPUT_MOUSE && MOUSE_INPORT]
        depends on [MOUSE_INPORT]
        inherited [!S390 && INPUT && INPUT_MOUSE && MOUSE_INPORT]
       }
      }
      config MOUSE_LOGIBM tristate {
       prompt "Logitech busmouse" if [!S390 && INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
      }
      config MOUSE_PC110PAD tristate {
       prompt "IBM PC110 touchpad" if [!S390 && INPUT && INPUT_MOUSE && ISA]
       depends on [ISA]
       inherited [!S390 && INPUT && INPUT_MOUSE && ISA]
      }
      config MOUSE_AMIGA tristate {
       prompt "Amiga mouse" if [!S390 && INPUT && INPUT_MOUSE && AMIGA]
       depends on [AMIGA]
       inherited [!S390 && INPUT && INPUT_MOUSE && AMIGA]
      }
      config MOUSE_ATARI tristate {
       prompt "Atari mouse" if [!S390 && INPUT && INPUT_MOUSE && ATARI]
       depends on [ATARI]
       select ATARI_KBD_CORE if [!S390 && INPUT && INPUT_MOUSE && ATARI]
       inherited [!S390 && INPUT && INPUT_MOUSE && ATARI]
      }
      config MOUSE_RISCPC tristate {
       prompt "Acorn RiscPC mouse" if [!S390 && INPUT && INPUT_MOUSE && ARCH_ACORN]
       depends on [ARCH_ACORN]
       inherited [!S390 && INPUT && INPUT_MOUSE && ARCH_ACORN]
      }
      config MOUSE_VSXXXAA tristate {
       prompt "DEC VSXXX-AA/GA mouse and VSXXX-AB tablet" if [!S390 && INPUT && INPUT_MOUSE]
       select SERIO if [!S390 && INPUT && INPUT_MOUSE]
       inherited [!S390 && INPUT && INPUT_MOUSE]
      }
      config MOUSE_HIL tristate {
       prompt "HIL pointers (mice etc)." if [!S390 && INPUT && INPUT_MOUSE && (GSC || HP300)]
       depends on [GSC || HP300]
       select HP_SDC if [!S390 && INPUT && INPUT_MOUSE && (GSC || HP300)]
       select HIL_MLC if [!S390 && INPUT && INPUT_MOUSE && (GSC || HP300)]
       inherited [!S390 && INPUT && INPUT_MOUSE && (GSC || HP300)]
      }
      config MOUSE_GPIO tristate {
       prompt "GPIO mouse" if [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
       depends on [GENERIC_GPIO]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
       inherited [!S390 && INPUT && INPUT_MOUSE && GENERIC_GPIO]
      }
     }
    }
    menuconfig INPUT_JOYSTICK boolean {
     prompt "Joysticks/Gamepads" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_JOYSTICK] {
      config JOYSTICK_ANALOG tristate {
       prompt "Classic PC analog joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_A3D tristate {
       prompt "Assassin 3D and MadCatz Panther devices" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_ADI tristate {
       prompt "Logitech ADI digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_COBRA tristate {
       prompt "Creative Labs Blaster Cobra gamepad" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GF2K tristate {
       prompt "Genius Flight2000 Digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GRIP tristate {
       prompt "Gravis GrIP joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GRIP_MP tristate {
       prompt "Gravis GrIP MultiPort" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_GUILLEMOT tristate {
       prompt "Guillemot joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_INTERACT tristate {
       prompt "InterAct digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SIDEWINDER tristate {
       prompt "Microsoft SideWinder digital joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_TMDC tristate {
       prompt "ThrustMaster DirectConnect joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_IFORCE tristate {
       prompt "I-Force devices" if [!S390 && INPUT && INPUT_JOYSTICK]
       depends on [INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
       config JOYSTICK_IFORCE_USB boolean {
        prompt "I-Force USB joysticks and wheels" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
        depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
        inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || USB="y") && USB]
       }
       config JOYSTICK_IFORCE_232 boolean {
        prompt "I-Force Serial joysticks and wheels" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
        depends on [JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
        inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_IFORCE && (JOYSTICK_IFORCE="m" || SERIO="y") && SERIO]
       }
      }
      config JOYSTICK_WARRIOR tristate {
       prompt "Logitech WingMan Warrior joystick" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_MAGELLAN tristate {
       prompt "LogiCad3d Magellan/SpaceMouse 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SPACEORB tristate {
       prompt "SpaceTec SpaceOrb/Avenger 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_SPACEBALL tristate {
       prompt "SpaceTec SpaceBall 6dof controllers" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_STINGER tristate {
       prompt "Gravis Stinger gamepad" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_TWIDJOY tristate {
       prompt "Twiddler as a joystick" if [!S390 && INPUT && INPUT_JOYSTICK]
       select SERIO if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_DB9 tristate {
       prompt "Multisystem, Sega Genesis, Saturn joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_GAMECON tristate {
       prompt "Multisystem, NES, SNES, N64, PSX joysticks and gamepads" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_TURBOGRAFX tristate {
       prompt "Multisystem joysticks via TurboGraFX device" if [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
       depends on [PARPORT]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && PARPORT]
      }
      config JOYSTICK_AMIGA tristate {
       prompt "Amiga joysticks" if [!S390 && INPUT && INPUT_JOYSTICK && AMIGA]
       depends on [AMIGA]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && AMIGA]
      }
      config JOYSTICK_JOYDUMP tristate {
       prompt "Gameport data dumper" if [!S390 && INPUT && INPUT_JOYSTICK]
       select GAMEPORT if [!S390 && INPUT && INPUT_JOYSTICK]
       inherited [!S390 && INPUT && INPUT_JOYSTICK]
      }
      config JOYSTICK_XPAD tristate {
       prompt "X-Box gamepad support" if [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_JOYSTICK && USB_ARCH_HAS_HCD]
       config JOYSTICK_XPAD_FF boolean {
        prompt "X-Box gamepad rumble support" if [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
        depends on [JOYSTICK_XPAD && INPUT]
        select INPUT_FF_MEMLESS if [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
        inherited [!S390 && INPUT_JOYSTICK && JOYSTICK_XPAD && INPUT]
       }
       config JOYSTICK_XPAD_LEDS boolean {
        prompt "LED Support for Xbox360 controller 'BigX' LED" if [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
        depends on [JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
        inherited [!S390 && INPUT && INPUT_JOYSTICK && JOYSTICK_XPAD && (LEDS_CLASS="y" || LEDS_CLASS="JOYSTICK_XPAD")]
       }
      }
     }
    }
    menuconfig INPUT_TABLET boolean {
     prompt "Tablets" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_TABLET] {
      config TABLET_USB_ACECAD tristate {
       prompt "Acecad Flair tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
      config TABLET_USB_AIPTEK tristate {
       prompt "Aiptek 6000U/8000U tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
      config TABLET_USB_GTCO tristate {
       prompt "GTCO CalComp/InterWrite USB Support" if [!S390 && INPUT_TABLET && USB && INPUT]
       depends on [USB && INPUT]
       inherited [!S390 && INPUT_TABLET && USB && INPUT]
      }
      config TABLET_USB_KBTAB tristate {
       prompt "KB Gear JamStudio tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
      config TABLET_USB_WACOM tristate {
       prompt "Wacom Intuos/Graphire tablet support (USB)" if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TABLET && USB_ARCH_HAS_HCD]
      }
     }
    }
    menuconfig INPUT_TOUCHSCREEN boolean {
     prompt "Touchscreens" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_TOUCHSCREEN] {
      config TOUCHSCREEN_ADS7846 tristate {
       prompt "ADS7846/TSC2046 and ADS7843 based touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && (HWMON="n" || HWMON)]
       depends on [SPI_MASTER]
       depends on [HWMON="n" || HWMON]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SPI_MASTER && (HWMON="n" || HWMON)]
      }
      config TOUCHSCREEN_BITSY tristate {
       prompt "Compaq iPAQ H3600 (Bitsy) touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
       depends on [SA1100_BITSY]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_BITSY]
      }
      config TOUCHSCREEN_CORGI tristate {
       prompt "SharpSL (Corgi and Spitz series) touchscreen driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
       depends on [PXA_SHARPSL]
       default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && PXA_SHARPSL]
      }
      config TOUCHSCREEN_FUJITSU tristate {
       prompt "Fujitsu serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_GUNZE tristate {
       prompt "Gunze AHL-51S touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_ELO tristate {
       prompt "Elo serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_MTOUCH tristate {
       prompt "MicroTouch serial touchscreens" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_MK712 tristate {
       prompt "ICS MicroClock MK712 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_HP600 tristate {
       prompt "HP Jornada 6xx touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
       depends on [SH_HP6XX && SH_ADC]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SH_HP6XX && SH_ADC]
      }
      config TOUCHSCREEN_HP7XX tristate {
       prompt "HP Jornada 7xx touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_JORNADA720_SSP]
       depends on [SA1100_JORNADA720_SSP]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && SA1100_JORNADA720_SSP]
      }
      config TOUCHSCREEN_PENMOUNT tristate {
       prompt "Penmount serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_TOUCHRIGHT tristate {
       prompt "Touchright serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_TOUCHWIN tristate {
       prompt "Touchwin serial touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select SERIO if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_UCB1400 tristate {
       prompt "Philips UCB1400 touchscreen" if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       select AC97_BUS if [!S390 && INPUT && INPUT_TOUCHSCREEN]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN]
      }
      config TOUCHSCREEN_USB_COMPOSITE tristate {
       prompt "USB Touchscreen Driver" if [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD]
       config TOUCHSCREEN_USB_EGALAX boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "eGalax, eTurboTouch CT-410/510/700 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_PANJIT boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "PanJit device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_3M boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "3M/Microtouch EX II series device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_ITM boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "ITM device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_ETURBO boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "eTurboTouch (non-eGalax compatible) device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_GUNZE boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "Gunze AHL61 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_DMC_TSC10 boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "DMC TSC-10/25 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_IRTOUCH boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "IRTOUCHSYSTEMS/UNITOP device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_IDEALTEK boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "IdealTEK URTC1000 device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_GENERAL_TOUCH boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "GeneralTouch Touchscreen device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
       config TOUCHSCREEN_USB_GOTOP boolean {
        default [y] if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
        prompt "GoTop Super_Q2/GogoPen/PenPower tablet device support" if [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE && EMBEDDED]
        depends on [TOUCHSCREEN_USB_COMPOSITE]
        inherited [!S390 && INPUT && INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE]
       }
      }
     }
    }
    menuconfig INPUT_MISC boolean {
     prompt "Miscellaneous devices" if [!S390 && INPUT]
     inherited [!S390 && INPUT]
     if [!S390 && INPUT && INPUT_MISC] {
      config INPUT_PCSPKR tristate {
       prompt "PC Speaker support" if [!S390 && INPUT && INPUT_MISC && (ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES)]
       depends on [ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES]
       inherited [!S390 && INPUT && INPUT_MISC && (ALPHA || X86 || MIPS || PPC_PREP || PPC_CHRP || PPC_PSERIES)]
      }
      config INPUT_SPARCSPKR tristate {
       prompt "SPARC Speaker support" if [!S390 && INPUT && INPUT_MISC && PCI && SPARC64]
       depends on [PCI && SPARC64]
       inherited [!S390 && INPUT && INPUT_MISC && PCI && SPARC64]
      }
      config INPUT_M68K_BEEP tristate {
       prompt "M68k Beeper support" if [!S390 && INPUT && INPUT_MISC && M68K]
       depends on [M68K]
       inherited [!S390 && INPUT && INPUT_MISC && M68K]
      }
      config INPUT_IXP4XX_BEEPER tristate {
       prompt "IXP4XX Beeper support" if [!S390 && INPUT && INPUT_MISC && ARCH_IXP4XX]
       depends on [ARCH_IXP4XX]
       inherited [!S390 && INPUT && INPUT_MISC && ARCH_IXP4XX]
      }
      config INPUT_COBALT_BTNS tristate {
       prompt "Cobalt button interface" if [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
       depends on [MIPS_COBALT]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
       inherited [!S390 && INPUT && INPUT_MISC && MIPS_COBALT]
      }
      config INPUT_WISTRON_BTNS tristate {
       prompt "x86 Wistron laptop button interface" if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       depends on [X86 && !X86_64]
       select INPUT_POLLDEV if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       select NEW_LEDS if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       select LEDS_CLASS if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       select CHECK_SIGNATURE if [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
       inherited [!S390 && INPUT && INPUT_MISC && X86 && !X86_64]
      }
      config INPUT_ATLAS_BTNS tristate {
       prompt "x86 Atlas button interface" if [!S390 && INPUT && INPUT_MISC && X86 && ACPI]
       depends on [X86 && ACPI]
       inherited [!S390 && INPUT && INPUT_MISC && X86 && ACPI]
      }
      config INPUT_ATI_REMOTE tristate {
       prompt "ATI / X10 USB RF remote control" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      }
      config INPUT_ATI_REMOTE2 tristate {
       prompt "ATI / Philips USB RF remote control" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      }
      config INPUT_KEYSPAN_REMOTE tristate {
       prompt "Keyspan DMR USB remote control (EXPERIMENTAL)" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       depends on [EXPERIMENTAL]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      }
      config INPUT_POWERMATE tristate {
       prompt "Griffin PowerMate and Contour Jog support" if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && USB_ARCH_HAS_HCD]
      }
      config INPUT_YEALINK tristate {
       prompt "Yealink usb-p1k voip phone" if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       depends on [EXPERIMENTAL]
       depends on [USB_ARCH_HAS_HCD]
       select USB if [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
       inherited [!S390 && INPUT && INPUT_MISC && EXPERIMENTAL && USB_ARCH_HAS_HCD]
      }
      config INPUT_UINPUT tristate {
       prompt "User level driver support" if [!S390 && INPUT && INPUT_MISC]
       inherited [!S390 && INPUT && INPUT_MISC]
      }
      config HP_SDC_RTC tristate {
       prompt "HP SDC Real Time Clock" if [!S390 && INPUT && INPUT_MISC && (GSC || HP300)]
       depends on [GSC || HP300]
       select HP_SDC if [!S390 && INPUT && INPUT_MISC && (GSC || HP300)]
       inherited [!S390 && INPUT && INPUT_MISC && (GSC || HP300)]
      }
     }
    }
   }
  }
  menu "Hardware I/O ports" {
   depends on [!S390]
   config SERIO tristate {
    prompt "Serial I/O support" if [!S390 && (EMBEDDED || !X86)]
    default [y] if [!S390]
    inherited [!S390]
    if [!S390 && SERIO] {
     config SERIO_I8042 tristate {
      prompt "i8042 PC Keyboard controller" if [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN && (EMBEDDED || !X86)]
      default [y] if [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
      depends on [!PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
      inherited [!S390 && SERIO && !PARISC && (!ARM || ARCH_SHARK || FOOTBRIDGE_HOST) && !M68K && !BLACKFIN]
     }
     config SERIO_SERPORT tristate {
      prompt "Serial port line discipline" if [!S390 && SERIO]
      default [y] if [!S390 && SERIO]
      inherited [!S390 && SERIO]
     }
     config SERIO_CT82C710 tristate {
      prompt "ct82c710 Aux port controller" if [!S390 && SERIO && X86]
      depends on [X86]
      inherited [!S390 && SERIO && X86]
     }
     config SERIO_Q40KBD tristate {
      prompt "Q40 keyboard controller" if [!S390 && SERIO && Q40]
      depends on [Q40]
      inherited [!S390 && SERIO && Q40]
     }
     config SERIO_PARKBD tristate {
      prompt "Parallel port keyboard adapter" if [!S390 && SERIO && PARPORT]
      depends on [PARPORT]
      inherited [!S390 && SERIO && PARPORT]
     }
     config SERIO_RPCKBD tristate {
      prompt "Acorn RiscPC keyboard controller" if [!S390 && SERIO && (ARCH_ACORN || ARCH_CLPS7500)]
      depends on [ARCH_ACORN || ARCH_CLPS7500]
      default [y] if [!S390 && SERIO && (ARCH_ACORN || ARCH_CLPS7500)]
      inherited [!S390 && SERIO && (ARCH_ACORN || ARCH_CLPS7500)]
     }
     config SERIO_AMBAKMI tristate {
      prompt "AMBA KMI keyboard controller" if [!S390 && SERIO && ARM_AMBA]
      depends on [ARM_AMBA]
      inherited [!S390 && SERIO && ARM_AMBA]
     }
     config SERIO_SA1111 tristate {
      prompt "Intel SA1111 keyboard controller" if [!S390 && SERIO && SA1111]
      depends on [SA1111]
      inherited [!S390 && SERIO && SA1111]
     }
     config SERIO_GSCPS2 tristate {
      prompt "HP GSC PS/2 keyboard and PS/2 mouse controller" if [!S390 && SERIO && GSC]
      depends on [GSC]
      default [y] if [!S390 && SERIO && GSC]
      inherited [!S390 && SERIO && GSC]
     }
     config HP_SDC tristate {
      prompt "HP System Device Controller i8042 Support" if [!S390 && (GSC || HP300) && SERIO]
      depends on [(GSC || HP300) && SERIO]
      default [y] if [!S390 && (GSC || HP300) && SERIO]
      inherited [!S390 && (GSC || HP300) && SERIO]
      config HIL_MLC tristate {
       prompt "HIL MLC Support (needed for HIL input devices)" if [!S390 && SERIO && HP_SDC]
       depends on [HP_SDC]
       inherited [!S390 && SERIO && HP_SDC]
      }
     }
     config SERIO_PCIPS2 tristate {
      prompt "PCI PS/2 keyboard and PS/2 mouse controller" if [!S390 && SERIO && PCI]
      depends on [PCI]
      inherited [!S390 && SERIO && PCI]
     }
     config SERIO_MACEPS2 tristate {
      prompt "SGI O2 MACE PS/2 controller" if [!S390 && SERIO && SGI_IP32]
      depends on [SGI_IP32]
      inherited [!S390 && SERIO && SGI_IP32]
     }
     config SERIO_LIBPS2 tristate {
      prompt "PS/2 driver library" if [!S390 && SERIO && EMBEDDED]
      inherited [!S390 && SERIO]
     }
     config SERIO_RAW tristate {
      prompt "Raw access to serio ports" if [!S390 && SERIO]
      inherited [!S390 && SERIO]
     }
    }
   }
   config GAMEPORT tristate {
    prompt "Gameport support" if [!S390]
    inherited [!S390]
    if [!S390 && GAMEPORT] {
     config GAMEPORT_NS558 tristate {
      prompt "Classic ISA and PnP gameport support" if [!S390 && GAMEPORT]
      inherited [!S390 && GAMEPORT]
     }
     config GAMEPORT_L4 tristate {
      prompt "PDPI Lightning 4 gamecard support" if [!S390 && GAMEPORT]
      inherited [!S390 && GAMEPORT]
     }
     config GAMEPORT_EMU10K1 tristate {
      prompt "SB Live and Audigy gameport support" if [!S390 && GAMEPORT && PCI]
      depends on [PCI]
      inherited [!S390 && GAMEPORT && PCI]
     }
     config GAMEPORT_FM801 tristate {
      prompt "ForteMedia FM801 gameport support" if [!S390 && GAMEPORT && PCI]
      depends on [PCI]
      inherited [!S390 && GAMEPORT && PCI]
     }
    }
   }
  }
 }
 menu "Character devices" {
  config VT boolean {
   prompt "Virtual terminal" if [!S390 && EMBEDDED]
   depends on [!S390]
   select INPUT if [!S390]
   default [y] if [!S390 && !VIOCONS]
   inherited [!S390]
   config VT_CONSOLE boolean {
    prompt "Support for console on virtual terminal" if [VT && EMBEDDED]
    depends on [VT]
    default [y] if [VT]
    inherited [VT]
   }
   config HW_CONSOLE boolean {
    depends on [VT && !S390 && !UML]
    default [y] if [VT && !S390 && !UML]
    inherited [VT && !S390 && !UML]
   }
   config VT_HW_CONSOLE_BINDING boolean {
    prompt "Support for binding and unbinding console drivers" if [HW_CONSOLE]
    depends on [HW_CONSOLE]
    default [n] if [HW_CONSOLE]
    inherited [HW_CONSOLE]
   }
  }
  config SERIAL_NONSTANDARD boolean {
   prompt "Non-standard serial port support" if [HAS_IOMEM]
   depends on [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config COMPUTONE tristate {
    prompt "Computone IntelliPort Plus serial support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config ROCKETPORT tristate {
    prompt "Comtrol RocketPort support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config CYCLADES tristate {
    prompt "Cyclades async mux support" if [SERIAL_NONSTANDARD && (PCI || ISA)]
    depends on [SERIAL_NONSTANDARD && (PCI || ISA)]
    select FW_LOADER if [SERIAL_NONSTANDARD && (PCI || ISA)]
    inherited [SERIAL_NONSTANDARD && (PCI || ISA)]
    config CYZ_INTR boolean {
     prompt "Cyclades-Z interrupt mode operation (EXPERIMENTAL)" if [EXPERIMENTAL && CYCLADES]
     depends on [EXPERIMENTAL && CYCLADES]
     inherited [EXPERIMENTAL && CYCLADES]
    }
   }
   config DIGIEPCA tristate {
    prompt "Digiboard Intelligent Async Support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config ESPSERIAL tristate {
    prompt "Hayes ESP serial port support" if [SERIAL_NONSTANDARD && ISA && ISA_DMA_API]
    depends on [SERIAL_NONSTANDARD && ISA && ISA_DMA_API]
    inherited [SERIAL_NONSTANDARD && ISA && ISA_DMA_API]
   }
   config MOXA_INTELLIO tristate {
    prompt "Moxa Intellio support" if [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    depends on [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
    inherited [SERIAL_NONSTANDARD && (ISA || EISA || PCI)]
   }
   config MOXA_SMARTIO tristate {
    prompt "Moxa SmartIO support (OBSOLETE)" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config MOXA_SMARTIO_NEW tristate {
    prompt "Moxa SmartIO support v. 2.0" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
   }
   config ISI tristate {
    prompt "Multi-Tech multiport card support (EXPERIMENTAL)" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    select FW_LOADER if [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config SYNCLINK tristate {
    prompt "Microgate SyncLink card support" if [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
    depends on [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
    inherited [SERIAL_NONSTANDARD && PCI && ISA_DMA_API]
   }
   config SYNCLINKMP tristate {
    prompt "SyncLink Multiport support" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config SYNCLINK_GT tristate {
    prompt "SyncLink GT/AC support" if [SERIAL_NONSTANDARD && PCI]
    depends on [SERIAL_NONSTANDARD && PCI]
    inherited [SERIAL_NONSTANDARD && PCI]
   }
   config N_HDLC tristate {
    prompt "HDLC line discipline support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
   }
   config RISCOM8 tristate {
    prompt "SDL RISCom/8 card support" if [SERIAL_NONSTANDARD && BROKEN_ON_SMP]
    depends on [SERIAL_NONSTANDARD && BROKEN_ON_SMP]
    inherited [SERIAL_NONSTANDARD && BROKEN_ON_SMP]
   }
   config SPECIALIX tristate {
    prompt "Specialix IO8+ card support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config SPECIALIX_RTSCTS boolean {
     prompt "Specialix DTR/RTS pin is RTS" if [SPECIALIX]
     depends on [SPECIALIX]
     inherited [SPECIALIX]
    }
   }
   config SX tristate {
    prompt "Specialix SX (and SI) card support" if [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    depends on [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
    inherited [SERIAL_NONSTANDARD && (PCI || EISA || ISA)]
   }
   config RIO tristate {
    prompt "Specialix RIO system support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config RIO_OLDPCI boolean {
     prompt "Support really old RIO/PCI cards" if [RIO]
     depends on [RIO]
     inherited [RIO]
    }
   }
   config STALDRV boolean {
    prompt "Stallion multiport serial support" if [SERIAL_NONSTANDARD]
    depends on [SERIAL_NONSTANDARD]
    inherited [SERIAL_NONSTANDARD]
    config STALLION tristate {
     prompt "Stallion EasyIO or EC8/32 support" if [STALDRV && BROKEN_ON_SMP && (ISA || EISA || PCI)]
     depends on [STALDRV && BROKEN_ON_SMP && (ISA || EISA || PCI)]
     inherited [STALDRV && BROKEN_ON_SMP && (ISA || EISA || PCI)]
    }
    config ISTALLION tristate {
     prompt "Stallion EC8/64, ONboard, Brumby support" if [STALDRV && BROKEN_ON_SMP && (ISA || EISA || PCI)]
     depends on [STALDRV && BROKEN_ON_SMP && (ISA || EISA || PCI)]
     inherited [STALDRV && BROKEN_ON_SMP && (ISA || EISA || PCI)]
    }
   }
  }
  config A2232 tristate {
   prompt "Commodore A2232 serial support (EXPERIMENTAL)" if [EXPERIMENTAL && ZORRO && BROKEN_ON_SMP]
   depends on [EXPERIMENTAL && ZORRO && BROKEN_ON_SMP]
   inherited [EXPERIMENTAL && ZORRO && BROKEN_ON_SMP]
  }
  config SGI_SNSC boolean {
   prompt "SGI Altix system controller communication support" if [IA64_SGI_SN2 || IA64_GENERIC]
   depends on [IA64_SGI_SN2 || IA64_GENERIC]
   inherited [IA64_SGI_SN2 || IA64_GENERIC]
  }
  config SGI_TIOCX boolean {
   prompt "SGI TIO CX driver support" if [IA64_SGI_SN2 || IA64_GENERIC]
   depends on [IA64_SGI_SN2 || IA64_GENERIC]
   inherited [IA64_SGI_SN2 || IA64_GENERIC]
   config SGI_MBCS tristate {
    prompt "SGI FPGA Core Services driver support" if [SGI_TIOCX]
    depends on [SGI_TIOCX]
    inherited [SGI_TIOCX]
   }
  }
  menu "Serial drivers" {
   depends on [HAS_IOMEM]
   config SERIAL_8250 tristate {
    prompt "8250/16550 and compatible serial support" if [HAS_IOMEM && (BROKEN || !SPARC)]
    depends on [BROKEN || !SPARC]
    select SERIAL_CORE if [HAS_IOMEM && (BROKEN || !SPARC)]
    inherited [HAS_IOMEM && (BROKEN || !SPARC)]
    config SERIAL_8250_CONSOLE boolean {
     prompt "Console on 8250/16550 and compatible serial port" if [HAS_IOMEM && SERIAL_8250="y"]
     depends on [SERIAL_8250="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_8250="y"]
     inherited [HAS_IOMEM && SERIAL_8250="y"]
    }
   }
   config FIX_EARLYCON_MEM boolean {
    depends on [X86]
    default [y] if [HAS_IOMEM && X86]
    inherited [HAS_IOMEM && X86]
   }
   config SERIAL_8250_GSC tristate {
    depends on [SERIAL_8250 && GSC]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && GSC]
    inherited [HAS_IOMEM && SERIAL_8250 && GSC]
   }
   config SERIAL_8250_PCI tristate {
    prompt "8250/16550 PCI device support" if [HAS_IOMEM && SERIAL_8250 && PCI && EMBEDDED]
    depends on [SERIAL_8250 && PCI]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && PCI]
    inherited [HAS_IOMEM && SERIAL_8250 && PCI]
   }
   config SERIAL_8250_PNP tristate {
    prompt "8250/16550 PNP device support" if [HAS_IOMEM && SERIAL_8250 && PNP && EMBEDDED]
    depends on [SERIAL_8250 && PNP]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && PNP]
    inherited [HAS_IOMEM && SERIAL_8250 && PNP]
   }
   config SERIAL_8250_HP300 tristate {
    depends on [SERIAL_8250 && HP300]
    default [SERIAL_8250] if [HAS_IOMEM && SERIAL_8250 && HP300]
    inherited [HAS_IOMEM && SERIAL_8250 && HP300]
   }
   config SERIAL_8250_CS tristate {
    prompt "8250/16550 PCMCIA device support" if [HAS_IOMEM && PCMCIA && SERIAL_8250]
    depends on [PCMCIA && SERIAL_8250]
    inherited [HAS_IOMEM && PCMCIA && SERIAL_8250]
   }
   config SERIAL_8250_NR_UARTS integer {
    prompt "Maximum number of 8250/16550 serial ports" if [HAS_IOMEM && SERIAL_8250]
    depends on [SERIAL_8250]
    default [4] if [HAS_IOMEM && SERIAL_8250]
    inherited [HAS_IOMEM && SERIAL_8250]
   }
   config SERIAL_8250_RUNTIME_UARTS integer {
    prompt "Number of 8250/16550 serial ports to register at runtime" if [HAS_IOMEM && SERIAL_8250]
    depends on [SERIAL_8250]
    range [0 SERIAL_8250_NR_UARTS] if [HAS_IOMEM && SERIAL_8250]
    default [4] if [HAS_IOMEM && SERIAL_8250]
    inherited [HAS_IOMEM && SERIAL_8250]
   }
   config SERIAL_8250_EXTENDED boolean {
    prompt "Extended 8250/16550 serial driver options" if [HAS_IOMEM && SERIAL_8250]
    depends on [SERIAL_8250]
    inherited [HAS_IOMEM && SERIAL_8250]
    config SERIAL_8250_MANY_PORTS boolean {
     prompt "Support more than 4 legacy serial ports" if [HAS_IOMEM && SERIAL_8250_EXTENDED && !IA64]
     depends on [SERIAL_8250_EXTENDED && !IA64]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED && !IA64]
     config SERIAL_8250_FOURPORT tristate {
      prompt "Support Fourport cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_ACCENT tristate {
      prompt "Support Accent cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_BOCA tristate {
      prompt "Support Boca cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_EXAR_ST16C554 tristate {
      prompt "Support Exar ST16C554/554D Quad UART" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
     config SERIAL_8250_HUB6 tristate {
      prompt "Support Hub6 cards" if [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      depends on [SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
      inherited [HAS_IOMEM && SERIAL_8250!="n" && ISA && SERIAL_8250_MANY_PORTS]
     }
    }
    config SERIAL_8250_SHARE_IRQ boolean {
     prompt "Support for sharing serial interrupts" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
     depends on [SERIAL_8250_EXTENDED]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
    }
    config SERIAL_8250_DETECT_IRQ boolean {
     prompt "Autodetect IRQ on standard ports (unsafe)" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
     depends on [SERIAL_8250_EXTENDED]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
    }
    config SERIAL_8250_RSA boolean {
     prompt "Support RSA serial ports" if [HAS_IOMEM && SERIAL_8250_EXTENDED]
     depends on [SERIAL_8250_EXTENDED]
     inherited [HAS_IOMEM && SERIAL_8250_EXTENDED]
    }
   }
   config SERIAL_8250_MCA tristate {
    prompt "Support 8250-type ports on MCA buses" if [HAS_IOMEM && SERIAL_8250!="n" && MCA]
    depends on [SERIAL_8250!="n" && MCA]
    inherited [HAS_IOMEM && SERIAL_8250!="n" && MCA]
   }
   config SERIAL_8250_ACORN tristate {
    prompt "Acorn expansion card serial port support" if [HAS_IOMEM && ARCH_ACORN && SERIAL_8250]
    depends on [ARCH_ACORN && SERIAL_8250]
    inherited [HAS_IOMEM && ARCH_ACORN && SERIAL_8250]
   }
   config SERIAL_8250_AU1X00 boolean {
    prompt "AU1X00 serial port support" if [HAS_IOMEM && SERIAL_8250 && SOC_AU1X00]
    depends on [SERIAL_8250 && SOC_AU1X00]
    inherited [HAS_IOMEM && SERIAL_8250 && SOC_AU1X00]
   }
   config SERIAL_8250_RM9K boolean {
    prompt "Support for MIPS RM9xxx integrated serial port" if [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
    depends on [SERIAL_8250 && SERIAL_RM9000]
    select SERIAL_8250_SHARE_IRQ if [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
    inherited [HAS_IOMEM && SERIAL_8250 && SERIAL_RM9000]
   }
   config SERIAL_AMBA_PL010 tristate {
    prompt "ARM AMBA PL010 serial port support" if [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    depends on [ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    select SERIAL_CORE if [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    inherited [HAS_IOMEM && ARM_AMBA && (BROKEN || !ARCH_VERSATILE)]
    config SERIAL_AMBA_PL010_CONSOLE boolean {
     prompt "Support for console on AMBA serial port" if [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
     depends on [SERIAL_AMBA_PL010="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
     inherited [HAS_IOMEM && SERIAL_AMBA_PL010="y"]
    }
   }
   config SERIAL_AMBA_PL011 tristate {
    prompt "ARM AMBA PL011 serial port support" if [HAS_IOMEM && ARM_AMBA]
    depends on [ARM_AMBA]
    select SERIAL_CORE if [HAS_IOMEM && ARM_AMBA]
    inherited [HAS_IOMEM && ARM_AMBA]
    config SERIAL_AMBA_PL011_CONSOLE boolean {
     prompt "Support for console on AMBA serial port" if [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
     depends on [SERIAL_AMBA_PL011="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
     inherited [HAS_IOMEM && SERIAL_AMBA_PL011="y"]
    }
   }
   config SERIAL_SB1250_DUART tristate {
    prompt "BCM1xxx on-chip DUART serial support" if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    depends on [SIBYTE_SB1xxx_SOC="y"]
    select SERIAL_CORE if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    default [y] if [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    inherited [HAS_IOMEM && SIBYTE_SB1xxx_SOC="y"]
    config SERIAL_SB1250_DUART_CONSOLE boolean {
     prompt "Support for console on a BCM1xxx DUART serial port" if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
     depends on [SERIAL_SB1250_DUART="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
     default [y] if [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
     inherited [HAS_IOMEM && SERIAL_SB1250_DUART="y"]
    }
   }
   config SERIAL_ATMEL boolean {
    prompt "AT91 / AT32 on-chip serial port support" if [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
    depends on [ARM && ARCH_AT91 || AVR32]
    select SERIAL_CORE if [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
    inherited [HAS_IOMEM && (ARM && ARCH_AT91 || AVR32)]
    config SERIAL_ATMEL_CONSOLE boolean {
     prompt "Support for console on AT91 / AT32 serial port" if [HAS_IOMEM && SERIAL_ATMEL]
     depends on [SERIAL_ATMEL="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_ATMEL]
     inherited [HAS_IOMEM && SERIAL_ATMEL]
    }
    config SERIAL_ATMEL_TTYAT boolean {
     prompt "Install as device ttyATn instead of ttySn" if [HAS_IOMEM && SERIAL_ATMEL]
     depends on [SERIAL_ATMEL="y"]
     inherited [HAS_IOMEM && SERIAL_ATMEL]
    }
   }
   config SERIAL_KS8695 boolean {
    prompt "Micrel KS8695 (Centaur) serial port support" if [HAS_IOMEM && ARCH_KS8695]
    depends on [ARCH_KS8695]
    select SERIAL_CORE if [HAS_IOMEM && ARCH_KS8695]
    inherited [HAS_IOMEM && ARCH_KS8695]
    config SERIAL_KS8695_CONSOLE boolean {
     prompt "Support for console on KS8695 (Centaur) serial port" if [HAS_IOMEM && SERIAL_KS8695]
     depends on [SERIAL_KS8695="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_KS8695]
     inherited [HAS_IOMEM && SERIAL_KS8695]
    }
   }
   config SERIAL_CLPS711X tristate {
    prompt "CLPS711X serial port support" if [HAS_IOMEM && ARM && ARCH_CLPS711X]
    depends on [ARM && ARCH_CLPS711X]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_CLPS711X]
    inherited [HAS_IOMEM && ARM && ARCH_CLPS711X]
    config SERIAL_CLPS711X_CONSOLE boolean {
     prompt "Support for console on CLPS711X serial port" if [HAS_IOMEM && SERIAL_CLPS711X="y"]
     depends on [SERIAL_CLPS711X="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_CLPS711X="y"]
     inherited [HAS_IOMEM && SERIAL_CLPS711X="y"]
    }
   }
   config SERIAL_S3C2410 tristate {
    prompt "Samsung S3C2410/S3C2440/S3C2442/S3C2412 Serial port support" if [HAS_IOMEM && ARM && ARCH_S3C2410]
    depends on [ARM && ARCH_S3C2410]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_S3C2410]
    inherited [HAS_IOMEM && ARM && ARCH_S3C2410]
    config SERIAL_S3C2410_CONSOLE boolean {
     prompt "Support for console on S3C2410 serial port" if [HAS_IOMEM && SERIAL_S3C2410="y"]
     depends on [SERIAL_S3C2410="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_S3C2410="y"]
     inherited [HAS_IOMEM && SERIAL_S3C2410="y"]
    }
   }
   config SERIAL_DZ boolean {
    prompt "DECstation DZ serial driver" if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
    depends on [MACH_DECSTATION && 32BIT]
    select SERIAL_CORE if [HAS_IOMEM && MACH_DECSTATION && 32BIT]
    inherited [HAS_IOMEM && MACH_DECSTATION && 32BIT]
    config SERIAL_DZ_CONSOLE boolean {
     prompt "Support console on DECstation DZ serial driver" if [HAS_IOMEM && SERIAL_DZ]
     depends on [SERIAL_DZ="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_DZ]
     inherited [HAS_IOMEM && SERIAL_DZ]
    }
   }
   config SERIAL_ZS tristate {
    prompt "DECstation Z85C30 serial support" if [HAS_IOMEM && MACH_DECSTATION]
    depends on [MACH_DECSTATION]
    select SERIAL_CORE if [HAS_IOMEM && MACH_DECSTATION]
    default [y] if [HAS_IOMEM && MACH_DECSTATION]
    inherited [HAS_IOMEM && MACH_DECSTATION]
    config SERIAL_ZS_CONSOLE boolean {
     prompt "Support for console on a DECstation Z85C30 serial port" if [HAS_IOMEM && SERIAL_ZS="y"]
     depends on [SERIAL_ZS="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_ZS="y"]
     default [y] if [HAS_IOMEM && SERIAL_ZS="y"]
     inherited [HAS_IOMEM && SERIAL_ZS="y"]
    }
   }
   config SERIAL_21285 tristate {
    prompt "DC21285 serial port support" if [HAS_IOMEM && ARM && FOOTBRIDGE]
    depends on [ARM && FOOTBRIDGE]
    select SERIAL_CORE if [HAS_IOMEM && ARM && FOOTBRIDGE]
    inherited [HAS_IOMEM && ARM && FOOTBRIDGE]
    config SERIAL_21285_CONSOLE boolean {
     prompt "Console on DC21285 serial port" if [HAS_IOMEM && SERIAL_21285="y"]
     depends on [SERIAL_21285="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_21285="y"]
     inherited [HAS_IOMEM && SERIAL_21285="y"]
    }
   }
   config SERIAL_MPSC boolean {
    prompt "Marvell MPSC serial port support" if [HAS_IOMEM && PPC32 && MV64X60]
    depends on [PPC32 && MV64X60]
    select SERIAL_CORE if [HAS_IOMEM && PPC32 && MV64X60]
    inherited [HAS_IOMEM && PPC32 && MV64X60]
    config SERIAL_MPSC_CONSOLE boolean {
     prompt "Support for console on Marvell MPSC serial port" if [HAS_IOMEM && SERIAL_MPSC]
     depends on [SERIAL_MPSC]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MPSC]
     inherited [HAS_IOMEM && SERIAL_MPSC]
    }
   }
   config SERIAL_PXA boolean {
    prompt "PXA serial port support" if [HAS_IOMEM && ARM && ARCH_PXA]
    depends on [ARM && ARCH_PXA]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_PXA]
    inherited [HAS_IOMEM && ARM && ARCH_PXA]
    config SERIAL_PXA_CONSOLE boolean {
     prompt "Console on PXA serial port" if [HAS_IOMEM && SERIAL_PXA]
     depends on [SERIAL_PXA]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PXA]
     inherited [HAS_IOMEM && SERIAL_PXA]
    }
   }
   config SERIAL_SA1100 boolean {
    prompt "SA1100 serial port support" if [HAS_IOMEM && ARM && ARCH_SA1100]
    depends on [ARM && ARCH_SA1100]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_SA1100]
    inherited [HAS_IOMEM && ARM && ARCH_SA1100]
    config SERIAL_SA1100_CONSOLE boolean {
     prompt "Console on SA1100 serial port" if [HAS_IOMEM && SERIAL_SA1100]
     depends on [SERIAL_SA1100]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SA1100]
     inherited [HAS_IOMEM && SERIAL_SA1100]
    }
   }
   config SERIAL_BFIN tristate {
    prompt "Blackfin serial port support" if [HAS_IOMEM && BLACKFIN]
    depends on [BLACKFIN]
    select SERIAL_CORE if [HAS_IOMEM && BLACKFIN]
    select SERIAL_BFIN_UART0 if [HAS_IOMEM && BLACKFIN && (BF531 || BF532 || BF533 || BF561)]
    inherited [HAS_IOMEM && BLACKFIN]
    config SERIAL_BFIN_CONSOLE boolean {
     prompt "Console on Blackfin serial port" if [HAS_IOMEM && SERIAL_BFIN="y"]
     depends on [SERIAL_BFIN="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_BFIN="y"]
     inherited [HAS_IOMEM && SERIAL_BFIN="y"]
    }
    choice boolean {
     prompt "UART Mode" if [HAS_IOMEM && SERIAL_BFIN]
     depends on [SERIAL_BFIN]
     default [SERIAL_BFIN_DMA] if [HAS_IOMEM && SERIAL_BFIN]
     config SERIAL_BFIN_DMA boolean {
      prompt "DMA mode" if [<choice> && !DMA_UNCACHED_NONE && !KGDB_UART]
      depends on [!DMA_UNCACHED_NONE && !KGDB_UART]
      inherited [<choice> && !DMA_UNCACHED_NONE && !KGDB_UART]
     }
     config SERIAL_BFIN_PIO boolean {
      prompt "PIO mode" if [<choice>]
      inherited [<choice>]
     }
    }
    config SERIAL_BFIN_UART0 boolean {
     prompt "Enable UART0" if [HAS_IOMEM && SERIAL_BFIN]
     depends on [SERIAL_BFIN]
     inherited [HAS_IOMEM && SERIAL_BFIN]
     config BFIN_UART0_CTSRTS boolean {
      prompt "Enable UART0 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART0]
      depends on [SERIAL_BFIN_UART0]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART0]
      config UART0_CTS_PIN integer {
       prompt "UART0 CTS pin" if [HAS_IOMEM && BFIN_UART0_CTSRTS]
       depends on [BFIN_UART0_CTSRTS]
       default [23] if [HAS_IOMEM && BFIN_UART0_CTSRTS]
       inherited [HAS_IOMEM && BFIN_UART0_CTSRTS]
      }
      config UART0_RTS_PIN integer {
       prompt "UART0 RTS pin" if [HAS_IOMEM && BFIN_UART0_CTSRTS]
       depends on [BFIN_UART0_CTSRTS]
       default [22] if [HAS_IOMEM && BFIN_UART0_CTSRTS]
       inherited [HAS_IOMEM && BFIN_UART0_CTSRTS]
      }
     }
    }
    config SERIAL_BFIN_UART1 boolean {
     prompt "Enable UART1" if [HAS_IOMEM && SERIAL_BFIN && (BF534 || BF536 || BF537 || BF54x)]
     depends on [SERIAL_BFIN && (BF534 || BF536 || BF537 || BF54x)]
     inherited [HAS_IOMEM && SERIAL_BFIN && (BF534 || BF536 || BF537 || BF54x)]
     config BFIN_UART1_CTSRTS boolean {
      prompt "Enable UART1 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART1]
      depends on [SERIAL_BFIN_UART1]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART1]
      config UART1_CTS_PIN integer {
       prompt "UART1 CTS pin" if [HAS_IOMEM && BFIN_UART1_CTSRTS && (BF53x || BF561)]
       depends on [BFIN_UART1_CTSRTS && (BF53x || BF561)]
       default [-1] if [HAS_IOMEM && BFIN_UART1_CTSRTS && (BF53x || BF561)]
       inherited [HAS_IOMEM && BFIN_UART1_CTSRTS && (BF53x || BF561)]
      }
      config UART1_RTS_PIN integer {
       prompt "UART1 RTS pin" if [HAS_IOMEM && BFIN_UART1_CTSRTS && (BF53x || BF561)]
       depends on [BFIN_UART1_CTSRTS && (BF53x || BF561)]
       default [-1] if [HAS_IOMEM && BFIN_UART1_CTSRTS && (BF53x || BF561)]
       inherited [HAS_IOMEM && BFIN_UART1_CTSRTS && (BF53x || BF561)]
      }
     }
    }
    config SERIAL_BFIN_UART2 boolean {
     prompt "Enable UART2" if [HAS_IOMEM && SERIAL_BFIN && BF54x]
     depends on [SERIAL_BFIN && BF54x]
     inherited [HAS_IOMEM && SERIAL_BFIN && BF54x]
     config BFIN_UART2_CTSRTS boolean {
      prompt "Enable UART2 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART2]
      depends on [SERIAL_BFIN_UART2]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART2]
      config UART2_CTS_PIN integer {
       prompt "UART2 CTS pin" if [HAS_IOMEM && BFIN_UART2_CTSRTS]
       depends on [BFIN_UART2_CTSRTS]
       default [-1] if [HAS_IOMEM && BFIN_UART2_CTSRTS]
       inherited [HAS_IOMEM && BFIN_UART2_CTSRTS]
      }
      config UART2_RTS_PIN integer {
       prompt "UART2 RTS pin" if [HAS_IOMEM && BFIN_UART2_CTSRTS]
       depends on [BFIN_UART2_CTSRTS]
       default [-1] if [HAS_IOMEM && BFIN_UART2_CTSRTS]
       inherited [HAS_IOMEM && BFIN_UART2_CTSRTS]
      }
     }
    }
    config SERIAL_BFIN_UART3 boolean {
     prompt "Enable UART3" if [HAS_IOMEM && SERIAL_BFIN && BF54x]
     depends on [SERIAL_BFIN && BF54x]
     inherited [HAS_IOMEM && SERIAL_BFIN && BF54x]
     config BFIN_UART3_CTSRTS boolean {
      prompt "Enable UART3 hardware flow control" if [HAS_IOMEM && SERIAL_BFIN_UART3]
      depends on [SERIAL_BFIN_UART3]
      inherited [HAS_IOMEM && SERIAL_BFIN_UART3]
     }
    }
   }
   config SERIAL_IMX boolean {
    prompt "IMX serial port support" if [HAS_IOMEM && ARM && ARCH_IMX]
    depends on [ARM && ARCH_IMX]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_IMX]
    inherited [HAS_IOMEM && ARM && ARCH_IMX]
    config SERIAL_IMX_CONSOLE boolean {
     prompt "Console on IMX serial port" if [HAS_IOMEM && SERIAL_IMX]
     depends on [SERIAL_IMX]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_IMX]
     inherited [HAS_IOMEM && SERIAL_IMX]
    }
   }
   config SERIAL_UARTLITE tristate {
    prompt "Xilinx uartlite serial port support" if [HAS_IOMEM && PPC32]
    depends on [PPC32]
    select SERIAL_CORE if [HAS_IOMEM && PPC32]
    inherited [HAS_IOMEM && PPC32]
    config SERIAL_UARTLITE_CONSOLE boolean {
     prompt "Support for console on Xilinx uartlite serial port" if [HAS_IOMEM && SERIAL_UARTLITE="y"]
     depends on [SERIAL_UARTLITE="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_UARTLITE="y"]
     inherited [HAS_IOMEM && SERIAL_UARTLITE="y"]
    }
   }
   config SERIAL_SUNCORE boolean {
    depends on [SPARC]
    select SERIAL_CORE if [HAS_IOMEM && SPARC]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SPARC]
    default [y] if [HAS_IOMEM && SPARC]
    inherited [HAS_IOMEM && SPARC]
   }
   config SERIAL_SUNZILOG tristate {
    prompt "Sun Zilog8530 serial support" if [HAS_IOMEM && SPARC]
    depends on [SPARC]
    inherited [HAS_IOMEM && SPARC]
    config SERIAL_SUNZILOG_CONSOLE boolean {
     prompt "Console on Sun Zilog8530 serial port" if [HAS_IOMEM && SERIAL_SUNZILOG="y"]
     depends on [SERIAL_SUNZILOG="y"]
     inherited [HAS_IOMEM && SERIAL_SUNZILOG="y"]
    }
   }
   config SERIAL_SUNSU tristate {
    prompt "Sun SU serial support" if [HAS_IOMEM && SPARC && PCI]
    depends on [SPARC && PCI]
    inherited [HAS_IOMEM && SPARC && PCI]
    config SERIAL_SUNSU_CONSOLE boolean {
     prompt "Console on Sun SU serial port" if [HAS_IOMEM && SERIAL_SUNSU="y"]
     depends on [SERIAL_SUNSU="y"]
     inherited [HAS_IOMEM && SERIAL_SUNSU="y"]
    }
   }
   config SERIAL_MUX tristate {
    prompt "Serial MUX support" if [HAS_IOMEM && GSC]
    depends on [GSC]
    select SERIAL_CORE if [HAS_IOMEM && GSC]
    default [y] if [HAS_IOMEM && GSC]
    inherited [HAS_IOMEM && GSC]
    config SERIAL_MUX_CONSOLE boolean {
     prompt "Support for console on serial MUX" if [HAS_IOMEM && SERIAL_MUX="y"]
     depends on [SERIAL_MUX="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MUX="y"]
     default [y] if [HAS_IOMEM && SERIAL_MUX="y"]
     inherited [HAS_IOMEM && SERIAL_MUX="y"]
    }
   }
   config PDC_CONSOLE boolean {
    prompt "PDC software console support" if [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
    depends on [PARISC && !SERIAL_MUX && VT]
    default [n] if [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
    inherited [HAS_IOMEM && PARISC && !SERIAL_MUX && VT]
   }
   config SERIAL_SUNSAB tristate {
    prompt "Sun Siemens SAB82532 serial support" if [HAS_IOMEM && SPARC && PCI]
    depends on [SPARC && PCI]
    inherited [HAS_IOMEM && SPARC && PCI]
    config SERIAL_SUNSAB_CONSOLE boolean {
     prompt "Console on Sun Siemens SAB82532 serial port" if [HAS_IOMEM && SERIAL_SUNSAB="y"]
     depends on [SERIAL_SUNSAB="y"]
     inherited [HAS_IOMEM && SERIAL_SUNSAB="y"]
    }
   }
   config SERIAL_SUNHV boolean {
    prompt "Sun4v Hypervisor Console support" if [HAS_IOMEM && SPARC64]
    depends on [SPARC64]
    inherited [HAS_IOMEM && SPARC64]
   }
   config SERIAL_IP22_ZILOG tristate {
    prompt "IP22 Zilog8530 serial support" if [HAS_IOMEM && SGI_IP22]
    depends on [SGI_IP22]
    select SERIAL_CORE if [HAS_IOMEM && SGI_IP22]
    inherited [HAS_IOMEM && SGI_IP22]
    config SERIAL_IP22_ZILOG_CONSOLE boolean {
     prompt "Console on IP22 Zilog8530 serial port" if [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
     depends on [SERIAL_IP22_ZILOG="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
     inherited [HAS_IOMEM && SERIAL_IP22_ZILOG="y"]
    }
   }
   config V850E_UART boolean {
    prompt "NEC V850E on-chip UART support" if [HAS_IOMEM && (V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1)]
    depends on [V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1]
    select SERIAL_CORE if [HAS_IOMEM && (V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1)]
    default [y] if [HAS_IOMEM && (V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1)]
    inherited [HAS_IOMEM && (V850E_MA1 || V850E_ME2 || V850E_TEG || V850E2_ANNA || V850E_AS85EP1)]
    config V850E_UARTB boolean {
     depends on [V850E_UART && V850E_ME2]
     default [y] if [HAS_IOMEM && V850E_UART && V850E_ME2]
     inherited [HAS_IOMEM && V850E_UART && V850E_ME2]
    }
    config V850E_UART_CONSOLE boolean {
     prompt "Use NEC V850E on-chip UART for console" if [HAS_IOMEM && V850E_UART]
     depends on [V850E_UART]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && V850E_UART]
     inherited [HAS_IOMEM && V850E_UART]
    }
   }
   config SERIAL_SH_SCI tristate {
    prompt "SuperH SCI(F) serial port support" if [HAS_IOMEM && (SUPERH || H8300)]
    depends on [SUPERH || H8300]
    select SERIAL_CORE if [HAS_IOMEM && (SUPERH || H8300)]
    inherited [HAS_IOMEM && (SUPERH || H8300)]
    config SERIAL_SH_SCI_NR_UARTS integer {
     prompt "Maximum number of SCI(F) serial ports" if [HAS_IOMEM && SERIAL_SH_SCI]
     depends on [SERIAL_SH_SCI]
     default [2] if [HAS_IOMEM && SERIAL_SH_SCI]
     inherited [HAS_IOMEM && SERIAL_SH_SCI]
    }
    config SERIAL_SH_SCI_CONSOLE boolean {
     prompt "Support for console on SuperH SCI(F)" if [HAS_IOMEM && SERIAL_SH_SCI="y"]
     depends on [SERIAL_SH_SCI="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_SH_SCI="y"]
     inherited [HAS_IOMEM && SERIAL_SH_SCI="y"]
    }
   }
   config SERIAL_PNX8XXX boolean {
    prompt "Enable PNX8XXX SoCs' UART Support" if [HAS_IOMEM && MIPS && SOC_PNX8550]
    depends on [MIPS && SOC_PNX8550]
    select SERIAL_CORE if [HAS_IOMEM && MIPS && SOC_PNX8550]
    inherited [HAS_IOMEM && MIPS && SOC_PNX8550]
    config SERIAL_PNX8XXX_CONSOLE boolean {
     prompt "Enable PNX8XX0 serial console" if [HAS_IOMEM && SERIAL_PNX8XXX]
     depends on [SERIAL_PNX8XXX]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PNX8XXX]
     inherited [HAS_IOMEM && SERIAL_PNX8XXX]
    }
   }
   config SERIAL_CORE tristate {
    inherited [HAS_IOMEM]
   }
   config SERIAL_CORE_CONSOLE boolean {
    inherited [HAS_IOMEM]
   }
   config SERIAL_68328 boolean {
    prompt "68328 serial support" if [HAS_IOMEM && (M68328 || M68EZ328 || M68VZ328)]
    depends on [M68328 || M68EZ328 || M68VZ328]
    inherited [HAS_IOMEM && (M68328 || M68EZ328 || M68VZ328)]
    config SERIAL_68328_RTS_CTS boolean {
     prompt "Support RTS/CTS on 68328 serial port" if [HAS_IOMEM && SERIAL_68328]
     depends on [SERIAL_68328]
     inherited [HAS_IOMEM && SERIAL_68328]
    }
   }
   config SERIAL_COLDFIRE boolean {
    prompt "ColdFire serial support" if [HAS_IOMEM && COLDFIRE]
    depends on [COLDFIRE]
    inherited [HAS_IOMEM && COLDFIRE]
   }
   config SERIAL_68360_SMC boolean {
    prompt "68360 SMC uart support" if [HAS_IOMEM && M68360]
    depends on [M68360]
    inherited [HAS_IOMEM && M68360]
   }
   config SERIAL_68360_SCC boolean {
    prompt "68360 SCC uart support" if [HAS_IOMEM && M68360]
    depends on [M68360]
    inherited [HAS_IOMEM && M68360]
   }
   config SERIAL_68360 boolean {
    depends on [SERIAL_68360_SMC || SERIAL_68360_SCC]
    default [y] if [HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC)]
    inherited [HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC)]
   }
   config SERIAL_PMACZILOG tristate {
    prompt "PowerMac z85c30 ESCC support" if [HAS_IOMEM && PPC_OF && PPC_PMAC]
    depends on [PPC_OF && PPC_PMAC]
    select SERIAL_CORE if [HAS_IOMEM && PPC_OF && PPC_PMAC]
    inherited [HAS_IOMEM && PPC_OF && PPC_PMAC]
    config SERIAL_PMACZILOG_TTYS boolean {
     prompt "Use ttySn device nodes for Zilog z85c30" if [HAS_IOMEM && SERIAL_PMACZILOG]
     depends on [SERIAL_PMACZILOG]
     inherited [HAS_IOMEM && SERIAL_PMACZILOG]
    }
    config SERIAL_PMACZILOG_CONSOLE boolean {
     prompt "Console on PowerMac z85c30 serial port" if [HAS_IOMEM && SERIAL_PMACZILOG="y"]
     depends on [SERIAL_PMACZILOG="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_PMACZILOG="y"]
     inherited [HAS_IOMEM && SERIAL_PMACZILOG="y"]
    }
   }
   config SERIAL_LH7A40X tristate {
    prompt "Sharp LH7A40X embedded UART support" if [HAS_IOMEM && ARM && ARCH_LH7A40X]
    depends on [ARM && ARCH_LH7A40X]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_LH7A40X]
    inherited [HAS_IOMEM && ARM && ARCH_LH7A40X]
    config SERIAL_LH7A40X_CONSOLE boolean {
     prompt "Support for console on Sharp LH7A40X serial port" if [HAS_IOMEM && SERIAL_LH7A40X="y"]
     depends on [SERIAL_LH7A40X="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_LH7A40X="y"]
     inherited [HAS_IOMEM && SERIAL_LH7A40X="y"]
    }
   }
   config SERIAL_CPM tristate {
    prompt "CPM SCC/SMC serial port support" if [HAS_IOMEM && (CPM2 || 8xx)]
    depends on [CPM2 || 8xx]
    select SERIAL_CORE if [HAS_IOMEM && (CPM2 || 8xx)]
    inherited [HAS_IOMEM && (CPM2 || 8xx)]
    config SERIAL_CPM_CONSOLE boolean {
     prompt "Support for console on CPM SCC/SMC serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC1 boolean {
     prompt "Support for SCC1 serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC2 boolean {
     prompt "Support for SCC2 serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC3 boolean {
     prompt "Support for SCC3 serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SCC4 boolean {
     prompt "Support for SCC4 serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SMC1 boolean {
     prompt "Support for SMC1 serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
    config SERIAL_CPM_SMC2 boolean {
     prompt "Support for SMC2 serial port" if [HAS_IOMEM && SERIAL_CPM="y"]
     depends on [SERIAL_CPM="y"]
     inherited [HAS_IOMEM && SERIAL_CPM="y"]
    }
   }
   config SERIAL_SGI_L1_CONSOLE boolean {
    prompt "SGI Altix L1 serial console support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
    depends on [IA64_GENERIC || IA64_SGI_SN2]
    select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
    inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)]
   }
   config SERIAL_MPC52xx tristate {
    prompt "Freescale MPC52xx family PSC serial support" if [HAS_IOMEM && PPC_MPC52xx]
    depends on [PPC_MPC52xx]
    select SERIAL_CORE if [HAS_IOMEM && PPC_MPC52xx]
    inherited [HAS_IOMEM && PPC_MPC52xx]
    config SERIAL_MPC52xx_CONSOLE boolean {
     prompt "Console on a Freescale MPC52xx family PSC serial port" if [HAS_IOMEM && SERIAL_MPC52xx="y"]
     depends on [SERIAL_MPC52xx="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_MPC52xx="y"]
     inherited [HAS_IOMEM && SERIAL_MPC52xx="y"]
     config SERIAL_MPC52xx_CONSOLE_BAUD integer {
      prompt "Freescale MPC52xx family PSC serial port baud" if [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
      depends on [SERIAL_MPC52xx_CONSOLE="y"]
      default [9600] if [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
      inherited [HAS_IOMEM && SERIAL_MPC52xx_CONSOLE]
     }
    }
   }
   config SERIAL_ICOM tristate {
    prompt "IBM Multiport Serial Adapter" if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
    depends on [PCI && (PPC_ISERIES || PPC_PSERIES)]
    select SERIAL_CORE if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
    select FW_LOADER if [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
    inherited [HAS_IOMEM && PCI && (PPC_ISERIES || PPC_PSERIES)]
   }
   config SERIAL_M32R_SIO boolean {
    prompt "M32R SIO I/F" if [HAS_IOMEM && M32R]
    depends on [M32R]
    default [y] if [HAS_IOMEM && M32R]
    select SERIAL_CORE if [HAS_IOMEM && M32R]
    inherited [HAS_IOMEM && M32R]
    config SERIAL_M32R_SIO_CONSOLE boolean {
     prompt "use SIO console" if [HAS_IOMEM && SERIAL_M32R_SIO]
     depends on [SERIAL_M32R_SIO="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_M32R_SIO]
     inherited [HAS_IOMEM && SERIAL_M32R_SIO]
    }
    config SERIAL_M32R_PLDSIO boolean {
     prompt "M32R SIO I/F on a PLD" if [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     depends on [SERIAL_M32R_SIO="y" && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     default [n] if [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
     inherited [HAS_IOMEM && SERIAL_M32R_SIO && (PLAT_OPSPUT || PLAT_USRV || PLAT_M32700UT)]
    }
   }
   config SERIAL_TXX9 boolean {
    prompt "TMPTX39XX/49XX SIO support" if [HAS_IOMEM && HAS_TXX9_SERIAL]
    depends on [HAS_TXX9_SERIAL]
    select SERIAL_CORE if [HAS_IOMEM && HAS_TXX9_SERIAL]
    default [y] if [HAS_IOMEM && HAS_TXX9_SERIAL]
    inherited [HAS_IOMEM && HAS_TXX9_SERIAL]
   }
   config HAS_TXX9_SERIAL boolean {
    inherited [HAS_IOMEM]
   }
   config SERIAL_TXX9_NR_UARTS integer {
    prompt "Maximum number of TMPTX39XX/49XX SIO ports" if [HAS_IOMEM && SERIAL_TXX9]
    depends on [SERIAL_TXX9]
    default [6] if [HAS_IOMEM && SERIAL_TXX9]
    inherited [HAS_IOMEM && SERIAL_TXX9]
   }
   config SERIAL_TXX9_CONSOLE boolean {
    prompt "TMPTX39XX/49XX SIO Console support" if [HAS_IOMEM && SERIAL_TXX9]
    depends on [SERIAL_TXX9="y"]
    select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_TXX9]
    inherited [HAS_IOMEM && SERIAL_TXX9]
   }
   config SERIAL_TXX9_STDSERIAL boolean {
    prompt "TX39XX/49XX SIO act as standard serial" if [HAS_IOMEM && !SERIAL_8250 && SERIAL_TXX9]
    depends on [!SERIAL_8250 && SERIAL_TXX9]
    inherited [HAS_IOMEM && !SERIAL_8250 && SERIAL_TXX9]
   }
   config SERIAL_VR41XX tristate {
    prompt "NEC VR4100 series Serial Interface Unit support" if [HAS_IOMEM && CPU_VR41XX]
    depends on [CPU_VR41XX]
    select SERIAL_CORE if [HAS_IOMEM && CPU_VR41XX]
    inherited [HAS_IOMEM && CPU_VR41XX]
    config SERIAL_VR41XX_CONSOLE boolean {
     prompt "Enable NEC VR4100 series Serial Interface Unit console" if [HAS_IOMEM && SERIAL_VR41XX="y"]
     depends on [SERIAL_VR41XX="y"]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_VR41XX="y"]
     inherited [HAS_IOMEM && SERIAL_VR41XX="y"]
    }
   }
   config SERIAL_JSM tristate {
    prompt "Digi International NEO PCI Support" if [HAS_IOMEM && PCI]
    depends on [PCI]
    select SERIAL_CORE if [HAS_IOMEM && PCI]
    inherited [HAS_IOMEM && PCI]
   }
   config SERIAL_SGI_IOC4 tristate {
    prompt "SGI IOC4 controller serial support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
    inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4]
   }
   config SERIAL_SGI_IOC3 tristate {
    prompt "SGI Altix IOC3 serial support" if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    depends on [(IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    select SERIAL_CORE if [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
    inherited [HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3]
   }
   config SERIAL_NETX boolean {
    prompt "NetX serial port support" if [HAS_IOMEM && ARM && ARCH_NETX]
    depends on [ARM && ARCH_NETX]
    select SERIAL_CORE if [HAS_IOMEM && ARM && ARCH_NETX]
    inherited [HAS_IOMEM && ARM && ARCH_NETX]
    config SERIAL_NETX_CONSOLE boolean {
     prompt "Console on NetX serial port" if [HAS_IOMEM && SERIAL_NETX]
     depends on [SERIAL_NETX]
     select SERIAL_CORE_CONSOLE if [HAS_IOMEM && SERIAL_NETX]
     inherited [HAS_IOMEM && SERIAL_NETX]
    }
   }
   config SERIAL_OF_PLATFORM tristate {
    prompt "Serial port on Open Firmware platform bus" if [HAS_IOMEM && PPC_OF && SERIAL_8250]
    depends on [PPC_OF]
    depends on [SERIAL_8250]
    inherited [HAS_IOMEM && PPC_OF && SERIAL_8250]
   }
  }
  config UNIX98_PTYS boolean {
   prompt "Unix98 PTY support" if [EMBEDDED]
   default [y] if []
  }
  config LEGACY_PTYS boolean {
   prompt "Legacy (BSD) PTY support" if []
   default [y] if []
   config LEGACY_PTY_COUNT integer {
    prompt "Maximum number of legacy PTY in use" if [LEGACY_PTYS]
    depends on [LEGACY_PTYS]
    range [0 256] if [LEGACY_PTYS]
    default [256] if [LEGACY_PTYS]
    inherited [LEGACY_PTYS]
   }
  }
  config BRIQ_PANEL tristate {
   prompt "Total Impact briQ front panel driver" if [PPC_CHRP]
   depends on [PPC_CHRP]
   inherited [PPC_CHRP]
  }
  config PRINTER tristate {
   prompt "Parallel printer support" if [PARPORT]
   depends on [PARPORT]
   inherited [PARPORT]
   config LP_CONSOLE boolean {
    prompt "Support for console on line printer" if [PRINTER]
    depends on [PRINTER]
    inherited [PRINTER]
   }
  }
  config PPDEV tristate {
   prompt "Support for user-space parallel port device drivers" if [PARPORT]
   depends on [PARPORT]
   inherited [PARPORT]
  }
  config HVC_DRIVER boolean {
  }
  config HVC_CONSOLE boolean {
   prompt "pSeries Hypervisor Virtual Console support" if [PPC_PSERIES]
   depends on [PPC_PSERIES]
   select HVC_DRIVER if [PPC_PSERIES]
   inherited [PPC_PSERIES]
  }
  config HVC_ISERIES boolean {
   prompt "iSeries Hypervisor Virtual Console support" if [PPC_ISERIES]
   depends on [PPC_ISERIES]
   default [y] if [PPC_ISERIES]
   select HVC_DRIVER if [PPC_ISERIES]
   inherited [PPC_ISERIES]
  }
  config HVC_RTAS boolean {
   prompt "IBM RTAS Console support" if [PPC_RTAS]
   depends on [PPC_RTAS]
   select HVC_DRIVER if [PPC_RTAS]
   inherited [PPC_RTAS]
  }
  config HVC_BEAT boolean {
   prompt "Toshiba's Beat Hypervisor Console support" if [PPC_CELLEB]
   depends on [PPC_CELLEB]
   select HVC_DRIVER if [PPC_CELLEB]
   inherited [PPC_CELLEB]
  }
  config HVC_XEN boolean {
   prompt "Xen Hypervisor Console support" if [XEN]
   depends on [XEN]
   select HVC_DRIVER if [XEN]
   default [y] if [XEN]
   inherited [XEN]
  }
  config VIRTIO_CONSOLE boolean {
   select HVC_DRIVER if []
  }
  config HVCS tristate {
   prompt "IBM Hypervisor Virtual Console Server support" if [PPC_PSERIES]
   depends on [PPC_PSERIES]
   inherited [PPC_PSERIES]
  }
  menuconfig IPMI_HANDLER tristate {
   prompt "IPMI top-level message handler" if [HAS_IOMEM]
   depends on [HAS_IOMEM]
   inherited [HAS_IOMEM]
   if [IPMI_HANDLER] {
    config IPMI_PANIC_EVENT boolean {
     prompt "Generate a panic event to all BMCs on a panic" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
     config IPMI_PANIC_STRING boolean {
      prompt "Generate OEM events containing the panic string" if [IPMI_HANDLER && IPMI_PANIC_EVENT]
      depends on [IPMI_PANIC_EVENT]
      inherited [IPMI_HANDLER && IPMI_PANIC_EVENT]
     }
    }
    config IPMI_DEVICE_INTERFACE tristate {
     prompt "Device interface for IPMI" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_SI tristate {
     prompt "IPMI System Interface handler" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_WATCHDOG tristate {
     prompt "IPMI Watchdog Timer" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
    config IPMI_POWEROFF tristate {
     prompt "IPMI Poweroff" if [IPMI_HANDLER]
     inherited [IPMI_HANDLER]
    }
   }
  }
  config DS1620 tristate {
   prompt "NetWinder thermometer support" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
  }
  config NWBUTTON tristate {
   prompt "NetWinder Button" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
   config NWBUTTON_REBOOT boolean {
    prompt "Reboot Using Button" if [NWBUTTON]
    depends on [NWBUTTON]
    inherited [NWBUTTON]
   }
  }
  config NWFLASH tristate {
   prompt "NetWinder flash support" if [ARCH_NETWINDER]
   depends on [ARCH_NETWINDER]
   inherited [ARCH_NETWINDER]
  }
  config HW_RANDOM tristate {
   prompt "Hardware Random Number Generator Core support" if []
   default [m] if []
   config HW_RANDOM_INTEL tristate {
    prompt "Intel HW Random Number Generator support" if [HW_RANDOM && (X86 || IA64) && PCI]
    depends on [HW_RANDOM && (X86 || IA64) && PCI]
    default [HW_RANDOM] if [HW_RANDOM && (X86 || IA64) && PCI]
    inherited [HW_RANDOM && (X86 || IA64) && PCI]
   }
   config HW_RANDOM_AMD tristate {
    prompt "AMD HW Random Number Generator support" if [HW_RANDOM && X86 && PCI]
    depends on [HW_RANDOM && X86 && PCI]
    default [HW_RANDOM] if [HW_RANDOM && X86 && PCI]
    inherited [HW_RANDOM && X86 && PCI]
   }
   config HW_RANDOM_GEODE tristate {
    prompt "AMD Geode HW Random Number Generator support" if [HW_RANDOM && X86_32 && PCI]
    depends on [HW_RANDOM && X86_32 && PCI]
    default [HW_RANDOM] if [HW_RANDOM && X86_32 && PCI]
    inherited [HW_RANDOM && X86_32 && PCI]
   }
   config HW_RANDOM_VIA tristate {
    prompt "VIA HW Random Number Generator support" if [HW_RANDOM && X86_32]
    depends on [HW_RANDOM && X86_32]
    default [HW_RANDOM] if [HW_RANDOM && X86_32]
    inherited [HW_RANDOM && X86_32]
   }
   config HW_RANDOM_IXP4XX tristate {
    prompt "Intel IXP4xx NPU HW Random Number Generator support" if [HW_RANDOM && ARCH_IXP4XX]
    depends on [HW_RANDOM && ARCH_IXP4XX]
    default [HW_RANDOM] if [HW_RANDOM && ARCH_IXP4XX]
    inherited [HW_RANDOM && ARCH_IXP4XX]
   }
   config HW_RANDOM_OMAP tristate {
    prompt "OMAP Random Number Generator support" if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    depends on [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    default [HW_RANDOM] if [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    inherited [HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
   }
   config HW_RANDOM_PASEMI tristate {
    prompt "PA Semi HW Random Number Generator support" if [HW_RANDOM && PPC_PASEMI]
    depends on [HW_RANDOM && PPC_PASEMI]
    default [HW_RANDOM] if [HW_RANDOM && PPC_PASEMI]
    inherited [HW_RANDOM && PPC_PASEMI]
   }
  }
  config NVRAM tristate {
   prompt "/dev/nvram support" if [ATARI || X86 || ARM || GENERIC_NVRAM]
   depends on [ATARI || X86 || ARM || GENERIC_NVRAM]
   inherited [ATARI || X86 || ARM || GENERIC_NVRAM]
  }
  config RTC tristate {
   prompt "Enhanced Real Time Clock Support" if [!PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390]
   depends on [!PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390]
   inherited [!PPC && !PARISC && !IA64 && !M68K && !SPARC && !FRV && !ARM && !SUPERH && !S390]
  }
  config JS_RTC tristate {
   prompt "Enhanced Real Time Clock Support" if [SPARC32 && PCI]
   depends on [SPARC32 && PCI]
   inherited [SPARC32 && PCI]
  }
  config SGI_DS1286 tristate {
   prompt "SGI DS1286 RTC support" if [SGI_IP22]
   depends on [SGI_IP22]
   inherited [SGI_IP22]
  }
  config SGI_IP27_RTC boolean {
   prompt "SGI M48T35 RTC support" if [SGI_IP27]
   depends on [SGI_IP27]
   inherited [SGI_IP27]
  }
  config GEN_RTC tristate {
   prompt "Generic /dev/rtc emulation" if [RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH]
   depends on [RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH]
   inherited [RTC!="y" && !IA64 && !ARM && !M32R && !MIPS && !SPARC && !FRV && !S390 && !SUPERH]
   config GEN_RTC_X boolean {
    prompt "Extended RTC operation" if [GEN_RTC]
    depends on [GEN_RTC]
    inherited [GEN_RTC]
   }
  }
  config EFI_RTC boolean {
   prompt "EFI Real Time Clock Services" if [IA64]
   depends on [IA64]
   inherited [IA64]
  }
  config DS1302 tristate {
   prompt "DS1302 RTC support" if [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
   depends on [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
   inherited [M32R && (PLAT_M32700UT || PLAT_OPSPUT)]
  }
  config COBALT_LCD boolean {
   prompt "Support for Cobalt LCD" if [MIPS_COBALT]
   depends on [MIPS_COBALT]
   inherited [MIPS_COBALT]
  }
  config DTLK tristate {
   prompt "Double Talk PC internal speech card support" if [ISA]
   depends on [ISA]
   inherited [ISA]
  }
  config R3964 tristate {
   prompt "Siemens R3964 line discipline" if []
  }
  config APPLICOM tristate {
   prompt "Applicom intelligent fieldbus card support" if [PCI]
   depends on [PCI]
   inherited [PCI]
  }
  config SONYPI tristate {
   prompt "Sony Vaio Programmable I/O Control Device support (EXPERIMENTAL)" if [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
   depends on [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
   inherited [EXPERIMENTAL && X86 && PCI && INPUT && !64BIT]
  }
  config GPIO_TB0219 tristate {
   prompt "TANBAC TB0219 GPIO support" if [TANBAC_TB022X]
   depends on [TANBAC_TB022X]
   select GPIO_VR41XX if [TANBAC_TB022X]
   inherited [TANBAC_TB022X]
  }
  menu "PCMCIA character devices" {
   depends on [HOTPLUG && PCMCIA!="n"]
   config SYNCLINK_CS tristate {
    prompt "SyncLink PC Card support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
   config CARDMAN_4000 tristate {
    prompt "Omnikey Cardman 4000 support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    select BITREVERSE if [HOTPLUG && PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
   config CARDMAN_4040 tristate {
    prompt "Omnikey CardMan 4040 support" if [HOTPLUG && PCMCIA]
    depends on [PCMCIA]
    inherited [HOTPLUG && PCMCIA]
   }
  }
  config MWAVE tristate {
   prompt "ACP Modem (Mwave) support" if [X86]
   depends on [X86]
   select SERIAL_8250 if [X86]
   inherited [X86]
  }
  config SCx200_GPIO tristate {
   prompt "NatSemi SCx200 GPIO Support" if [SCx200]
   depends on [SCx200]
   select NSC_GPIO if [SCx200]
   inherited [SCx200]
  }
  config PC8736x_GPIO tristate {
   prompt "NatSemi PC8736x GPIO Support" if [X86]
   depends on [X86]
   default [SCx200_GPIO] if [X86]
   select NSC_GPIO if [X86]
   inherited [X86]
  }
  config NSC_GPIO tristate {
   prompt "NatSemi Base GPIO Support" if [X86_32]
   depends on [X86_32]
   inherited [X86_32]
  }
  config CS5535_GPIO tristate {
   prompt "AMD CS5535/CS5536 GPIO (Geode Companion Device)" if [X86_32]
   depends on [X86_32]
   inherited [X86_32]
  }
  config GPIO_VR41XX tristate {
   prompt "NEC VR4100 series General-purpose I/O Unit support" if [CPU_VR41XX]
   depends on [CPU_VR41XX]
   inherited [CPU_VR41XX]
  }
  config RAW_DRIVER tristate {
   prompt "RAW driver (/dev/raw/rawN)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config MAX_RAW_DEVS integer {
    prompt "Maximum number of RAW devices to support (1-8192)" if [RAW_DRIVER]
    depends on [RAW_DRIVER]
    default [256] if [RAW_DRIVER]
    inherited [RAW_DRIVER]
   }
  }
  config HPET boolean {
   prompt "HPET - High Precision Event Timer" if [ACPI && (X86 || IA64)]
   default [n] if [ACPI]
   depends on [ACPI]
   inherited [ACPI]
   config HPET_RTC_IRQ boolean {
    prompt "HPET Control RTC IRQ" if [HPET && !HPET_EMULATE_RTC]
    default [n] if [HPET]
    depends on [HPET]
    inherited [HPET]
   }
   config HPET_MMAP boolean {
    prompt "Allow mmap of HPET" if [HPET]
    default [y] if [HPET]
    depends on [HPET]
    inherited [HPET]
   }
  }
  config HANGCHECK_TIMER tristate {
   prompt "Hangcheck timer" if [X86 || IA64 || PPC64 || S390]
   depends on [X86 || IA64 || PPC64 || S390]
   inherited [X86 || IA64 || PPC64 || S390]
  }
  config MMTIMER tristate {
   prompt "MMTIMER Memory mapped RTC for SGI Altix" if [IA64_GENERIC || IA64_SGI_SN2]
   depends on [IA64_GENERIC || IA64_SGI_SN2]
   default [y] if [IA64_GENERIC || IA64_SGI_SN2]
   inherited [IA64_GENERIC || IA64_SGI_SN2]
  }
  menuconfig TCG_TPM tristate {
   prompt "TPM Hardware Support" if [HAS_IOMEM && EXPERIMENTAL]
   depends on [HAS_IOMEM]
   depends on [EXPERIMENTAL]
   inherited [HAS_IOMEM && EXPERIMENTAL]
   if [TCG_TPM] {
    config TCG_TIS tristate {
     prompt "TPM Interface Specification 1.2 Interface" if [TCG_TPM && PNPACPI]
     depends on [PNPACPI]
     inherited [TCG_TPM && PNPACPI]
    }
    config TCG_NSC tristate {
     prompt "National Semiconductor TPM Interface" if [TCG_TPM && PNPACPI]
     depends on [PNPACPI]
     inherited [TCG_TPM && PNPACPI]
    }
    config TCG_ATMEL tristate {
     prompt "Atmel TPM Interface" if [TCG_TPM]
     inherited [TCG_TPM]
    }
    config TCG_INFINEON tristate {
     prompt "Infineon Technologies TPM Interface" if [TCG_TPM && PNPACPI]
     depends on [PNPACPI]
     inherited [TCG_TPM && PNPACPI]
    }
   }
  }
  config TELCLOCK tristate {
   prompt "Telecom clock driver for ATCA SBC" if [EXPERIMENTAL && X86]
   depends on [EXPERIMENTAL && X86]
   default [n] if [EXPERIMENTAL && X86]
   inherited [EXPERIMENTAL && X86]
  }
  config DEVPORT boolean {
   depends on [!M68K]
   depends on [ISA || PCI]
   default [y] if [!M68K && (ISA || PCI)]
   inherited [!M68K && (ISA || PCI)]
  }
  config TN3270 tristate {
   prompt "Support for locally attached 3270 terminals" if [CCW]
   depends on [CCW]
   inherited [CCW]
   config TN3270_TTY tristate {
    prompt "Support for tty input/output on 3270 terminals" if [TN3270]
    depends on [TN3270]
    inherited [TN3270]
   }
   config TN3270_FS tristate {
    prompt "Support for fullscreen applications on 3270 terminals" if [TN3270]
    depends on [TN3270]
    inherited [TN3270]
   }
   config TN3270_CONSOLE boolean {
    prompt "Support for console on 3270 terminal" if [TN3270="y" && TN3270_TTY="y"]
    depends on [TN3270="y" && TN3270_TTY="y"]
    inherited [TN3270="y" && TN3270_TTY="y"]
   }
  }
  config TN3215 boolean {
   prompt "Support for 3215 line mode terminal" if [CCW]
   depends on [CCW]
   inherited [CCW]
   config TN3215_CONSOLE boolean {
    prompt "Support for console on 3215 line mode terminal" if [TN3215]
    depends on [TN3215]
    inherited [TN3215]
   }
  }
  config CCW_CONSOLE boolean {
   depends on [TN3215_CONSOLE || TN3270_CONSOLE]
   default [y] if [TN3215_CONSOLE || TN3270_CONSOLE]
   inherited [TN3215_CONSOLE || TN3270_CONSOLE]
  }
  config SCLP_TTY boolean {
   prompt "Support for SCLP line mode terminal" if [S390]
   depends on [S390]
   inherited [S390]
   config SCLP_CONSOLE boolean {
    prompt "Support for console on SCLP line mode terminal" if [SCLP_TTY]
    depends on [SCLP_TTY]
    inherited [SCLP_TTY]
   }
  }
  config SCLP_VT220_TTY boolean {
   prompt "Support for SCLP VT220-compatible terminal" if [S390]
   depends on [S390]
   inherited [S390]
   config SCLP_VT220_CONSOLE boolean {
    prompt "Support for console on SCLP VT220-compatible terminal" if [SCLP_VT220_TTY]
    depends on [SCLP_VT220_TTY]
    inherited [SCLP_VT220_TTY]
   }
  }
  config SCLP_CPI tristate {
   prompt "Control-Program Identification" if [S390]
   depends on [S390]
   inherited [S390]
  }
  config S390_TAPE tristate {
   prompt "S/390 tape device support" if [CCW]
   depends on [CCW]
   inherited [CCW]
   config S390_TAPE_BLOCK boolean {
    prompt "Support for tape block devices" if [S390_TAPE]
    depends on [S390_TAPE]
    inherited [S390_TAPE]
   }
   config S390_TAPE_34XX tristate {
    prompt "Support for 3480/3490 tape hardware" if [S390_TAPE]
    depends on [S390_TAPE]
    inherited [S390_TAPE]
   }
   config S390_TAPE_3590 tristate {
    prompt "Support for 3590 tape hardware" if [S390_TAPE]
    depends on [S390_TAPE]
    inherited [S390_TAPE]
   }
  }
  config VMLOGRDR tristate {
   prompt "Support for the z/VM recording system services (VM only)" if [IUCV]
   depends on [IUCV]
   inherited [IUCV]
  }
  config VMCP tristate {
   prompt "Support for the z/VM CP interface (VM only)" if [S390]
   depends on [S390]
   inherited [S390]
  }
  config MONREADER tristate {
   prompt "API for reading z/VM monitor service records" if [IUCV]
   depends on [IUCV]
   inherited [IUCV]
  }
  config MONWRITER tristate {
   prompt "API for writing z/VM monitor service records" if [S390]
   depends on [S390]
   default [m] if [S390]
   inherited [S390]
  }
  config S390_VMUR tristate {
   prompt "z/VM unit record device driver" if [S390]
   depends on [S390]
   default [m] if [S390]
   inherited [S390]
  }
 }
 menuconfig I2C tristate {
  prompt "I2C support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [I2C] {
   config I2C_BOARDINFO boolean {
    default [y] if [I2C]
    inherited [I2C]
   }
   config I2C_CHARDEV tristate {
    prompt "I2C device interface" if [I2C]
    inherited [I2C]
   }
   menu "I2C Algorithms" {
    depends on [I2C]
    config I2C_ALGOBIT tristate {
     prompt "I2C bit-banging interfaces" if [I2C]
     inherited [I2C]
    }
    config I2C_ALGOPCF tristate {
     prompt "I2C PCF 8584 interfaces" if [I2C]
     inherited [I2C]
    }
    config I2C_ALGOPCA tristate {
     prompt "I2C PCA 9564 interfaces" if [I2C]
     inherited [I2C]
    }
    config I2C_ALGO_SGI tristate {
     prompt "I2C SGI interfaces" if [I2C && (SGI_IP22 || SGI_IP32 || X86_VISWS)]
     depends on [SGI_IP22 || SGI_IP32 || X86_VISWS]
     inherited [I2C && (SGI_IP22 || SGI_IP32 || X86_VISWS)]
    }
   }
   menu "I2C Hardware Bus support" {
    depends on [I2C]
    config I2C_ALI1535 tristate {
     prompt "ALI 1535" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_ALI1563 tristate {
     prompt "ALI 1563" if [I2C && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_ALI15X3 tristate {
     prompt "ALI 15x3" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_AMD756 tristate {
     prompt "AMD 756/766/768/8111 and nVidia nForce" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
     config I2C_AMD756_S4882 tristate {
      prompt "SMBus multiplexing on the Tyan S4882" if [I2C && I2C_AMD756 && EXPERIMENTAL]
      depends on [I2C_AMD756 && EXPERIMENTAL]
      inherited [I2C && I2C_AMD756 && EXPERIMENTAL]
     }
    }
    config I2C_AMD8111 tristate {
     prompt "AMD 8111" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_AT91 tristate {
     prompt "Atmel AT91 I2C Two-Wire interface (TWI)" if [I2C && ARCH_AT91 && EXPERIMENTAL && BROKEN]
     depends on [ARCH_AT91 && EXPERIMENTAL && BROKEN]
     inherited [I2C && ARCH_AT91 && EXPERIMENTAL && BROKEN]
    }
    config I2C_AU1550 tristate {
     prompt "Au1550/Au1200 SMBus interface" if [I2C && (SOC_AU1550 || SOC_AU1200)]
     depends on [SOC_AU1550 || SOC_AU1200]
     inherited [I2C && (SOC_AU1550 || SOC_AU1200)]
    }
    config I2C_BLACKFIN_TWI tristate {
     prompt "Blackfin TWI I2C support" if [I2C && (BF534 || BF536 || BF537 || BF54x)]
     depends on [BF534 || BF536 || BF537 || BF54x]
     inherited [I2C && (BF534 || BF536 || BF537 || BF54x)]
     config I2C_BLACKFIN_TWI_CLK_KHZ integer {
      prompt "Blackfin TWI I2C clock (kHz)" if [I2C && I2C_BLACKFIN_TWI]
      depends on [I2C_BLACKFIN_TWI]
      range [10 400] if [I2C && I2C_BLACKFIN_TWI]
      default [50] if [I2C && I2C_BLACKFIN_TWI]
      inherited [I2C && I2C_BLACKFIN_TWI]
     }
    }
    config I2C_DAVINCI tristate {
     prompt "DaVinci I2C driver" if [I2C && ARCH_DAVINCI]
     depends on [ARCH_DAVINCI]
     inherited [I2C && ARCH_DAVINCI]
    }
    config I2C_ELEKTOR tristate {
     prompt "Elektor ISA card" if [I2C && ISA && BROKEN_ON_SMP]
     depends on [ISA && BROKEN_ON_SMP]
     select I2C_ALGOPCF if [I2C && ISA && BROKEN_ON_SMP]
     inherited [I2C && ISA && BROKEN_ON_SMP]
    }
    config I2C_GPIO tristate {
     prompt "GPIO-based bitbanging I2C" if [I2C && GENERIC_GPIO]
     depends on [GENERIC_GPIO]
     select I2C_ALGOBIT if [I2C && GENERIC_GPIO]
     inherited [I2C && GENERIC_GPIO]
    }
    config I2C_HYDRA tristate {
     prompt "CHRP Apple Hydra Mac I/O I2C interface" if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
     depends on [PCI && PPC_CHRP && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
     inherited [I2C && PCI && PPC_CHRP && EXPERIMENTAL]
    }
    config I2C_I801 tristate {
     prompt "Intel 82801 (ICH)" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_I810 tristate {
     prompt "Intel 810/815" if [I2C && PCI]
     depends on [PCI]
     select I2C_ALGOBIT if [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_PXA tristate {
     prompt "Intel PXA2XX I2C adapter (EXPERIMENTAL)" if [I2C && EXPERIMENTAL && ARCH_PXA]
     depends on [EXPERIMENTAL && ARCH_PXA]
     inherited [I2C && EXPERIMENTAL && ARCH_PXA]
     config I2C_PXA_SLAVE boolean {
      prompt "Intel PXA2XX I2C Slave comms support" if [I2C && I2C_PXA]
      depends on [I2C_PXA]
      inherited [I2C && I2C_PXA]
     }
    }
    config I2C_PIIX4 tristate {
     prompt "Intel PIIX4 and compatible (ATI/Serverworks/Broadcom/SMSC)" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_IBM_IIC tristate {
     prompt "IBM PPC 4xx on-chip I2C interface" if [I2C && IBM_OCP]
     depends on [IBM_OCP]
     inherited [I2C && IBM_OCP]
    }
    config I2C_IOP3XX tristate {
     prompt "Intel IOPx3xx and IXP4xx on-chip I2C interface" if [I2C && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX)]
     depends on [ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX]
     inherited [I2C && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IXP4XX || ARCH_IOP13XX)]
    }
    config I2C_IXP4XX tristate {
     prompt "IXP4xx GPIO-Based I2C Interface (DEPRECATED)" if [I2C && ARCH_IXP4XX]
     depends on [ARCH_IXP4XX]
     select I2C_ALGOBIT if [I2C && ARCH_IXP4XX]
     inherited [I2C && ARCH_IXP4XX]
    }
    config I2C_IXP2000 tristate {
     prompt "IXP2000 GPIO-Based I2C Interface (DEPRECATED)" if [I2C && ARCH_IXP2000]
     depends on [ARCH_IXP2000]
     select I2C_ALGOBIT if [I2C && ARCH_IXP2000]
     inherited [I2C && ARCH_IXP2000]
    }
    config I2C_POWERMAC tristate {
     prompt "Powermac I2C interface" if [I2C && PPC_PMAC]
     depends on [PPC_PMAC]
     default [y] if [I2C && PPC_PMAC]
     inherited [I2C && PPC_PMAC]
    }
    config I2C_MPC tristate {
     prompt "MPC107/824x/85xx/52xx/86xx" if [I2C && PPC32]
     depends on [PPC32]
     inherited [I2C && PPC32]
    }
    config I2C_NFORCE2 tristate {
     prompt "Nvidia nForce2, nForce3 and nForce4" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_OCORES tristate {
     prompt "OpenCores I2C Controller" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config I2C_OMAP tristate {
     prompt "OMAP I2C adapter" if [I2C && ARCH_OMAP]
     depends on [ARCH_OMAP]
     default [y] if [I2C && ARCH_OMAP && (MACH_OMAP_H3 || MACH_OMAP_OSK)]
     inherited [I2C && ARCH_OMAP]
    }
    config I2C_PARPORT tristate {
     prompt "Parallel port adapter" if [I2C && PARPORT]
     depends on [PARPORT]
     select I2C_ALGOBIT if [I2C && PARPORT]
     inherited [I2C && PARPORT]
    }
    config I2C_PARPORT_LIGHT tristate {
     prompt "Parallel port adapter (light)" if [I2C]
     select I2C_ALGOBIT if [I2C]
     inherited [I2C]
    }
    config I2C_PASEMI tristate {
     prompt "PA Semi SMBus interface" if [I2C && PPC_PASEMI && PCI]
     depends on [PPC_PASEMI && PCI]
     inherited [I2C && PPC_PASEMI && PCI]
    }
    config I2C_PROSAVAGE tristate {
     prompt "S3/VIA (Pro)Savage" if [I2C && PCI]
     depends on [PCI]
     select I2C_ALGOBIT if [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_S3C2410 tristate {
     prompt "S3C2410 I2C Driver" if [I2C && ARCH_S3C2410]
     depends on [ARCH_S3C2410]
     inherited [I2C && ARCH_S3C2410]
    }
    config I2C_SAVAGE4 tristate {
     prompt "S3 Savage 4" if [I2C && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_SIBYTE tristate {
     prompt "SiByte SMBus interface" if [I2C && SIBYTE_SB1xxx_SOC]
     depends on [SIBYTE_SB1xxx_SOC]
     inherited [I2C && SIBYTE_SB1xxx_SOC]
    }
    config I2C_SIMTEC tristate {
     prompt "Simtec Generic I2C interface" if [I2C]
     select I2C_ALGOBIT if [I2C]
     inherited [I2C]
    }
    config SCx200_I2C tristate {
     prompt "NatSemi SCx200 I2C using GPIO pins (DEPRECATED)" if [I2C && SCx200_GPIO]
     depends on [SCx200_GPIO]
     select I2C_ALGOBIT if [I2C && SCx200_GPIO]
     inherited [I2C && SCx200_GPIO]
     config SCx200_I2C_SCL integer {
      prompt "GPIO pin used for SCL" if [I2C && SCx200_I2C]
      depends on [SCx200_I2C]
      default [12] if [I2C && SCx200_I2C]
      inherited [I2C && SCx200_I2C]
     }
     config SCx200_I2C_SDA integer {
      prompt "GPIO pin used for SDA" if [I2C && SCx200_I2C]
      depends on [SCx200_I2C]
      default [13] if [I2C && SCx200_I2C]
      inherited [I2C && SCx200_I2C]
     }
    }
    config SCx200_ACB tristate {
     prompt "Geode ACCESS.bus support" if [I2C && X86_32 && PCI]
     depends on [X86_32 && PCI]
     inherited [I2C && X86_32 && PCI]
    }
    config I2C_SIS5595 tristate {
     prompt "SiS 5595" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_SIS630 tristate {
     prompt "SiS 630/730" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_SIS96X tristate {
     prompt "SiS 96x" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_TAOS_EVM tristate {
     prompt "TAOS evaluation module" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     select SERIO if [I2C && EXPERIMENTAL]
     select SERIO_SERPORT if [I2C && EXPERIMENTAL]
     default [n] if [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config I2C_STUB tristate {
     prompt "I2C/SMBus Test Stub" if [I2C && EXPERIMENTAL && m && <choice>]
     depends on [EXPERIMENTAL && m]
     default [n] if [I2C && EXPERIMENTAL && m && <choice>]
     inherited [I2C && EXPERIMENTAL && m && <choice>]
    }
    config I2C_TINY_USB tristate {
     prompt "I2C-Tiny-USB" if [I2C && USB]
     depends on [USB]
     inherited [I2C && USB]
    }
    config I2C_VERSATILE tristate {
     prompt "ARM Versatile/Realview I2C bus support" if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
     depends on [ARCH_VERSATILE || ARCH_REALVIEW]
     select I2C_ALGOBIT if [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
     inherited [I2C && (ARCH_VERSATILE || ARCH_REALVIEW)]
    }
    config I2C_ACORN tristate {
     prompt "Acorn IOC/IOMD I2C bus support" if [I2C && ARCH_ACORN]
     depends on [ARCH_ACORN]
     default [y] if [I2C && ARCH_ACORN]
     select I2C_ALGOBIT if [I2C && ARCH_ACORN]
     inherited [I2C && ARCH_ACORN]
    }
    config I2C_VIA tristate {
     prompt "VIA 82C586B" if [I2C && PCI && EXPERIMENTAL]
     depends on [PCI && EXPERIMENTAL]
     select I2C_ALGOBIT if [I2C && PCI && EXPERIMENTAL]
     inherited [I2C && PCI && EXPERIMENTAL]
    }
    config I2C_VIAPRO tristate {
     prompt "VIA VT82C596/82C686/82xx and CX700" if [I2C && PCI]
     depends on [PCI]
     inherited [I2C && PCI]
    }
    config I2C_VOODOO3 tristate {
     prompt "Voodoo 3" if [I2C && PCI]
     depends on [PCI]
     select I2C_ALGOBIT if [I2C && PCI]
     inherited [I2C && PCI]
    }
    config I2C_PCA_ISA tristate {
     prompt "PCA9564 on an ISA bus" if [I2C && ISA]
     depends on [ISA]
     select I2C_ALGOPCA if [I2C && ISA]
     default [n] if [I2C && ISA]
     inherited [I2C && ISA]
    }
    config I2C_MV64XXX tristate {
     prompt "Marvell mv64xxx I2C Controller" if [I2C && MV64X60 && EXPERIMENTAL]
     depends on [MV64X60 && EXPERIMENTAL]
     inherited [I2C && MV64X60 && EXPERIMENTAL]
    }
    config I2C_PNX tristate {
     prompt "I2C bus support for Philips PNX targets" if [I2C && ARCH_PNX4008]
     depends on [ARCH_PNX4008]
     inherited [I2C && ARCH_PNX4008]
    }
    config I2C_PMCMSP tristate {
     prompt "PMC MSP I2C TWI Controller" if [I2C && PMC_MSP]
     depends on [PMC_MSP]
     inherited [I2C && PMC_MSP]
    }
   }
   menu "Miscellaneous I2C Chip support" {
    depends on [I2C]
    config SENSORS_DS1337 tristate {
     prompt "Dallas DS1337 and DS1339 Real Time Clock (DEPRECATED)" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_DS1374 tristate {
     prompt "Dallas DS1374 Real Time Clock (DEPRECATED)" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config DS1682 tristate {
     prompt "Dallas DS1682 Total Elapsed Time Recorder with Alarm" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_EEPROM tristate {
     prompt "EEPROM reader" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_PCF8574 tristate {
     prompt "Philips PCF8574 and PCF8574A" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     default [n] if [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_PCA9539 tristate {
     prompt "Philips PCA9539 16-bit I/O port" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_PCF8591 tristate {
     prompt "Philips PCF8591" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     default [n] if [I2C && EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config ISP1301_OMAP tristate {
     prompt "Philips ISP1301 with OMAP OTG" if [I2C && ARCH_OMAP_OTG]
     depends on [ARCH_OMAP_OTG]
     inherited [I2C && ARCH_OMAP_OTG]
    }
    config TPS65010 tristate {
     prompt "TPS6501x Power Management chips" if [I2C && ARCH_OMAP]
     depends on [ARCH_OMAP]
     default [y] if [I2C && ARCH_OMAP && (MACH_OMAP_H2 || MACH_OMAP_H3 || MACH_OMAP_OSK)]
     inherited [I2C && ARCH_OMAP]
    }
    config SENSORS_M41T00 tristate {
     prompt "ST M41T00 RTC chip (DEPRECATED)" if [I2C && PPC32]
     depends on [PPC32]
     inherited [I2C && PPC32]
    }
    config SENSORS_MAX6875 tristate {
     prompt "Maxim MAX6875 Power supply supervisor" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config SENSORS_TSL2550 tristate {
     prompt "Taos TSL2550 ambient light sensor" if [I2C && EXPERIMENTAL]
     depends on [EXPERIMENTAL]
     inherited [I2C && EXPERIMENTAL]
    }
    config MENELAUS boolean {
     prompt "TWL92330/Menelaus PM chip" if [I2C="y" && ARCH_OMAP24XX]
     depends on [I2C="y" && ARCH_OMAP24XX]
     inherited [I2C="y" && ARCH_OMAP24XX]
    }
   }
   config I2C_DEBUG_CORE boolean {
    prompt "I2C Core debugging messages" if [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_ALGO boolean {
    prompt "I2C Algorithm debugging messages" if [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_BUS boolean {
    prompt "I2C Bus debugging messages" if [I2C]
    inherited [I2C]
   }
   config I2C_DEBUG_CHIP boolean {
    prompt "I2C Chip debugging messages" if [I2C]
    inherited [I2C]
   }
  }
 }
 menu "SPI support" {
  depends on [HAS_IOMEM]
  config SPI boolean {
   prompt "SPI support" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config SPI_DEBUG boolean {
    prompt "Debug support for SPI drivers" if [HAS_IOMEM && SPI && DEBUG_KERNEL]
    depends on [SPI && DEBUG_KERNEL]
    inherited [HAS_IOMEM && SPI && DEBUG_KERNEL]
   }
  }
  config SPI_MASTER boolean {
   default [SPI] if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config SPI_ATMEL tristate {
   prompt "Atmel SPI Controller" if [HAS_IOMEM && (ARCH_AT91 || AVR32) && SPI_MASTER]
   depends on [(ARCH_AT91 || AVR32) && SPI_MASTER]
   inherited [HAS_IOMEM && (ARCH_AT91 || AVR32) && SPI_MASTER]
  }
  config SPI_BFIN tristate {
   prompt "SPI controller driver for ADI Blackfin5xx" if [HAS_IOMEM && SPI_MASTER && BLACKFIN]
   depends on [SPI_MASTER && BLACKFIN]
   inherited [HAS_IOMEM && SPI_MASTER && BLACKFIN]
  }
  config SPI_AU1550 tristate {
   prompt "Au1550/Au12x0 SPI Controller" if [HAS_IOMEM && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
   depends on [SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && (SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL]
  }
  config SPI_BITBANG tristate {
   prompt "Bitbanging SPI master" if [HAS_IOMEM && SPI_MASTER && EXPERIMENTAL]
   depends on [SPI_MASTER && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && EXPERIMENTAL]
  }
  config SPI_BUTTERFLY tristate {
   prompt "Parallel port adapter for AVR Butterfly (DEVELOPMENT)" if [HAS_IOMEM && SPI_MASTER && PARPORT && EXPERIMENTAL]
   depends on [SPI_MASTER && PARPORT && EXPERIMENTAL]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && PARPORT && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && PARPORT && EXPERIMENTAL]
  }
  config SPI_IMX tristate {
   prompt "Freescale iMX SPI controller" if [HAS_IOMEM && SPI_MASTER && ARCH_IMX && EXPERIMENTAL]
   depends on [SPI_MASTER && ARCH_IMX && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && ARCH_IMX && EXPERIMENTAL]
  }
  config SPI_LM70_LLP tristate {
   prompt "Parallel port adapter for LM70 eval board (DEVELOPMENT)" if [HAS_IOMEM && SPI_MASTER && PARPORT && EXPERIMENTAL]
   depends on [SPI_MASTER && PARPORT && EXPERIMENTAL]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && PARPORT && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && PARPORT && EXPERIMENTAL]
  }
  config SPI_MPC52xx_PSC tristate {
   prompt "Freescale MPC52xx PSC SPI controller" if [HAS_IOMEM && SPI_MASTER && PPC_MPC52xx && EXPERIMENTAL]
   depends on [SPI_MASTER && PPC_MPC52xx && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && PPC_MPC52xx && EXPERIMENTAL]
  }
  config SPI_MPC83xx tristate {
   prompt "Freescale MPC83xx/QUICC Engine SPI controller" if [HAS_IOMEM && SPI_MASTER && (PPC_83xx || QUICC_ENGINE) && EXPERIMENTAL]
   depends on [SPI_MASTER && (PPC_83xx || QUICC_ENGINE) && EXPERIMENTAL]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && (PPC_83xx || QUICC_ENGINE) && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && (PPC_83xx || QUICC_ENGINE) && EXPERIMENTAL]
  }
  config SPI_OMAP_UWIRE tristate {
   prompt "OMAP1 MicroWire" if [HAS_IOMEM && SPI_MASTER && ARCH_OMAP1]
   depends on [SPI_MASTER && ARCH_OMAP1]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && ARCH_OMAP1]
   inherited [HAS_IOMEM && SPI_MASTER && ARCH_OMAP1]
  }
  config SPI_OMAP24XX tristate {
   prompt "McSPI driver for OMAP24xx" if [HAS_IOMEM && SPI_MASTER && ARCH_OMAP24XX]
   depends on [SPI_MASTER && ARCH_OMAP24XX]
   inherited [HAS_IOMEM && SPI_MASTER && ARCH_OMAP24XX]
  }
  config SPI_PXA2XX tristate {
   prompt "PXA2xx SSP SPI master" if [HAS_IOMEM && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
   depends on [SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && ARCH_PXA && EXPERIMENTAL]
  }
  config SPI_S3C24XX tristate {
   prompt "Samsung S3C24XX series SPI" if [HAS_IOMEM && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   depends on [SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
  }
  config SPI_S3C24XX_GPIO tristate {
   prompt "Samsung S3C24XX series SPI by GPIO" if [HAS_IOMEM && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   depends on [SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && ARCH_S3C2410 && EXPERIMENTAL]
  }
  config SPI_TXX9 tristate {
   prompt "Toshiba TXx9 SPI controller" if [HAS_IOMEM && SPI_MASTER && GENERIC_GPIO && CPU_TX49XX]
   depends on [SPI_MASTER && GENERIC_GPIO && CPU_TX49XX]
   inherited [HAS_IOMEM && SPI_MASTER && GENERIC_GPIO && CPU_TX49XX]
  }
  config SPI_XILINX tristate {
   prompt "Xilinx SPI controller" if [HAS_IOMEM && SPI_MASTER && XILINX_VIRTEX && EXPERIMENTAL]
   depends on [SPI_MASTER && XILINX_VIRTEX && EXPERIMENTAL]
   select SPI_BITBANG if [HAS_IOMEM && SPI_MASTER && XILINX_VIRTEX && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && XILINX_VIRTEX && EXPERIMENTAL]
  }
  config SPI_AT25 tristate {
   prompt "SPI EEPROMs from most vendors" if [HAS_IOMEM && SPI_MASTER && SYSFS]
   depends on [SPI_MASTER && SYSFS]
   inherited [HAS_IOMEM && SPI_MASTER && SYSFS]
  }
  config SPI_SPIDEV tristate {
   prompt "User mode SPI device driver support" if [HAS_IOMEM && SPI_MASTER && EXPERIMENTAL]
   depends on [SPI_MASTER && EXPERIMENTAL]
   inherited [HAS_IOMEM && SPI_MASTER && EXPERIMENTAL]
  }
  config SPI_TLE62X0 tristate {
   prompt "Infineon TLE62X0 (for power switching)" if [HAS_IOMEM && SPI_MASTER && SYSFS]
   depends on [SPI_MASTER && SYSFS]
   inherited [HAS_IOMEM && SPI_MASTER && SYSFS]
  }
 }
 menuconfig W1 tristate {
  prompt "Dallas's 1-wire support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [W1] {
   config W1_CON boolean {
    depends on [CONNECTOR]
    prompt "Userspace communication over connector" if [W1 && CONNECTOR]
    default [y] if [W1 && CONNECTOR]
    inherited [W1 && CONNECTOR]
   }
   menu "1-wire Bus Masters" {
    depends on [W1]
    config W1_MASTER_MATROX tristate {
     prompt "Matrox G400 transport layer for 1-wire" if [W1 && PCI]
     depends on [PCI]
     inherited [W1 && PCI]
    }
    config W1_MASTER_DS2490 tristate {
     prompt "DS2490 USB <-> W1 transport layer for 1-wire" if [W1 && USB]
     depends on [USB]
     inherited [W1 && USB]
    }
    config W1_MASTER_DS2482 tristate {
     prompt "Maxim DS2482 I2C to 1-Wire bridge" if [W1 && I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     inherited [W1 && I2C && EXPERIMENTAL]
    }
    config W1_MASTER_DS1WM tristate {
     prompt "Maxim DS1WM 1-wire busmaster" if [W1 && ARM]
     depends on [W1 && ARM]
     inherited [W1 && ARM]
    }
   }
   menu "1-wire Slaves" {
    depends on [W1]
    config W1_SLAVE_THERM tristate {
     prompt "Thermal family implementation" if [W1]
     inherited [W1]
    }
    config W1_SLAVE_SMEM tristate {
     prompt "Simple 64bit memory family implementation" if [W1]
     inherited [W1]
    }
    config W1_SLAVE_DS2433 tristate {
     prompt "4kb EEPROM family support (DS2433)" if [W1]
     inherited [W1]
     config W1_SLAVE_DS2433_CRC boolean {
      prompt "Protect DS2433 data with a CRC16" if [W1 && W1_SLAVE_DS2433]
      depends on [W1_SLAVE_DS2433]
      select CRC16 if [W1 && W1_SLAVE_DS2433]
      inherited [W1 && W1_SLAVE_DS2433]
     }
    }
    config W1_SLAVE_DS2760 tristate {
     prompt "Dallas 2760 battery monitor chip (HP iPAQ & others)" if [W1]
     depends on [W1]
     inherited [W1]
    }
   }
  }
 }
 menuconfig POWER_SUPPLY tristate {
  prompt "Power supply class support" if []
  if [POWER_SUPPLY] {
   config POWER_SUPPLY_DEBUG boolean {
    prompt "Power supply debug" if [POWER_SUPPLY]
    inherited [POWER_SUPPLY]
   }
   config PDA_POWER tristate {
    prompt "Generic PDA/phone power driver" if [POWER_SUPPLY && !S390]
    depends on [!S390]
    inherited [POWER_SUPPLY && !S390]
   }
   config APM_POWER tristate {
    prompt "APM emulation for class batteries" if [POWER_SUPPLY && APM_EMULATION]
    depends on [APM_EMULATION]
    inherited [POWER_SUPPLY && APM_EMULATION]
   }
   config BATTERY_DS2760 tristate {
    prompt "DS2760 battery driver (HP iPAQ & others)" if [POWER_SUPPLY]
    select W1 if [POWER_SUPPLY]
    select W1_SLAVE_DS2760 if [POWER_SUPPLY]
    inherited [POWER_SUPPLY]
   }
   config BATTERY_PMU tristate {
    prompt "Apple PMU battery" if [POWER_SUPPLY && PPC32 && ADB_PMU]
    depends on [PPC32 && ADB_PMU]
    inherited [POWER_SUPPLY && PPC32 && ADB_PMU]
   }
   config BATTERY_OLPC tristate {
    prompt "One Laptop Per Child battery" if [POWER_SUPPLY && X86_32 && OLPC]
    depends on [X86_32 && OLPC]
    inherited [POWER_SUPPLY && X86_32 && OLPC]
   }
  }
 }
 menuconfig HWMON tristate {
  prompt "Hardware Monitoring support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  default [y] if [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [HWMON] {
   config HWMON_VID tristate {
    default [n] if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_ABITUGURU tristate {
    prompt "Abit uGuru (rev 1 & 2)" if [HWMON && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    inherited [HWMON && X86 && EXPERIMENTAL]
   }
   config SENSORS_ABITUGURU3 tristate {
    prompt "Abit uGuru (rev 3)" if [HWMON && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    inherited [HWMON && X86 && EXPERIMENTAL]
   }
   config SENSORS_AD7418 tristate {
    prompt "Analog Devices AD7416, AD7417 and AD7418" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADM1021 tristate {
    prompt "Analog Devices ADM1021 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_ADM1025 tristate {
    prompt "Analog Devices ADM1025 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_ADM1026 tristate {
    prompt "Analog Devices ADM1026 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADM1029 tristate {
    prompt "Analog Devices ADM1029" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADM1031 tristate {
    prompt "Analog Devices ADM1031 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADM9240 tristate {
    prompt "Analog Devices ADM9240 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_ADT7470 tristate {
    prompt "Analog Devices ADT7470" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_K8TEMP tristate {
    prompt "AMD Athlon64/FX or Opteron temperature sensor" if [HWMON && X86 && PCI && EXPERIMENTAL]
    depends on [X86 && PCI && EXPERIMENTAL]
    inherited [HWMON && X86 && PCI && EXPERIMENTAL]
   }
   config SENSORS_AMS tristate {
    prompt "Apple Motion Sensor driver" if [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    depends on [PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    select INPUT_POLLDEV if [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    inherited [HWMON && PPC_PMAC && !PPC64 && INPUT && (ADB_PMU && I2C="y" || ADB_PMU && !I2C || I2C) && EXPERIMENTAL]
    config SENSORS_AMS_PMU boolean {
     prompt "PMU variant" if [HWMON && SENSORS_AMS && ADB_PMU]
     depends on [SENSORS_AMS && ADB_PMU]
     default [y] if [HWMON && SENSORS_AMS && ADB_PMU]
     inherited [HWMON && SENSORS_AMS && ADB_PMU]
    }
    config SENSORS_AMS_I2C boolean {
     prompt "I2C variant" if [HWMON && SENSORS_AMS && I2C]
     depends on [SENSORS_AMS && I2C]
     default [y] if [HWMON && SENSORS_AMS && I2C]
     inherited [HWMON && SENSORS_AMS && I2C]
    }
   }
   config SENSORS_ASB100 tristate {
    prompt "Asus ASB100 Bach" if [HWMON && X86 && I2C && EXPERIMENTAL]
    depends on [X86 && I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && X86 && I2C && EXPERIMENTAL]
    inherited [HWMON && X86 && I2C && EXPERIMENTAL]
   }
   config SENSORS_ATXP1 tristate {
    prompt "Attansic ATXP1 VID controller" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_DS1621 tristate {
    prompt "Dallas Semiconductor DS1621 and DS1625" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_I5K_AMB tristate {
    prompt "FB-DIMM AMB temperature sensor on Intel 5000 series chipsets" if [HWMON && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [HWMON && PCI && EXPERIMENTAL]
   }
   config SENSORS_F71805F tristate {
    prompt "Fintek F71805F/FG, F71806F/FG and F71872F/FG" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_F71882FG tristate {
    prompt "Fintek F71882FG and F71883FG" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_F75375S tristate {
    prompt "Fintek F75375S/SP and F75373" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_FSCHER tristate {
    prompt "FSC Hermes" if [HWMON && X86 && I2C]
    depends on [X86 && I2C]
    inherited [HWMON && X86 && I2C]
   }
   config SENSORS_FSCPOS tristate {
    prompt "FSC Poseidon" if [HWMON && X86 && I2C]
    depends on [X86 && I2C]
    inherited [HWMON && X86 && I2C]
   }
   config SENSORS_FSCHMD tristate {
    prompt "FSC Poseidon, Scylla, Hermes, Heimdall and Heracles" if [HWMON && X86 && I2C && EXPERIMENTAL]
    depends on [X86 && I2C && EXPERIMENTAL]
    inherited [HWMON && X86 && I2C && EXPERIMENTAL]
   }
   config SENSORS_GL518SM tristate {
    prompt "Genesys Logic GL518SM" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_GL520SM tristate {
    prompt "Genesys Logic GL520SM" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_CORETEMP tristate {
    prompt "Intel Core (2) Duo/Solo temperature sensor" if [HWMON && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    inherited [HWMON && X86 && EXPERIMENTAL]
   }
   config SENSORS_IBMPEX tristate {
    prompt "IBM PowerExecutive temperature/power sensors" if [HWMON && IPMI_HANDLER]
    select IPMI_SI if [HWMON && IPMI_HANDLER]
    depends on [IPMI_HANDLER]
    inherited [HWMON && IPMI_HANDLER]
   }
   config SENSORS_IT87 tristate {
    prompt "ITE IT87xx and compatibles" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_LM63 tristate {
    prompt "National Semiconductor LM63" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM70 tristate {
    prompt "National Semiconductor LM70" if [HWMON && SPI_MASTER && EXPERIMENTAL]
    depends on [SPI_MASTER && EXPERIMENTAL]
    inherited [HWMON && SPI_MASTER && EXPERIMENTAL]
   }
   config SENSORS_LM75 tristate {
    prompt "National Semiconductor LM75 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM77 tristate {
    prompt "National Semiconductor LM77" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM78 tristate {
    prompt "National Semiconductor LM78 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM80 tristate {
    prompt "National Semiconductor LM80" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_LM83 tristate {
    prompt "National Semiconductor LM83 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM85 tristate {
    prompt "National Semiconductor LM85 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_LM87 tristate {
    prompt "National Semiconductor LM87" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM90 tristate {
    prompt "National Semiconductor LM90 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM92 tristate {
    prompt "National Semiconductor LM92 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_LM93 tristate {
    prompt "National Semiconductor LM93 and compatibles" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_MAX1619 tristate {
    prompt "Maxim MAX1619 sensor chip" if [HWMON && I2C]
    depends on [I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_MAX6650 tristate {
    prompt "Maxim MAX6650 sensor chip" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_PC87360 tristate {
    prompt "National Semiconductor PC87360 family" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_PC87427 tristate {
    prompt "National Semiconductor PC87427" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_SIS5595 tristate {
    prompt "Silicon Integrated Systems Corp. SiS5595" if [HWMON && PCI]
    depends on [PCI]
    inherited [HWMON && PCI]
   }
   config SENSORS_DME1737 tristate {
    prompt "SMSC DME1737, SCH311x and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_SMSC47M1 tristate {
    prompt "SMSC LPC47M10x and compatibles" if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_SMSC47M192 tristate {
    prompt "SMSC LPC47M192 and compatibles" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_SMSC47B397 tristate {
    prompt "SMSC LPC47B397-NC" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_THMC50 tristate {
    prompt "Texas Instruments THMC50 / Analog Devices ADM1022" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_VIA686A tristate {
    prompt "VIA686A" if [HWMON && PCI]
    depends on [PCI]
    inherited [HWMON && PCI]
   }
   config SENSORS_VT1211 tristate {
    prompt "VIA VT1211" if [HWMON && EXPERIMENTAL]
    depends on [EXPERIMENTAL]
    select HWMON_VID if [HWMON && EXPERIMENTAL]
    inherited [HWMON && EXPERIMENTAL]
   }
   config SENSORS_VT8231 tristate {
    prompt "VIA VT8231" if [HWMON && PCI]
    depends on [PCI]
    select HWMON_VID if [HWMON && PCI]
    inherited [HWMON && PCI]
   }
   config SENSORS_W83781D tristate {
    prompt "Winbond W83781D, W83782D, W83783S, W83627HF, Asus AS99127F" if [HWMON && I2C]
    depends on [I2C]
    select HWMON_VID if [HWMON && I2C]
    inherited [HWMON && I2C]
   }
   config SENSORS_W83791D tristate {
    prompt "Winbond W83791D" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83792D tristate {
    prompt "Winbond W83792D" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83793 tristate {
    prompt "Winbond W83793" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    select HWMON_VID if [HWMON && I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83L785TS tristate {
    prompt "Winbond W83L785TS-S" if [HWMON && I2C && EXPERIMENTAL]
    depends on [I2C && EXPERIMENTAL]
    inherited [HWMON && I2C && EXPERIMENTAL]
   }
   config SENSORS_W83627HF tristate {
    prompt "Winbond W83627HF, W83627THF, W83637HF, W83687THF, W83697HF" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_W83627EHF tristate {
    prompt "Winbond W83627EHF/DHG" if [HWMON]
    select HWMON_VID if [HWMON]
    inherited [HWMON]
   }
   config SENSORS_HDAPS tristate {
    prompt "IBM Hard Drive Active Protection System (hdaps)" if [HWMON && INPUT && X86]
    depends on [INPUT && X86]
    select INPUT_POLLDEV if [HWMON && INPUT && X86]
    default [n] if [HWMON && INPUT && X86]
    inherited [HWMON && INPUT && X86]
   }
   config SENSORS_APPLESMC tristate {
    prompt "Apple SMC (Motion sensor, light sensor, keyboard backlight)" if [HWMON && INPUT && X86]
    depends on [INPUT && X86]
    select NEW_LEDS if [HWMON && INPUT && X86]
    select LEDS_CLASS if [HWMON && INPUT && X86]
    select INPUT_POLLDEV if [HWMON && INPUT && X86]
    default [n] if [HWMON && INPUT && X86]
    inherited [HWMON && INPUT && X86]
   }
   config HWMON_DEBUG_CHIP boolean {
    prompt "Hardware Monitoring Chip debugging messages" if [HWMON]
    default [n] if [HWMON]
    inherited [HWMON]
   }
  }
 }
 menuconfig WATCHDOG boolean {
  prompt "Watchdog Timer Support" if []
  if [WATCHDOG] {
   config WATCHDOG_NOWAYOUT boolean {
    prompt "Disable watchdog shutdown on close" if [WATCHDOG]
    inherited [WATCHDOG]
   }
   config SOFT_WATCHDOG tristate {
    prompt "Software watchdog" if [WATCHDOG]
    inherited [WATCHDOG]
   }
   config AT91RM9200_WATCHDOG tristate {
    prompt "AT91RM9200 watchdog" if [WATCHDOG && ARCH_AT91RM9200]
    depends on [ARCH_AT91RM9200]
    inherited [WATCHDOG && ARCH_AT91RM9200]
   }
   config 21285_WATCHDOG tristate {
    prompt "DC21285 watchdog" if [WATCHDOG && FOOTBRIDGE]
    depends on [FOOTBRIDGE]
    inherited [WATCHDOG && FOOTBRIDGE]
   }
   config 977_WATCHDOG tristate {
    prompt "NetWinder WB83C977 watchdog" if [WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER]
    depends on [FOOTBRIDGE && ARCH_NETWINDER]
    inherited [WATCHDOG && FOOTBRIDGE && ARCH_NETWINDER]
   }
   config IXP2000_WATCHDOG tristate {
    prompt "IXP2000 Watchdog" if [WATCHDOG && ARCH_IXP2000]
    depends on [ARCH_IXP2000]
    inherited [WATCHDOG && ARCH_IXP2000]
   }
   config IXP4XX_WATCHDOG tristate {
    prompt "IXP4xx Watchdog" if [WATCHDOG && ARCH_IXP4XX]
    depends on [ARCH_IXP4XX]
    inherited [WATCHDOG && ARCH_IXP4XX]
   }
   config KS8695_WATCHDOG tristate {
    prompt "KS8695 watchdog" if [WATCHDOG && ARCH_KS8695]
    depends on [ARCH_KS8695]
    inherited [WATCHDOG && ARCH_KS8695]
   }
   config S3C2410_WATCHDOG tristate {
    prompt "S3C2410 Watchdog" if [WATCHDOG && ARCH_S3C2410]
    depends on [ARCH_S3C2410]
    inherited [WATCHDOG && ARCH_S3C2410]
   }
   config SA1100_WATCHDOG tristate {
    prompt "SA1100/PXA2xx watchdog" if [WATCHDOG && (ARCH_SA1100 || ARCH_PXA)]
    depends on [ARCH_SA1100 || ARCH_PXA]
    inherited [WATCHDOG && (ARCH_SA1100 || ARCH_PXA)]
   }
   config MPCORE_WATCHDOG tristate {
    prompt "MPcore watchdog" if [WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
    depends on [ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
    inherited [WATCHDOG && ARM_MPCORE_PLATFORM && LOCAL_TIMERS]
   }
   config EP93XX_WATCHDOG tristate {
    prompt "EP93xx Watchdog" if [WATCHDOG && ARCH_EP93XX]
    depends on [ARCH_EP93XX]
    inherited [WATCHDOG && ARCH_EP93XX]
   }
   config OMAP_WATCHDOG tristate {
    prompt "OMAP Watchdog" if [WATCHDOG && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
    depends on [ARCH_OMAP16XX || ARCH_OMAP24XX]
    inherited [WATCHDOG && (ARCH_OMAP16XX || ARCH_OMAP24XX)]
   }
   config PNX4008_WATCHDOG tristate {
    prompt "PNX4008 Watchdog" if [WATCHDOG && ARCH_PNX4008]
    depends on [ARCH_PNX4008]
    inherited [WATCHDOG && ARCH_PNX4008]
   }
   config IOP_WATCHDOG tristate {
    prompt "IOP Watchdog" if [WATCHDOG && PLAT_IOP]
    depends on [PLAT_IOP]
    select WATCHDOG_NOWAYOUT if [WATCHDOG && PLAT_IOP && (ARCH_IOP32X || ARCH_IOP33X)]
    inherited [WATCHDOG && PLAT_IOP]
   }
   config DAVINCI_WATCHDOG tristate {
    prompt "DaVinci watchdog" if [WATCHDOG && ARCH_DAVINCI]
    depends on [ARCH_DAVINCI]
    inherited [WATCHDOG && ARCH_DAVINCI]
   }
   config AT32AP700X_WDT tristate {
    prompt "AT32AP700x watchdog" if [WATCHDOG && CPU_AT32AP7000]
    depends on [CPU_AT32AP7000]
    inherited [WATCHDOG && CPU_AT32AP7000]
   }
   config BFIN_WDT tristate {
    prompt "Blackfin On-Chip Watchdog Timer" if [WATCHDOG && BLACKFIN]
    depends on [BLACKFIN]
    inherited [WATCHDOG && BLACKFIN]
   }
   config ACQUIRE_WDT tristate {
    prompt "Acquire SBC Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config ADVANTECH_WDT tristate {
    prompt "Advantech SBC Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config ALIM1535_WDT tristate {
    prompt "ALi M1535 PMU Watchdog Timer" if [WATCHDOG && X86 && PCI]
    depends on [X86 && PCI]
    inherited [WATCHDOG && X86 && PCI]
   }
   config ALIM7101_WDT tristate {
    prompt "ALi M7101 PMU Computer Watchdog" if [WATCHDOG && X86 && PCI]
    depends on [X86 && PCI]
    inherited [WATCHDOG && X86 && PCI]
   }
   config SC520_WDT tristate {
    prompt "AMD Elan SC520 processor Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config EUROTECH_WDT tristate {
    prompt "Eurotech CPU-1220/1410 Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config IB700_WDT tristate {
    prompt "IB700 SBC Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config IBMASR tristate {
    prompt "IBM Automatic Server Restart" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config WAFER_WDT tristate {
    prompt "ICP Single Board Computer Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config I6300ESB_WDT tristate {
    prompt "Intel 6300ESB Timer/Watchdog" if [WATCHDOG && X86 && PCI]
    depends on [X86 && PCI]
    inherited [WATCHDOG && X86 && PCI]
   }
   config ITCO_WDT tristate {
    prompt "Intel TCO Timer/Watchdog" if [WATCHDOG && (X86 || IA64) && PCI]
    depends on [(X86 || IA64) && PCI]
    inherited [WATCHDOG && (X86 || IA64) && PCI]
    config ITCO_VENDOR_SUPPORT boolean {
     prompt "Intel TCO Timer/Watchdog Specific Vendor Support" if [WATCHDOG && ITCO_WDT]
     depends on [ITCO_WDT]
     inherited [WATCHDOG && ITCO_WDT]
    }
   }
   config IT8712F_WDT tristate {
    prompt "IT8712F (Smart Guardian) Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SC1200_WDT tristate {
    prompt "National Semiconductor PC87307/PC97307 (ala SC1200) Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SCx200_WDT tristate {
    prompt "National Semiconductor SCx200 Watchdog" if [WATCHDOG && SCx200 && PCI]
    depends on [SCx200 && PCI]
    inherited [WATCHDOG && SCx200 && PCI]
   }
   config PC87413_WDT tristate {
    prompt "NS PC87413 watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config 60XX_WDT tristate {
    prompt "SBC-60XX Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SBC8360_WDT tristate {
    prompt "SBC8360 Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SBC7240_WDT tristate {
    prompt "SBC Nano 7240 Watchdog Timer" if [WATCHDOG && X86_32]
    depends on [X86_32]
    inherited [WATCHDOG && X86_32]
   }
   config CPU5_WDT tristate {
    prompt "SMA CPU5 Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SMSC37B787_WDT tristate {
    prompt "Winbond SMsC37B787 Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83627HF_WDT tristate {
    prompt "W83627HF Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83697HF_WDT tristate {
    prompt "W83697HF/W83697HG Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83877F_WDT tristate {
    prompt "W83877F (EMACS) Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config W83977F_WDT tristate {
    prompt "W83977F (PCM-5335) Watchdog Timer" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config MACHZ_WDT tristate {
    prompt "ZF MachZ Watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config SBC_EPX_C3_WATCHDOG tristate {
    prompt "Winsystems SBC EPX-C3 watchdog" if [WATCHDOG && X86]
    depends on [X86]
    inherited [WATCHDOG && X86]
   }
   config INDYDOG tristate {
    prompt "Indy/I2 Hardware Watchdog" if [WATCHDOG && SGI_IP22]
    depends on [SGI_IP22]
    inherited [WATCHDOG && SGI_IP22]
   }
   config WDT_MTX1 tristate {
    prompt "MTX-1 Hardware Watchdog" if [WATCHDOG && MIPS_MTX1]
    depends on [MIPS_MTX1]
    inherited [WATCHDOG && MIPS_MTX1]
   }
   config WDT_RM9K_GPI tristate {
    prompt "RM9000/GPI hardware watchdog" if [WATCHDOG && CPU_RM9000]
    depends on [CPU_RM9000]
    inherited [WATCHDOG && CPU_RM9000]
   }
   config AR7_WDT tristate {
    prompt "TI AR7 Watchdog Timer" if [WATCHDOG && AR7]
    depends on [AR7]
    inherited [WATCHDOG && AR7]
   }
   config MPC5200_WDT tristate {
    prompt "MPC5200 Watchdog Timer" if [WATCHDOG && PPC_MPC52xx]
    depends on [PPC_MPC52xx]
    inherited [WATCHDOG && PPC_MPC52xx]
   }
   config 8xx_WDT tristate {
    prompt "MPC8xx Watchdog Timer" if [WATCHDOG && 8xx]
    depends on [8xx]
    inherited [WATCHDOG && 8xx]
   }
   config 83xx_WDT tristate {
    prompt "MPC83xx Watchdog Timer" if [WATCHDOG && PPC_83xx]
    depends on [PPC_83xx]
    inherited [WATCHDOG && PPC_83xx]
   }
   config MV64X60_WDT tristate {
    prompt "MV64X60 (Marvell Discovery) Watchdog Timer" if [WATCHDOG && MV64X60]
    depends on [MV64X60]
    inherited [WATCHDOG && MV64X60]
   }
   config BOOKE_WDT boolean {
    prompt "PowerPC Book-E Watchdog Timer" if [WATCHDOG && (BOOKE || 4xx)]
    depends on [BOOKE || 4xx]
    inherited [WATCHDOG && (BOOKE || 4xx)]
   }
   config WATCHDOG_RTAS tristate {
    prompt "RTAS watchdog" if [WATCHDOG && PPC_RTAS]
    depends on [PPC_RTAS]
    inherited [WATCHDOG && PPC_RTAS]
   }
   config ZVM_WATCHDOG tristate {
    prompt "z/VM Watchdog Timer" if [WATCHDOG && S390]
    depends on [S390]
    inherited [WATCHDOG && S390]
   }
   config SH_WDT tristate {
    prompt "SuperH Watchdog" if [WATCHDOG && SUPERH && (CPU_SH3 || CPU_SH4)]
    depends on [SUPERH && (CPU_SH3 || CPU_SH4)]
    inherited [WATCHDOG && SUPERH && (CPU_SH3 || CPU_SH4)]
    config SH_WDT_MMAP boolean {
     prompt "Allow mmap of SH WDT" if [WATCHDOG && SH_WDT]
     default [n] if [WATCHDOG && SH_WDT]
     depends on [SH_WDT]
     inherited [WATCHDOG && SH_WDT]
    }
   }
   config WATCHDOG_CP1XXX tristate {
    prompt "CP1XXX Hardware Watchdog support" if [WATCHDOG && SPARC64 && PCI]
    depends on [SPARC64 && PCI]
    inherited [WATCHDOG && SPARC64 && PCI]
   }
   config WATCHDOG_RIO tristate {
    prompt "RIO Hardware Watchdog support" if [WATCHDOG && SPARC64 && PCI]
    depends on [SPARC64 && PCI]
    inherited [WATCHDOG && SPARC64 && PCI]
   }
   config PCWATCHDOG tristate {
    prompt "Berkshire Products ISA-PC Watchdog" if [WATCHDOG && ISA]
    depends on [ISA]
    inherited [WATCHDOG && ISA]
   }
   config MIXCOMWD tristate {
    prompt "Mixcom Watchdog" if [WATCHDOG && ISA]
    depends on [ISA]
    inherited [WATCHDOG && ISA]
   }
   config WDT tristate {
    prompt "WDT Watchdog timer" if [WATCHDOG && ISA]
    depends on [ISA]
    inherited [WATCHDOG && ISA]
    config WDT_501 boolean {
     prompt "WDT501 features" if [WATCHDOG && WDT]
     depends on [WDT]
     inherited [WATCHDOG && WDT]
    }
   }
   config PCIPCWATCHDOG tristate {
    prompt "Berkshire Products PCI-PC Watchdog" if [WATCHDOG && PCI]
    depends on [PCI]
    inherited [WATCHDOG && PCI]
   }
   config WDTPCI tristate {
    prompt "PCI-WDT500/501 Watchdog timer" if [WATCHDOG && PCI]
    depends on [PCI]
    inherited [WATCHDOG && PCI]
    config WDT_501_PCI boolean {
     prompt "PCI-WDT501 features" if [WATCHDOG && WDTPCI]
     depends on [WDTPCI]
     inherited [WATCHDOG && WDTPCI]
    }
   }
   config USBPCWATCHDOG tristate {
    prompt "Berkshire Products USB-PC Watchdog" if [WATCHDOG && USB]
    depends on [USB]
    inherited [WATCHDOG && USB]
   }
  }
 }
 menu "Sonics Silicon Backplane" {
  config SSB_POSSIBLE boolean {
   depends on [HAS_IOMEM]
   default [y] if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config SSB tristate {
   prompt "Sonics Silicon Backplane support" if [SSB_POSSIBLE]
   depends on [SSB_POSSIBLE]
   inherited [SSB_POSSIBLE]
   config SSB_PCIHOST_POSSIBLE boolean {
    depends on [SSB && (PCI="y" || PCI="SSB")]
    default [y] if [SSB && (PCI || PCI="SSB")]
    inherited [SSB && (PCI || PCI="SSB")]
   }
   config SSB_PCIHOST boolean {
    prompt "Support for SSB on PCI-bus host" if [SSB_PCIHOST_POSSIBLE]
    depends on [SSB_PCIHOST_POSSIBLE]
    default [y] if [SSB_PCIHOST_POSSIBLE]
    inherited [SSB_PCIHOST_POSSIBLE]
   }
   config SSB_PCMCIAHOST_POSSIBLE boolean {
    depends on [SSB && (PCMCIA="y" || PCMCIA="SSB") && EXPERIMENTAL]
    default [y] if [SSB && (PCMCIA="y" || PCMCIA="SSB") && EXPERIMENTAL]
    inherited [SSB && (PCMCIA="y" || PCMCIA="SSB") && EXPERIMENTAL]
   }
   config SSB_PCMCIAHOST boolean {
    prompt "Support for SSB on PCMCIA-bus host (EXPERIMENTAL)" if [SSB_PCMCIAHOST_POSSIBLE]
    depends on [SSB_PCMCIAHOST_POSSIBLE]
    inherited [SSB_PCMCIAHOST_POSSIBLE]
   }
   config SSB_SILENT boolean {
    prompt "No SSB kernel messages" if [SSB && EMBEDDED]
    depends on [SSB && EMBEDDED]
    inherited [SSB && EMBEDDED]
   }
   config SSB_DEBUG boolean {
    prompt "SSB debugging" if [SSB && !SSB_SILENT]
    depends on [SSB && !SSB_SILENT]
    inherited [SSB && !SSB_SILENT]
   }
   config SSB_SERIAL boolean {
    depends on [SSB]
    inherited [SSB]
   }
  }
  config SSB_DRIVER_PCICORE_POSSIBLE boolean {
   depends on [SSB_PCIHOST]
   default [y] if [SSB_PCIHOST]
   inherited [SSB_PCIHOST]
  }
  config SSB_DRIVER_PCICORE boolean {
   prompt "SSB PCI core driver" if [SSB_DRIVER_PCICORE_POSSIBLE]
   depends on [SSB_DRIVER_PCICORE_POSSIBLE]
   inherited [SSB_DRIVER_PCICORE_POSSIBLE]
   config SSB_PCICORE_HOSTMODE boolean {
    prompt "Hostmode support for SSB PCI core (EXPERIMENTAL)" if [SSB_DRIVER_PCICORE && SSB_DRIVER_MIPS && EXPERIMENTAL]
    depends on [SSB_DRIVER_PCICORE && SSB_DRIVER_MIPS && EXPERIMENTAL]
    inherited [SSB_DRIVER_PCICORE && SSB_DRIVER_MIPS && EXPERIMENTAL]
   }
  }
  config SSB_DRIVER_MIPS boolean {
   prompt "SSB Broadcom MIPS core driver (EXPERIMENTAL)" if [SSB && MIPS && EXPERIMENTAL]
   depends on [SSB && MIPS && EXPERIMENTAL]
   select SSB_SERIAL if [SSB && MIPS && EXPERIMENTAL]
   inherited [SSB && MIPS && EXPERIMENTAL]
   config SSB_DRIVER_EXTIF boolean {
    prompt "SSB Broadcom EXTIF core driver (EXPERIMENTAL)" if [SSB_DRIVER_MIPS && EXPERIMENTAL]
    depends on [SSB_DRIVER_MIPS && EXPERIMENTAL]
    inherited [SSB_DRIVER_MIPS && EXPERIMENTAL]
   }
  }
 }
 menu "Multifunction device drivers" {
  depends on [HAS_IOMEM]
  config MFD_SM501 tristate {
   prompt "Support for Silicon Motion SM501" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
 }
 menu "Multimedia Capabilities Port drivers" {
  depends on [ARCH_SA1100]
  config MCP tristate {
   inherited [ARCH_SA1100]
  }
  config MCP_SA11X0 tristate {
   prompt "Support SA11x0 MCP interface" if [ARCH_SA1100]
   depends on [ARCH_SA1100]
   select MCP if [ARCH_SA1100]
   inherited [ARCH_SA1100]
  }
  config MCP_UCB1200 tristate {
   prompt "Support for UCB1200 / UCB1300" if [ARCH_SA1100 && MCP]
   depends on [MCP]
   inherited [ARCH_SA1100 && MCP]
   config MCP_UCB1200_TS tristate {
    prompt "Touchscreen interface support" if [ARCH_SA1100 && MCP_UCB1200 && INPUT]
    depends on [MCP_UCB1200 && INPUT]
    inherited [ARCH_SA1100 && MCP_UCB1200 && INPUT]
   }
  }
 }
 menu "Multimedia devices" {
  depends on [HAS_IOMEM]
  config VIDEO_DEV tristate {
   prompt "Video For Linux" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config VIDEO_V4L1 boolean {
    prompt "Enable Video For Linux API 1 (DEPRECATED)" if [HAS_IOMEM && VIDEO_DEV]
    depends on [VIDEO_DEV]
    select VIDEO_V4L1_COMPAT if [HAS_IOMEM && VIDEO_DEV]
    default [y] if [HAS_IOMEM && VIDEO_DEV]
    inherited [HAS_IOMEM && VIDEO_DEV]
   }
   config VIDEO_V4L1_COMPAT boolean {
    prompt "Enable Video For Linux API 1 compatible Layer" if [HAS_IOMEM && VIDEO_DEV]
    depends on [VIDEO_DEV]
    default [y] if [HAS_IOMEM && VIDEO_DEV]
    inherited [HAS_IOMEM && VIDEO_DEV]
   }
   config VIDEO_V4L2 boolean {
    depends on [VIDEO_DEV]
    default [y] if [HAS_IOMEM && VIDEO_DEV]
    inherited [HAS_IOMEM && VIDEO_DEV]
   }
   menuconfig VIDEO_CAPTURE_DRIVERS boolean {
    prompt "Video capture adapters" if [HAS_IOMEM && VIDEO_DEV]
    depends on [VIDEO_DEV]
    default [y] if [HAS_IOMEM && VIDEO_DEV]
    inherited [HAS_IOMEM && VIDEO_DEV]
    if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV] {
     config VIDEO_ADV_DEBUG boolean {
      prompt "Enable advanced debug functionality" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV]
      default [n] if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV]
     }
     config VIDEO_HELPER_CHIPS_AUTO boolean {
      prompt "Autoselect pertinent encoders/decoders and other helper chips" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV]
      default [y] if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV]
      menu "Encoders/decoders and other helper chips" {
       depends on [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO]
       config VIDEO_TVAUDIO tristate {
        prompt "Simple audio decoder chips" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_TDA7432 tristate {
        prompt "Philips TDA7432 audio processor" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_TDA9840 tristate {
        prompt "Philips TDA9840 audio processor" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_TDA9875 tristate {
        prompt "Philips TDA9875 audio processor" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_TEA6415C tristate {
        prompt "Philips TEA6415C audio processor" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_TEA6420 tristate {
        prompt "Philips TEA6420 audio processor" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C]
        depends on [I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C]
       }
       config VIDEO_MSP3400 tristate {
        prompt "Micronas MSP34xx audio decoders" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_CS53L32A tristate {
        prompt "Cirrus Logic CS53L32A audio ADC" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_TLV320AIC23B tristate {
        prompt "Texas Instruments TLV320AIC23B audio codec" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_WM8775 tristate {
        prompt "Wolfson Microelectronics WM8775 audio ADC with input mixer" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_WM8739 tristate {
        prompt "Wolfson Microelectronics WM8739 stereo audio ADC" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_VP27SMPX tristate {
        prompt "Panasonic VP27s internal MPX" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_BT819 tristate {
        prompt "BT819A VideoStream decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_BT856 tristate {
        prompt "BT856 VideoStream decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_BT866 tristate {
        prompt "BT866 VideoStream decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_KS0127 tristate {
        prompt "KS0127 video decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_OV7670 tristate {
        prompt "OmniVision OV7670 sensor support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
        depends on [I2C && VIDEO_V4L2]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
       }
       config VIDEO_TCM825X tristate {
        prompt "TCM825x camera sensor support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
        depends on [I2C && VIDEO_V4L2]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && I2C && VIDEO_V4L2]
       }
       config VIDEO_SAA7110 tristate {
        prompt "Philips SAA7110 video decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_SAA7111 tristate {
        prompt "Philips SAA7111 video decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_SAA7114 tristate {
        prompt "Philips SAA7114 video decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_SAA711X tristate {
        prompt "Philips SAA7113/4/5 video decoders" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_SAA7191 tristate {
        prompt "Philips SAA7191 video decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_TVP5150 tristate {
        prompt "Texas Instruments TVP5150 video decoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
        depends on [VIDEO_V4L2 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C]
       }
       config VIDEO_VPX3220 tristate {
        prompt "vpx3220a, vpx3216b & vpx3214c video decoders" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_CX25840 tristate {
        prompt "Conexant CX2584x audio/video decoders" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        select FW_LOADER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_CX2341X tristate {
        prompt "Conexant CX2341x MPEG encoders" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && EXPERIMENTAL]
       }
       config VIDEO_SAA7127 tristate {
        prompt "Philips SAA7127/9 digital video encoders" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_SAA7185 tristate {
        prompt "Philips SAA7185 video encoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_ADV7170 tristate {
        prompt "Analog Devices ADV7170 video encoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_ADV7175 tristate {
        prompt "Analog Devices ADV7175 video encoder" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L1 && I2C]
       }
       config VIDEO_UPD64031A tristate {
        prompt "NEC Electronics uPD64031A Ghost Reduction" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
       config VIDEO_UPD64083 tristate {
        prompt "NEC Electronics uPD64083 3-Dimensional Y/C separation" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && !VIDEO_HELPER_CHIPS_AUTO && VIDEO_V4L2 && I2C && EXPERIMENTAL]
       }
      }
     }
     config VIDEO_VIVI tristate {
      prompt "Virtual Video Driver" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
      depends on [VIDEO_V4L2 && !SPARC32 && !SPARC64]
      select VIDEOBUF_VMALLOC if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
      default [n] if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L2 && !SPARC32 && !SPARC64]
     }
     config VIDEO_BT848 tristate {
      prompt "BT848 Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      depends on [VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select I2C_ALGOBIT if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select FW_LOADER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select VIDEO_BTCX if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select VIDEOBUF_DMA_SG if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select VIDEO_IR if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select VIDEO_TVEEPROM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      select VIDEO_MSP3400 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TVAUDIO if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TDA7432 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TDA9875 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L1]
      config VIDEO_BT848_DVB boolean {
       prompt "DVB/ATSC Support for bt878 based TV cards" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_BT848 && DVB_CORE]
       depends on [VIDEO_BT848 && DVB_CORE]
       select DVB_BT8XX if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_BT848 && DVB_CORE]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_BT848 && DVB_CORE]
      }
      config VIDEO_SAA6588 tristate {
       prompt "SAA6588 Radio Chip RDS decoder support on BT848 cards" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_BT848]
       depends on [I2C && VIDEO_BT848]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_BT848]
      }
     }
     config VIDEO_PMS tristate {
      prompt "Mediavision Pro Movie Studio Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && ISA && VIDEO_V4L1]
      depends on [ISA && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && ISA && VIDEO_V4L1]
     }
     config VIDEO_PLANB tristate {
      prompt "PlanB Video-In on PowerMac" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PPC_PMAC && VIDEO_V4L1 && BROKEN]
      depends on [PPC_PMAC && VIDEO_V4L1 && BROKEN]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PPC_PMAC && VIDEO_V4L1 && BROKEN]
     }
     config VIDEO_BWQCAM tristate {
      prompt "Quickcam BW Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PARPORT && VIDEO_V4L1]
      depends on [PARPORT && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PARPORT && VIDEO_V4L1]
     }
     config VIDEO_CQCAM tristate {
      prompt "QuickCam Colour Video For Linux (EXPERIMENTAL)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && EXPERIMENTAL && PARPORT && VIDEO_V4L1]
      depends on [EXPERIMENTAL && PARPORT && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && EXPERIMENTAL && PARPORT && VIDEO_V4L1]
     }
     config VIDEO_W9966 tristate {
      prompt "W9966CF Webcam (FlyCam Supra and others) Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PARPORT_1284 && PARPORT && VIDEO_V4L1]
      depends on [PARPORT_1284 && PARPORT && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PARPORT_1284 && PARPORT && VIDEO_V4L1]
     }
     config VIDEO_CPIA tristate {
      prompt "CPiA Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1]
      depends on [VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1]
      config VIDEO_CPIA_PP tristate {
       prompt "CPiA Parallel Port Lowlevel Support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PARPORT_1284 && VIDEO_CPIA && PARPORT]
       depends on [PARPORT_1284 && VIDEO_CPIA && PARPORT]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PARPORT_1284 && VIDEO_CPIA && PARPORT]
      }
      config VIDEO_CPIA_USB tristate {
       prompt "CPiA USB Lowlevel Support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CPIA && USB]
       depends on [VIDEO_CPIA && USB]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CPIA && USB]
      }
     }
     config VIDEO_CPIA2 tristate {
      prompt "CPiA2 Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && USB && VIDEO_V4L1]
      depends on [VIDEO_DEV && USB && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && USB && VIDEO_V4L1]
     }
     config VIDEO_SAA5246A tristate {
      prompt "SAA5246A, SAA5281 Teletext processor" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_V4L2]
     }
     config VIDEO_SAA5249 tristate {
      prompt "SAA5249 Teletext processor" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_V4L2]
      depends on [I2C && VIDEO_V4L2]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_V4L2]
     }
     config TUNER_3036 tristate {
      prompt "SAB3036 tuner" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_V4L1]
      depends on [I2C && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && VIDEO_V4L1]
     }
     config VIDEO_VINO tristate {
      prompt "SGI Vino Video For Linux (EXPERIMENTAL)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
      depends on [I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
      select I2C_ALGO_SGI if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
      select VIDEO_SAA7191 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && I2C && SGI_IP22 && EXPERIMENTAL && VIDEO_V4L2]
     }
     config VIDEO_STRADIS tristate {
      prompt "Stradis 4:2:2 MPEG-2 video driver  (EXPERIMENTAL)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && EXPERIMENTAL && PCI && VIDEO_V4L1 && VIRT_TO_BUS]
      depends on [EXPERIMENTAL && PCI && VIDEO_V4L1 && VIRT_TO_BUS]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && EXPERIMENTAL && PCI && VIDEO_V4L1 && VIRT_TO_BUS]
     }
     config VIDEO_ZORAN_ZR36060 tristate {
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV]
     }
     config VIDEO_ZORAN tristate {
      prompt "Zoran ZR36057/36067 Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C_ALGOBIT && VIDEO_V4L1 && VIRT_TO_BUS]
      depends on [PCI && I2C_ALGOBIT && VIDEO_V4L1 && VIRT_TO_BUS]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C_ALGOBIT && VIDEO_V4L1 && VIRT_TO_BUS]
      config VIDEO_ZORAN_BUZ tristate {
       prompt "Iomega Buz support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       depends on [VIDEO_ZORAN]
       select VIDEO_SAA7111 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_SAA7185 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_ZORAN_ZR36060 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
      }
      config VIDEO_ZORAN_DC10 tristate {
       prompt "Pinnacle/Miro DC10(+) support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       depends on [VIDEO_ZORAN]
       select VIDEO_SAA7110 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       select VIDEO_ADV7175 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_ZORAN_ZR36060 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
      }
      config VIDEO_ZORAN_DC30 tristate {
       prompt "Pinnacle/Miro DC30(+) support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       depends on [VIDEO_ZORAN]
       select VIDEO_ADV7175 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_VPX3220 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
      }
      config VIDEO_ZORAN_LML33 tristate {
       prompt "Linux Media Labs LML33 support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       depends on [VIDEO_ZORAN]
       select VIDEO_BT819 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_BT856 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_ZORAN_ZR36060 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
      }
      config VIDEO_ZORAN_LML33R10 tristate {
       prompt "Linux Media Labs LML33R10 support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       depends on [VIDEO_ZORAN]
       select VIDEO_SAA7114 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_ADV7170 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_ZORAN_ZR36060 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN]
      }
      config VIDEO_ZORAN_AVS6EYES tristate {
       prompt "AverMedia 6 Eyes support (EXPERIMENTAL)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
       depends on [VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
       select VIDEO_BT856 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_KS0127 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1 && VIDEO_HELPER_CHIPS_AUTO]
       select VIDEO_ZORAN_ZR36060 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_ZORAN && EXPERIMENTAL && VIDEO_V4L1]
      }
     }
     config VIDEO_MEYE tristate {
      prompt "Sony Vaio Picturebook Motion Eye Video For Linux" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && SONY_LAPTOP && VIDEO_V4L1]
      depends on [PCI && SONY_LAPTOP && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && SONY_LAPTOP && VIDEO_V4L1]
     }
     config VIDEO_SAA7134 tristate {
      prompt "Philips SAA7134 support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      depends on [VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DMA_SG if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_IR if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select CRC32 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      config VIDEO_SAA7134_ALSA tristate {
       prompt "Philips SAA7134 DMA audio support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && SND]
       depends on [VIDEO_SAA7134 && SND]
       select SND_PCM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && SND]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && SND]
      }
      config VIDEO_SAA7134_OSS tristate {
       prompt "Philips SAA7134 DMA audio support (OSS, DEPRECATED)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && SOUND_PRIME && !VIDEO_SAA7134_ALSA]
       depends on [VIDEO_SAA7134 && SOUND_PRIME && !VIDEO_SAA7134_ALSA]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && SOUND_PRIME && !VIDEO_SAA7134_ALSA]
      }
      config VIDEO_SAA7134_DVB tristate {
       prompt "DVB/ATSC Support for saa7134 based TV cards" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
       depends on [VIDEO_SAA7134 && DVB_CORE]
       select VIDEOBUF_DVB if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
       select FW_LOADER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
       select DVB_PLL if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA1004X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_NXT200X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA10086 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA826X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_TDA827X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ISL6421 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_SAA7134 && DVB_CORE]
      }
     }
     config VIDEO_MXB tristate {
      prompt "Siemens-Nixdorf 'Multimedia eXtension Board'" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
      depends on [PCI && VIDEO_V4L1 && I2C]
      select VIDEO_SAA7146_VV if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
      select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
      select VIDEO_SAA7111 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TDA9840 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TEA6415C if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      select VIDEO_TEA6420 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
     }
     config VIDEO_DPC tristate {
      prompt "Philips-Semiconductors 'dpc7146 demonstration board'" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
      depends on [PCI && VIDEO_V4L1 && I2C]
      select VIDEO_SAA7146_VV if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
      select VIDEO_SAA7111 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C && VIDEO_HELPER_CHIPS_AUTO]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L1 && I2C]
     }
     config VIDEO_HEXIUM_ORION tristate {
      prompt "Hexium HV-PCI6 and Orion frame grabber" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
      depends on [PCI && VIDEO_V4L2 && I2C]
      select VIDEO_SAA7146_VV if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
     }
     config VIDEO_HEXIUM_GEMINI tristate {
      prompt "Hexium Gemini frame grabber" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
      depends on [PCI && VIDEO_V4L2 && I2C]
      select VIDEO_SAA7146_VV if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && VIDEO_V4L2 && I2C]
     }
     config VIDEO_CX88 tristate {
      prompt "Conexant 2388x (bt878 successor) support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      depends on [VIDEO_DEV && PCI && I2C && INPUT]
      select I2C_ALGOBIT if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select FW_LOADER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_BTCX if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DMA_SG if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TVEEPROM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_IR if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && INPUT]
      config VIDEO_CX88_ALSA tristate {
       prompt "Conexant 2388x DMA audio support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && SND && EXPERIMENTAL]
       depends on [VIDEO_CX88 && SND && EXPERIMENTAL]
       select SND_PCM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && SND && EXPERIMENTAL]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && SND && EXPERIMENTAL]
      }
      config VIDEO_CX88_BLACKBIRD tristate {
       prompt "Blackbird MPEG encoder support (cx2388x + cx23416)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88]
       depends on [VIDEO_CX88]
       select VIDEO_CX2341X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88]
      }
      config VIDEO_CX88_DVB tristate {
       prompt "DVB/ATSC Support for cx2388x based TV cards" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE]
       depends on [VIDEO_CX88 && DVB_CORE]
       select VIDEOBUF_DVB if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE]
       select DVB_PLL if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ZL10353 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_OR51132 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_CX22702 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_LGDT330X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_NXT200X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_CX24123 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       select DVB_ISL6421 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88 && DVB_CORE]
       config VIDEO_CX88_VP3054 tristate {
        prompt "VP-3054 Secondary I2C Bus Support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88_DVB && DVB_MT352]
        default [m] if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88_DVB && DVB_MT352]
        depends on [VIDEO_CX88_DVB && DVB_MT352]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_CX88_DVB && DVB_MT352]
       }
      }
     }
     config VIDEO_CX23885 tristate {
      prompt "Conexant cx23885 (2388x successor) support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      depends on [DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select I2C_ALGOBIT if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select FW_LOADER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_BTCX if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_TVEEPROM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEO_IR if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select VIDEOBUF_DVB if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
      select DVB_TUNER_MT2131 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_S5H1409 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_PLL if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT && !DVB_FE_CUSTOMISE]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && DVB_CORE && VIDEO_DEV && PCI && I2C && INPUT]
     }
     config VIDEO_IVTV tristate {
      prompt "Conexant cx23416/cx23415 MPEG encoder/decoder support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      depends on [VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select I2C_ALGOBIT if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select FW_LOADER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_TVEEPROM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_CX2341X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_CX25840 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_MSP3400 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_SAA711X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_SAA7127 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_TVAUDIO if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_CS53L32A if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_WM8775 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_WM8739 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_VP27SMPX if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_UPD64031A if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      select VIDEO_UPD64083 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_V4L1 && VIDEO_V4L2 && PCI && I2C && EXPERIMENTAL]
      config VIDEO_FB_IVTV tristate {
       prompt "Conexant cx23415 framebuffer support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_IVTV && FB && EXPERIMENTAL]
       depends on [VIDEO_IVTV && FB && EXPERIMENTAL]
       select FB_CFB_FILLRECT if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_IVTV && FB && EXPERIMENTAL]
       select FB_CFB_COPYAREA if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_IVTV && FB && EXPERIMENTAL]
       select FB_CFB_IMAGEBLIT if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_IVTV && FB && EXPERIMENTAL]
       inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && VIDEO_IVTV && FB && EXPERIMENTAL]
      }
     }
     config VIDEO_M32R_AR tristate {
      prompt "AR devices" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && M32R && VIDEO_V4L1]
      depends on [M32R && VIDEO_V4L1]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && M32R && VIDEO_V4L1]
     }
     config VIDEO_M32R_AR_M64278 tristate {
      prompt "AR device with color module M64278(VGA)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PLAT_M32700UT]
      depends on [PLAT_M32700UT]
      select VIDEO_M32R_AR if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PLAT_M32700UT]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PLAT_M32700UT]
     }
     config VIDEO_CAFE_CCIC tristate {
      prompt "Marvell 88ALP01 (Cafe) CMOS Camera Controller support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2]
      depends on [PCI && I2C && VIDEO_V4L2]
      select VIDEO_OV7670 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && PCI && I2C && VIDEO_V4L2]
     }
     menuconfig V4L_USB_DRIVERS boolean {
      prompt "V4L USB devices" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && USB]
      depends on [USB]
      default [y] if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && USB]
      inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && USB]
      if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB] {
       config VIDEO_PVRUSB2 tristate {
        prompt "Hauppauge WinTV-PVR USB2 support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        depends on [VIDEO_V4L2 && I2C && EXPERIMENTAL]
        select FW_LOADER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        select VIDEO_TVEEPROM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        select VIDEO_CX2341X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2 && I2C && EXPERIMENTAL]
        config VIDEO_PVRUSB2_29XXX boolean {
         prompt "Hauppauge WinTV-PVR USB2 support for 29xxx model series" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
         depends on [VIDEO_PVRUSB2 && EXPERIMENTAL]
         select VIDEO_SAA711X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
         select VIDEO_MSP3400 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
         inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
        }
        config VIDEO_PVRUSB2_24XXX boolean {
         prompt "Hauppauge WinTV-PVR USB2 support for 24xxx model series" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
         depends on [VIDEO_PVRUSB2 && EXPERIMENTAL]
         select VIDEO_CX25840 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
         select VIDEO_WM8775 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
         inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && EXPERIMENTAL]
        }
        config VIDEO_PVRUSB2_SYSFS boolean {
         prompt "pvrusb2 sysfs support (EXPERIMENTAL)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
         default [y] if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
         depends on [VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
         inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2 && SYSFS && EXPERIMENTAL]
         config VIDEO_PVRUSB2_DEBUGIFC boolean {
          prompt "pvrusb2 debug interface" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2_SYSFS]
          depends on [VIDEO_PVRUSB2_SYSFS]
          inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_PVRUSB2_SYSFS]
         }
        }
       }
       config VIDEO_EM28XX tristate {
        prompt "Empia EM2800/2820/2840 USB video capture support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && INPUT]
        depends on [VIDEO_V4L1 && I2C && INPUT]
        select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && INPUT]
        select VIDEO_TVEEPROM if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && INPUT]
        select VIDEO_IR if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && INPUT]
        select VIDEO_SAA711X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
        select VIDEO_TVP5150 if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && INPUT && VIDEO_HELPER_CHIPS_AUTO]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C && INPUT]
       }
       config VIDEO_USBVISION tristate {
        prompt "USB video devices based on Nogatech NT1003/1004/1005" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2]
        depends on [I2C && VIDEO_V4L2]
        select VIDEO_TUNER if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2]
        select VIDEO_SAA711X if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L2]
       }
       config VIDEO_USBVIDEO tristate {
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB]
       }
       config USB_VICAM tristate {
        prompt "USB 3com HomeConnect (aka vicam) support (EXPERIMENTAL)" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && EXPERIMENTAL]
        depends on [VIDEO_V4L1 && EXPERIMENTAL]
        select VIDEO_USBVIDEO if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && EXPERIMENTAL]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && EXPERIMENTAL]
       }
       config USB_IBMCAM tristate {
        prompt "USB IBM (Xirlink) C-it Camera support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        select VIDEO_USBVIDEO if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_KONICAWC tristate {
        prompt "USB Konica Webcam support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        select VIDEO_USBVIDEO if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_QUICKCAM_MESSENGER tristate {
        prompt "USB Logitech Quickcam Messenger" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        select VIDEO_USBVIDEO if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_ET61X251 tristate {
        prompt "USB ET61X[12]51 PC Camera Controller support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
       config VIDEO_OVCAMCHIP tristate {
        prompt "OmniVision Camera Chip support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L1]
        depends on [I2C && VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && I2C && VIDEO_V4L1]
       }
       config USB_W9968CF tristate {
        prompt "USB W996[87]CF JPEG Dual Mode Camera support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C]
        depends on [VIDEO_V4L1 && I2C]
        select VIDEO_OVCAMCHIP if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1 && I2C]
       }
       config USB_OV511 tristate {
        prompt "USB OV511 Camera support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_SE401 tristate {
        prompt "USB SE401 Camera support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_SN9C102 tristate {
        prompt "USB SN9C1xx PC Camera Controller support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
       config USB_STV680 tristate {
        prompt "USB STV680 (Pencam) Camera support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
       }
       config USB_ZC0301 tristate {
        prompt "USB ZC0301[P] Image Processor and Control Chip support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
       config USB_PWC tristate {
        prompt "USB Philips Cameras" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        depends on [VIDEO_V4L1]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L1]
        config USB_PWC_DEBUG boolean {
         prompt "USB Philips Cameras verbose debug" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && USB_PWC]
         depends on [USB_PWC]
         inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && USB_PWC]
        }
       }
       config USB_ZR364XX tristate {
        prompt "USB ZR364XX Camera support" if [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
        depends on [VIDEO_V4L2]
        inherited [HAS_IOMEM && VIDEO_CAPTURE_DRIVERS && VIDEO_DEV && V4L_USB_DRIVERS && USB && VIDEO_V4L2]
       }
      }
     }
    }
   }
   menuconfig RADIO_ADAPTERS boolean {
    prompt "Radio Adapters" if [HAS_IOMEM && VIDEO_DEV]
    depends on [VIDEO_DEV]
    default [y] if [HAS_IOMEM && VIDEO_DEV]
    inherited [HAS_IOMEM && VIDEO_DEV]
    if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV] {
     config RADIO_CADET tristate {
      prompt "ADS Cadet AM/FM Tuner" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
     }
     config RADIO_RTRACK tristate {
      prompt "AIMSlab RadioTrack (aka RadioReveal) support" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_RTRACK_PORT hex {
       prompt "RadioTrack i/o port (0x20f or 0x30f)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_RTRACK="y"]
       depends on [RADIO_RTRACK="y"]
       default [20f] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_RTRACK="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_RTRACK="y"]
      }
     }
     config RADIO_RTRACK2 tristate {
      prompt "AIMSlab RadioTrack II support" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_RTRACK2_PORT hex {
       prompt "RadioTrack II i/o port (0x20c or 0x30c)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_RTRACK2="y"]
       depends on [RADIO_RTRACK2="y"]
       default [30c] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_RTRACK2="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_RTRACK2="y"]
      }
     }
     config RADIO_AZTECH tristate {
      prompt "Aztech/Packard Bell Radio" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_AZTECH_PORT hex {
       prompt "Aztech/Packard Bell I/O port (0x350 or 0x358)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_AZTECH="y"]
       depends on [RADIO_AZTECH="y"]
       default [350] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_AZTECH="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_AZTECH="y"]
      }
     }
     config RADIO_GEMTEK tristate {
      prompt "GemTek Radio card (or compatible) support" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_GEMTEK_PORT hex {
       prompt "Fixed I/O port (0x20c, 0x30c, 0x24c, 0x34c, 0c24c or 0x28c)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_GEMTEK="y"]
       depends on [RADIO_GEMTEK="y"]
       default [34c] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_GEMTEK="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_GEMTEK="y"]
      }
      config RADIO_GEMTEK_PROBE boolean {
       prompt "Automatic I/O port probing" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_GEMTEK="y"]
       depends on [RADIO_GEMTEK="y"]
       default [y] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_GEMTEK="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_GEMTEK="y"]
      }
     }
     config RADIO_GEMTEK_PCI tristate {
      prompt "GemTek PCI Radio Card support" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && VIDEO_V4L2 && PCI]
      depends on [VIDEO_V4L2 && PCI]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && VIDEO_V4L2 && PCI]
     }
     config RADIO_MAXIRADIO tristate {
      prompt "Guillemot MAXI Radio FM 2000 radio" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && VIDEO_V4L2 && PCI]
      depends on [VIDEO_V4L2 && PCI]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && VIDEO_V4L2 && PCI]
     }
     config RADIO_MAESTRO tristate {
      prompt "Maestro on board radio" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && VIDEO_V4L2 && PCI]
      depends on [VIDEO_V4L2 && PCI]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && VIDEO_V4L2 && PCI]
     }
     config RADIO_SF16FMI tristate {
      prompt "SF16FMI Radio" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
     }
     config RADIO_SF16FMR2 tristate {
      prompt "SF16FMR2 Radio" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
     }
     config RADIO_TERRATEC tristate {
      prompt "TerraTec ActiveRadio ISA Standalone" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_TERRATEC_PORT hex {
       prompt "Terratec i/o port (normally 0x590)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TERRATEC="y"]
       depends on [RADIO_TERRATEC="y"]
       default [590] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TERRATEC="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TERRATEC="y"]
      }
     }
     config RADIO_TRUST tristate {
      prompt "Trust FM radio card" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_TRUST_PORT hex {
       prompt "Trust i/o port (usually 0x350 or 0x358)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TRUST="y"]
       depends on [RADIO_TRUST="y"]
       default [350] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TRUST="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TRUST="y"]
      }
     }
     config RADIO_TYPHOON tristate {
      prompt "Typhoon Radio (a.k.a. EcoRadio)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_TYPHOON_PROC_FS boolean {
       prompt "Support for /proc/radio-typhoon" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && PROC_FS && RADIO_TYPHOON]
       depends on [PROC_FS && RADIO_TYPHOON]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && PROC_FS && RADIO_TYPHOON]
      }
      config RADIO_TYPHOON_PORT hex {
       prompt "Typhoon I/O port (0x316 or 0x336)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TYPHOON="y"]
       depends on [RADIO_TYPHOON="y"]
       default [316] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TYPHOON="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TYPHOON="y"]
      }
      config RADIO_TYPHOON_MUTEFREQ integer {
       prompt "Typhoon frequency set when muting the device (kHz)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TYPHOON="y"]
       depends on [RADIO_TYPHOON="y"]
       default [87500] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TYPHOON="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_TYPHOON="y"]
      }
     }
     config RADIO_ZOLTRIX tristate {
      prompt "Zoltrix Radio" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      depends on [ISA && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && ISA && VIDEO_V4L2]
      config RADIO_ZOLTRIX_PORT hex {
       prompt "ZOLTRIX I/O port (0x20c or 0x30c)" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_ZOLTRIX="y"]
       depends on [RADIO_ZOLTRIX="y"]
       default [20c] if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_ZOLTRIX="y"]
       inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && RADIO_ZOLTRIX="y"]
      }
     }
     config USB_DSBR tristate {
      prompt "D-Link/GemTek USB FM radio support" if [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && USB && VIDEO_V4L2]
      depends on [USB && VIDEO_V4L2]
      inherited [HAS_IOMEM && RADIO_ADAPTERS && VIDEO_DEV && USB && VIDEO_V4L2]
     }
    }
   }
  }
  config DVB_CORE tristate {
   prompt "DVB for Linux" if [HAS_IOMEM && NET && INET]
   depends on [NET && INET]
   select CRC32 if [HAS_IOMEM && NET && INET]
   inherited [HAS_IOMEM && NET && INET]
   config DVB_CORE_ATTACH boolean {
    prompt "Load and attach frontend modules as needed" if [HAS_IOMEM && DVB_CORE && MODULES]
    depends on [DVB_CORE]
    depends on [MODULES]
    inherited [HAS_IOMEM && DVB_CORE && MODULES]
   }
   menuconfig DVB_CAPTURE_DRIVERS boolean {
    prompt "DVB/ATSC adapters" if [HAS_IOMEM && DVB_CORE]
    depends on [DVB_CORE]
    default [y] if [HAS_IOMEM && DVB_CORE]
    inherited [HAS_IOMEM && DVB_CORE]
    if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE] {
     config DVB_AV7110 tristate {
      prompt "AV7110 cards" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_AV7110_FIRMWARE]
      select VIDEO_SAA7146_VV if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_VES1820 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1X93 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_SP8870 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_L64781 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      config DVB_AV7110_FIRMWARE boolean {
       prompt "Compile AV7110 firmware into the driver" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110 && !STANDALONE]
       depends on [DVB_AV7110 && !STANDALONE]
       default [y] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && !STANDALONE && DVB_AV7110="y"]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110 && !STANDALONE]
       config DVB_AV7110_FIRMWARE_FILE string {
        prompt "Full pathname of av7110 firmware file" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110_FIRMWARE]
        depends on [DVB_AV7110_FIRMWARE]
        default ["/usr/lib/hotplug/firmware/dvb-ttpci-01.fw"] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110_FIRMWARE]
        inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110_FIRMWARE]
       }
      }
      config DVB_AV7110_OSD boolean {
       prompt "AV7110 OSD support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110]
       depends on [DVB_AV7110]
       default [y] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_AV7110]
      }
     }
     config DVB_BUDGET tristate {
      prompt "Budget cards" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select VIDEO_SAA7146 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1X93 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1820 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_L64781 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10021 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10023 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_S5H1420 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10086 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA826X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
     }
     config DVB_BUDGET_CI tristate {
      prompt "Budget cards with onboard CI connector" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT]
      select VIDEO_SAA7146 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT]
      select DVB_STV0297 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT && !DVB_FE_CUSTOMISE]
      select VIDEO_IR if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && INPUT]
     }
     config DVB_BUDGET_AV tristate {
      prompt "Budget cards with analog video inputs" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      depends on [DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select VIDEO_SAA7146_VV if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10021 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA10023 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TUA6100 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_V4L1]
     }
     config DVB_BUDGET_PATCH tristate {
      prompt "AV7110 cards with Budget Patch" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
      depends on [DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
      select DVB_AV7110 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
      select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_VES1X93 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET && VIDEO_V4L1 && !DVB_FE_CUSTOMISE]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_BUDGET && VIDEO_V4L1]
     }
     config DVB_USB tristate {
      prompt "Support for various USB DVB devices" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C]
      depends on [DVB_CORE && USB && I2C]
      select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C]
      config DVB_USB_DEBUG boolean {
       prompt "Enable extended debug support for all DVB-USB devices" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_A800 tristate {
       prompt "AVerMedia AverTV DVB-T USB 2.0 (A800)" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_TUNER_MT2060 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DIBUSB_MB tristate {
       prompt "DiBcom USB DVB-T devices (based on the DiB3000M-B) (see help for device list)" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB3000MB if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_TUNER_MT2060 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       config DVB_USB_DIBUSB_MB_FAULTY boolean {
        prompt "Support faulty USB IDs" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_DIBUSB_MB]
        depends on [DVB_USB_DIBUSB_MB]
        inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_DIBUSB_MB]
       }
      }
      config DVB_USB_DIBUSB_MC tristate {
       prompt "DiBcom USB DVB-T devices (based on the DiB3000M-C/P) (see help for device list)" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_TUNER_MT2060 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DIB0700 tristate {
       prompt "DiBcom DiB0700 USB DVB devices (see help for supported devices)" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB7000P if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_DIB7000M if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_DIB3000MC if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_TUNER_MT2060 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_MT2266 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_DIB0070 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_UMT_010 tristate {
       prompt "HanfTek UMT-010 DVB-T USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_DIB3000MC if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_TUNER_MT2060 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_CXUSB tristate {
       prompt "Conexant USB2.0 hybrid reference design support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_CX22702 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LGDT330X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_ZL10353 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_M920X tristate {
       prompt "Uli m920x DVB-T USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_MT352 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_QT1010 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_GL861 tristate {
       prompt "Genesys Logic GL861 USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_ZL10353 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_QT1010 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_AU6610 tristate {
       prompt "Alcor Micro AU6610 USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_ZL10353 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_QT1010 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DIGITV tristate {
       prompt "Nebula Electronics uDigiTV DVB-T USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_NXT6000 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_MT352 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_VP7045 tristate {
       prompt "TwinhanDTV Alpha/MagicBoxII, DNTV tinyUSB2, Beetle USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_VP702X tristate {
       prompt "TwinhanDTV StarBox and clones DVB-S USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_GP8PSK tristate {
       prompt "GENPIX 8PSK->USB module support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_NOVA_T_USB2 tristate {
       prompt "Hauppauge WinTV-NOVA-T usb2 DVB-T USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_DIB3000MC if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       select DVB_TUNER_MT2060 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_TTUSB2 tristate {
       prompt "Pinnacle 400e DVB-S USB2.0 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_TDA10086 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_LNBP21 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_TDA826X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_DTT200U tristate {
       prompt "WideView WT-200U and WT-220U (pen) DVB-T USB2.0 support (Yakumo/Hama/Typhoon/Yuan)" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_OPERA1 tristate {
       prompt "Opera1 DVB-S USB2.0 receiver" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
       depends on [DVB_USB]
       select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB]
      }
      config DVB_USB_AF9005 tristate {
       prompt "Afatech AF9005 DVB-T USB1.1 support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL]
       depends on [DVB_USB && EXPERIMENTAL]
       select DVB_TUNER_MT2060 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL && !DVB_FE_CUSTOMISE]
       select DVB_TUNER_QT1010 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL && !DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB && EXPERIMENTAL]
       config DVB_USB_AF9005_REMOTE tristate {
        prompt "Afatech AF9005 default remote control support" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_AF9005]
        depends on [DVB_USB_AF9005]
        inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_USB_AF9005]
       }
      }
     }
     config DVB_TTUSB_BUDGET tristate {
      prompt "Technotrend/Hauppauge Nova-USB devices" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C]
      depends on [DVB_CORE && USB && I2C]
      select DVB_CX22700 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_TDA1004X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_VES1820 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_TDA8083 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      select DVB_LNBP21 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C && !DVB_FE_CUSTOMISE]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB && I2C]
     }
     config DVB_TTUSB_DEC tristate {
      prompt "Technotrend/Hauppauge USB DEC devices" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB]
      depends on [DVB_CORE && USB]
      select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB]
      select CRC32 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB]
     }
     config DVB_CINERGYT2 tristate {
      prompt "Terratec CinergyT2/qanu USB2 DVB-T receiver" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB]
      depends on [DVB_CORE && USB]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && USB]
      config DVB_CINERGYT2_TUNING boolean {
       prompt "sophisticated fine-tuning for CinergyT2 cards" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2]
       depends on [DVB_CINERGYT2]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2]
       config DVB_CINERGYT2_STREAM_URB_COUNT integer {
        prompt "Number of queued USB Request Blocks for Highspeed Stream Transfers" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [32] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
       }
       config DVB_CINERGYT2_STREAM_BUF_SIZE integer {
        prompt "Size of URB Stream Buffers for Highspeed Transfers" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [512] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
       }
       config DVB_CINERGYT2_QUERY_INTERVAL integer {
        prompt "Status update interval [milliseconds]" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [250] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
       }
       config DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE boolean {
        prompt "Register the onboard IR Remote Control Receiver as Input Device" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        depends on [DVB_CINERGYT2_TUNING]
        default [y] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING]
        config DVB_CINERGYT2_RC_QUERY_INTERVAL integer {
         prompt "Infrared Remote Controller update interval [milliseconds]" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
         depends on [DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
         default [50] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
         inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_CINERGYT2_TUNING && DVB_CINERGYT2_ENABLE_RC_INPUT_DEVICE]
        }
       }
      }
     }
     config DVB_B2C2_FLEXCOP tristate {
      prompt "Technisat/B2C2 FlexCopII(b) and FlexCopIII adapters" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      depends on [DVB_CORE && I2C]
      select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0299 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_MT352 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_MT312 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_NXT200X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_STV0297 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_BCM3510 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && !DVB_FE_CUSTOMISE]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      config DVB_B2C2_FLEXCOP_PCI tristate {
       prompt "Technisat/B2C2 Air/Sky/Cable2PC PCI" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && PCI && I2C]
       depends on [DVB_B2C2_FLEXCOP && PCI && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && PCI && I2C]
      }
      config DVB_B2C2_FLEXCOP_USB tristate {
       prompt "Technisat/B2C2 Air/Sky/Cable2PC USB" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && USB && I2C]
       depends on [DVB_B2C2_FLEXCOP && USB && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP && USB && I2C]
      }
      config DVB_B2C2_FLEXCOP_DEBUG boolean {
       prompt "Enable debug for the B2C2 FlexCop drivers" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP]
       depends on [DVB_B2C2_FLEXCOP]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && DVB_B2C2_FLEXCOP]
      }
     }
     config DVB_BT8XX tristate {
      prompt "BT8xx based PCI cards" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848]
      depends on [DVB_CORE && PCI && I2C && VIDEO_BT848]
      select DVB_MT352 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_SP887X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_NXT6000 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_CX24110 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_OR51211 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_LGDT330X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_PLL if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select DVB_ZL10353 if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848 && !DVB_FE_CUSTOMISE]
      select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C && VIDEO_BT848]
     }
     config DVB_PLUTO2 tristate {
      prompt "Pluto2 cards" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      depends on [DVB_CORE && PCI && I2C]
      select I2C_ALGOBIT if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      select DVB_TDA1004X if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
      inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && PCI && I2C]
     }
     menu "Customise DVB Frontends" {
      depends on [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE]
      config DVB_FE_CUSTOMISE boolean {
       prompt "Customise the frontend modules to build" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE]
       default [N] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE]
      }
      config DVB_STV0299 tristate {
       prompt "ST STV0299 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_CX24110 tristate {
       prompt "Conexant CX24110 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_CX24123 tristate {
       prompt "Conexant CX24123 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TDA8083 tristate {
       prompt "Philips TDA8083 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_MT312 tristate {
       prompt "Zarlink VP310/MT312 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_VES1X93 tristate {
       prompt "VLSI VES1893 or VES1993 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_S5H1420 tristate {
       prompt "Samsung S5H1420 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TDA10086 tristate {
       prompt "Philips TDA10086 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_SP8870 tristate {
       prompt "Spase sp8870 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_SP887X tristate {
       prompt "Spase sp887x based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_CX22700 tristate {
       prompt "Conexant CX22700 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_CX22702 tristate {
       prompt "Conexant cx22702 demodulator (OFDM)" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_L64781 tristate {
       prompt "LSI L64781" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TDA1004X tristate {
       prompt "Philips TDA10045H/TDA10046H based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_NXT6000 tristate {
       prompt "NxtWave Communications NXT6000 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_MT352 tristate {
       prompt "Zarlink MT352 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_ZL10353 tristate {
       prompt "Zarlink ZL10353 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_DIB3000MB tristate {
       prompt "DiBcom 3000M-B" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_DIB3000MC tristate {
       prompt "DiBcom 3000P/M-C" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_DIB7000M tristate {
       prompt "DiBcom 7000MA/MB/PA/PB/MC" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_DIB7000P tristate {
       prompt "DiBcom 7000PC" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_VES1820 tristate {
       prompt "VLSI VES1820 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TDA10021 tristate {
       prompt "Philips TDA10021 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TDA10023 tristate {
       prompt "Philips TDA10023 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_STV0297 tristate {
       prompt "ST STV0297 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_NXT200X tristate {
       prompt "NxtWave Communications NXT2002/NXT2004 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_OR51211 tristate {
       prompt "Oren OR51211 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_OR51132 tristate {
       prompt "Oren OR51132 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_BCM3510 tristate {
       prompt "Broadcom BCM3510" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       select FW_LOADER if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_LGDT330X tristate {
       prompt "LG Electronics LGDT3302/LGDT3303 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_S5H1409 tristate {
       prompt "Samsung S5H1409 based" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_PLL tristate {
       prompt "Generic I2C PLL based tuners" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TDA826X tristate {
       prompt "Philips TDA826X silicon tuner" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TDA827X tristate {
       prompt "Philips TDA827X silicon tuner" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TUNER_QT1010 tristate {
       prompt "Quantek QT1010 silicon tuner" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TUNER_MT2060 tristate {
       prompt "Microtune MT2060 silicon IF tuner" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TUNER_MT2266 tristate {
       prompt "Microtune MT2266 silicon tuner" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TUNER_MT2131 tristate {
       prompt "Microtune MT2131 silicon tuner" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TUNER_DIB0070 tristate {
       prompt "DiBcom DiB0070 silicon base-band tuner" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_LNBP21 tristate {
       prompt "LNBP21 SEC controller" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_ISL6421 tristate {
       prompt "ISL6421 SEC controller" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
      config DVB_TUA6100 tristate {
       prompt "TUA6100 PLL" if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
       depends on [DVB_CORE && I2C]
       default [m] if [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C && DVB_FE_CUSTOMISE]
       inherited [HAS_IOMEM && DVB_CAPTURE_DRIVERS && DVB_CORE && I2C]
      }
     }
    }
   }
  }
  config VIDEO_SAA7146 tristate {
   depends on [I2C]
   inherited [HAS_IOMEM && I2C]
  }
  config VIDEO_SAA7146_VV tristate {
   depends on [VIDEO_DEV]
   select VIDEOBUF_DMA_SG if [HAS_IOMEM && VIDEO_DEV]
   select VIDEO_SAA7146 if [HAS_IOMEM && VIDEO_DEV]
   inherited [HAS_IOMEM && VIDEO_DEV]
  }
  config VIDEO_TUNER tristate {
   depends on [I2C]
   select TUNER_MT20XX if [HAS_IOMEM && I2C && !VIDEO_TUNER_CUSTOMIZE]
   select TUNER_TDA8290 if [HAS_IOMEM && I2C && !VIDEO_TUNER_CUSTOMIZE]
   select TUNER_TEA5761 if [HAS_IOMEM && I2C && !VIDEO_TUNER_CUSTOMIZE]
   select TUNER_TEA5767 if [HAS_IOMEM && I2C && !VIDEO_TUNER_CUSTOMIZE]
   select TUNER_SIMPLE if [HAS_IOMEM && I2C && !VIDEO_TUNER_CUSTOMIZE]
   inherited [HAS_IOMEM && I2C]
  }
  menuconfig VIDEO_TUNER_CUSTOMIZE boolean {
   prompt "Customize analog tuner modules to build" if [HAS_IOMEM && VIDEO_TUNER]
   depends on [VIDEO_TUNER]
   inherited [HAS_IOMEM && VIDEO_TUNER]
   if [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE] {
    config TUNER_MT20XX tristate {
     prompt "Microtune 2032 / 2050 tuners" if [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
     depends on [I2C]
     default [m] if [HAS_IOMEM && I2C && VIDEO_TUNER_CUSTOMIZE]
     inherited [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
    }
    config TUNER_TDA8290 tristate {
     prompt "TDA 8290+8275(a) tuner combo" if [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
     depends on [I2C]
     default [m] if [HAS_IOMEM && I2C && VIDEO_TUNER_CUSTOMIZE]
     inherited [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
    }
    config TUNER_TEA5761 tristate {
     prompt "TEA 5761 radio tuner (EXPERIMENTAL)" if [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C && EXPERIMENTAL]
     depends on [I2C && EXPERIMENTAL]
     default [m] if [HAS_IOMEM && I2C && EXPERIMENTAL && VIDEO_TUNER_CUSTOMIZE]
     inherited [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C && EXPERIMENTAL]
    }
    config TUNER_TEA5767 tristate {
     prompt "TEA 5767 radio tuner" if [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
     depends on [I2C]
     default [m] if [HAS_IOMEM && I2C && VIDEO_TUNER_CUSTOMIZE]
     inherited [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
    }
    config TUNER_SIMPLE tristate {
     prompt "Simple tuner support" if [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
     depends on [I2C]
     default [m] if [HAS_IOMEM && I2C && VIDEO_TUNER_CUSTOMIZE]
     inherited [HAS_IOMEM && VIDEO_TUNER_CUSTOMIZE && I2C]
    }
   }
  }
  config VIDEOBUF_GEN tristate {
   inherited [HAS_IOMEM]
  }
  config VIDEOBUF_DMA_SG tristate {
   depends on [PCI]
   select VIDEOBUF_GEN if [HAS_IOMEM && PCI]
   inherited [HAS_IOMEM && PCI]
  }
  config VIDEOBUF_VMALLOC tristate {
   select VIDEOBUF_GEN if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config VIDEOBUF_DVB tristate {
   select VIDEOBUF_GEN if [HAS_IOMEM]
   select VIDEOBUF_DMA_SG if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config VIDEO_BTCX tristate {
   inherited [HAS_IOMEM]
  }
  config VIDEO_IR_I2C tristate {
   inherited [HAS_IOMEM]
  }
  config VIDEO_IR tristate {
   depends on [INPUT]
   select VIDEO_IR_I2C if [HAS_IOMEM && INPUT && I2C]
   inherited [HAS_IOMEM && INPUT]
  }
  config VIDEO_TVEEPROM tristate {
   depends on [I2C]
   inherited [HAS_IOMEM && I2C]
  }
  config DAB boolean {
   prompt "DAB adapters" if [HAS_IOMEM]
   default [y] if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   if [HAS_IOMEM && DAB] {
    config USB_DABUSB tristate {
     prompt "DABUSB driver" if [HAS_IOMEM && DAB && USB]
     depends on [USB]
     inherited [HAS_IOMEM && DAB && USB]
    }
   }
  }
 }
 menu "Graphics support" {
  depends on [HAS_IOMEM]
  menuconfig AGP tristate {
   prompt "/dev/agpgart (AGP Support)" if [HAS_IOMEM && (ALPHA || IA64 || PARISC || PPC || X86) && PCI]
   depends on [ALPHA || IA64 || PARISC || PPC || X86]
   depends on [PCI]
   inherited [HAS_IOMEM && (ALPHA || IA64 || PARISC || PPC || X86) && PCI]
   config AGP_ALI tristate {
    prompt "ALI chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_ATI tristate {
    prompt "ATI chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_AMD tristate {
    prompt "AMD Irongate, 761, and 762 chipset support" if [HAS_IOMEM && AGP && (X86_32 || ALPHA)]
    depends on [AGP && (X86_32 || ALPHA)]
    inherited [HAS_IOMEM && AGP && (X86_32 || ALPHA)]
   }
   config AGP_AMD64 tristate {
    prompt "AMD Opteron/Athlon64 on-CPU GART support" if [HAS_IOMEM && AGP && X86 && !GART_IOMMU]
    depends on [AGP && X86]
    default [y] if [HAS_IOMEM && AGP && X86 && GART_IOMMU]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_INTEL tristate {
    prompt "Intel 440LX/BX/GX, I8xx and E7x05 chipset support" if [HAS_IOMEM && AGP && X86]
    depends on [AGP && X86]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_NVIDIA tristate {
    prompt "NVIDIA nForce/nForce2 chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_SIS tristate {
    prompt "SiS chipset support" if [HAS_IOMEM && AGP && X86]
    depends on [AGP && X86]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_SWORKS tristate {
    prompt "Serverworks LE/HE chipset support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_VIA tristate {
    prompt "VIA chipset support" if [HAS_IOMEM && AGP && X86]
    depends on [AGP && X86]
    inherited [HAS_IOMEM && AGP && X86]
   }
   config AGP_I460 tristate {
    prompt "Intel 460GX chipset support" if [HAS_IOMEM && AGP && (IA64_DIG || IA64_GENERIC)]
    depends on [AGP && (IA64_DIG || IA64_GENERIC)]
    inherited [HAS_IOMEM && AGP && (IA64_DIG || IA64_GENERIC)]
   }
   config AGP_HP_ZX1 tristate {
    prompt "HP ZX1 chipset AGP support" if [HAS_IOMEM && AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
    depends on [AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
    inherited [HAS_IOMEM && AGP && (IA64_HP_ZX1 || IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)]
   }
   config AGP_PARISC tristate {
    prompt "HP Quicksilver AGP support" if [HAS_IOMEM && AGP && PARISC && 64BIT]
    depends on [AGP && PARISC && 64BIT]
    inherited [HAS_IOMEM && AGP && PARISC && 64BIT]
   }
   config AGP_ALPHA_CORE tristate {
    prompt "Alpha AGP support" if [HAS_IOMEM && AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    depends on [AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    default [AGP] if [HAS_IOMEM && AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
    inherited [HAS_IOMEM && AGP && (ALPHA_GENERIC || ALPHA_TITAN || ALPHA_MARVEL)]
   }
   config AGP_UNINORTH tristate {
    prompt "Apple UniNorth & U3 AGP support" if [HAS_IOMEM && AGP && PPC_PMAC]
    depends on [AGP && PPC_PMAC]
    inherited [HAS_IOMEM && AGP && PPC_PMAC]
   }
   config AGP_EFFICEON tristate {
    prompt "Transmeta Efficeon support" if [HAS_IOMEM && AGP && X86_32]
    depends on [AGP && X86_32]
    inherited [HAS_IOMEM && AGP && X86_32]
   }
   config AGP_SGI_TIOCA tristate {
    prompt "SGI TIO chipset AGP support" if [HAS_IOMEM && AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
    depends on [AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
    inherited [HAS_IOMEM && AGP && (IA64_SGI_SN2 || IA64_GENERIC)]
   }
  }
  menuconfig DRM tristate {
   prompt "Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)" if [HAS_IOMEM && (AGP || AGP="n") && PCI && !EMULATED_CMPXCHG]
   depends on [(AGP || AGP="n") && PCI && !EMULATED_CMPXCHG]
   inherited [HAS_IOMEM && (AGP || AGP="n") && PCI && !EMULATED_CMPXCHG]
   config DRM_TDFX tristate {
    prompt "3dfx Banshee/Voodoo3+" if [HAS_IOMEM && DRM && PCI]
    depends on [DRM && PCI]
    inherited [HAS_IOMEM && DRM && PCI]
   }
   config DRM_R128 tristate {
    prompt "ATI Rage 128" if [HAS_IOMEM && DRM && PCI]
    depends on [DRM && PCI]
    inherited [HAS_IOMEM && DRM && PCI]
   }
   config DRM_RADEON tristate {
    prompt "ATI Radeon" if [HAS_IOMEM && DRM && PCI]
    depends on [DRM && PCI]
    inherited [HAS_IOMEM && DRM && PCI]
   }
   config DRM_I810 tristate {
    prompt "Intel I810" if [HAS_IOMEM && DRM && AGP && AGP_INTEL]
    depends on [DRM && AGP && AGP_INTEL]
    inherited [HAS_IOMEM && DRM && AGP && AGP_INTEL]
   }
   choice tristate optional {
    prompt "Intel 830M, 845G, 852GM, 855GM, 865G" if [HAS_IOMEM && DRM && AGP && AGP_INTEL]
    depends on [DRM && AGP && AGP_INTEL]
    config DRM_I830 tristate {
     prompt "i830 driver" if [<choice>]
     inherited [<choice>]
    }
    config DRM_I915 tristate {
     prompt "i915 driver" if [<choice>]
     inherited [<choice>]
    }
   }
   config DRM_MGA tristate {
    prompt "Matrox g200/g400" if [HAS_IOMEM && DRM]
    depends on [DRM]
    inherited [HAS_IOMEM && DRM]
   }
   config DRM_SIS tristate {
    prompt "SiS video cards" if [HAS_IOMEM && DRM && AGP]
    depends on [DRM && AGP]
    inherited [HAS_IOMEM && DRM && AGP]
   }
   config DRM_VIA tristate {
    prompt "Via unichrome video cards" if [HAS_IOMEM && DRM]
    depends on [DRM]
    inherited [HAS_IOMEM && DRM]
   }
   config DRM_SAVAGE tristate {
    prompt "Savage video cards" if [HAS_IOMEM && DRM]
    depends on [DRM]
    inherited [HAS_IOMEM && DRM]
   }
  }
  config VGASTATE tristate {
   default [n] if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  config VIDEO_OUTPUT_CONTROL tristate {
   prompt "Lowlevel video output switch controls" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
  }
  menuconfig FB tristate {
   prompt "Support for frame buffer devices" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config FIRMWARE_EDID boolean {
    prompt "Enable firmware EDID" if [HAS_IOMEM && FB]
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_DDC tristate {
    depends on [FB]
    select I2C_ALGOBIT if [HAS_IOMEM && FB]
    select I2C if [HAS_IOMEM && FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_FILLRECT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_COPYAREA tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_IMAGEBLIT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CFB_REV_PIXELS_IN_BYTE boolean {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SYS_FILLRECT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SYS_COPYAREA tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SYS_IMAGEBLIT tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SYS_FOPS tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_DEFERRED_IO boolean {
    depends on [FB]
    default [y] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_SVGALIB tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_MACMODES tristate {
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_BACKLIGHT boolean {
    depends on [FB]
    select BACKLIGHT_LCD_SUPPORT if [HAS_IOMEM && FB]
    select BACKLIGHT_CLASS_DEVICE if [HAS_IOMEM && FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_MODE_HELPERS boolean {
    prompt "Enable Video Mode Handling Helpers" if [HAS_IOMEM && FB]
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_TILEBLITTING boolean {
    prompt "Enable Tile Blitting Support" if [HAS_IOMEM && FB]
    depends on [FB]
    default [n] if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_CIRRUS tristate {
    prompt "Cirrus Logic support" if [HAS_IOMEM && FB && (ZORRO || PCI)]
    depends on [FB && (ZORRO || PCI)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (ZORRO || PCI)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (ZORRO || PCI)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (ZORRO || PCI)]
    inherited [HAS_IOMEM && FB && (ZORRO || PCI)]
   }
   config FB_PM2 tristate {
    prompt "Permedia2 support" if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    depends on [FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    inherited [HAS_IOMEM && FB && (AMIGA && BROKEN || PCI)]
    config FB_PM2_FIFO_DISCONNECT boolean {
     prompt "enable FIFO disconnect feature" if [HAS_IOMEM && FB_PM2 && PCI]
     depends on [FB_PM2 && PCI]
     inherited [HAS_IOMEM && FB_PM2 && PCI]
    }
   }
   config FB_ARMCLCD tristate {
    prompt "ARM PrimeCell PL110 support" if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    depends on [FB && ARM && ARM_AMBA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARM && ARM_AMBA]
    inherited [HAS_IOMEM && FB && ARM && ARM_AMBA]
    choice boolean {
     depends on [FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     prompt "LCD Panel" if [HAS_IOMEM && FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     default [FB_ARMCLCD_SHARP_LQ035Q7DB02] if [HAS_IOMEM && FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X)]
     config FB_ARMCLCD_SHARP_LQ035Q7DB02_HRTFT boolean {
      prompt "LogicPD LCD 3.5\" QVGA w/HRTFT IC" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ057Q3DC02 boolean {
      prompt "LogicPD LCD 5.7\" QVGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ64D343 boolean {
      prompt "LogicPD LCD 6.4\" VGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ10D368 boolean {
      prompt "LogicPD LCD 10.4\" VGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_SHARP_LQ121S1DG41 boolean {
      prompt "LogicPD LCD 12.1\" SVGA" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_AUO_A070VW01_WIDE boolean {
      prompt "AU Optronics A070VW01 LCD 7.0\" WIDE" if [<choice>]
      inherited [<choice>]
     }
     config FB_ARMCLCD_HITACHI boolean {
      prompt "Hitachi Wide Screen 800x480" if [<choice>]
      inherited [<choice>]
     }
    }
   }
   config FB_ACORN boolean {
    prompt "Acorn VIDC support" if [HAS_IOMEM && FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    depends on [FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
    inherited [HAS_IOMEM && FB="y" && ARM && (ARCH_ACORN || ARCH_CLPS7500)]
   }
   config FB_CLPS711X boolean {
    prompt "CLPS711X LCD support" if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    depends on [FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
    inherited [HAS_IOMEM && FB="y" && ARM && ARCH_CLPS711X]
   }
   config FB_SA1100 boolean {
    prompt "SA-1100 LCD support" if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    depends on [FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
    inherited [HAS_IOMEM && FB="y" && ARM && ARCH_SA1100]
   }
   config FB_IMX tristate {
    prompt "Motorola i.MX LCD support" if [HAS_IOMEM && FB && ARM && ARCH_IMX]
    depends on [FB && ARM && ARCH_IMX]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARM && ARCH_IMX]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARM && ARCH_IMX]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARM && ARCH_IMX]
    inherited [HAS_IOMEM && FB && ARM && ARCH_IMX]
   }
   config FB_CYBER2000 tristate {
    prompt "CyberPro 2000/2010/5000 support" if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    depends on [FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
    inherited [HAS_IOMEM && FB && PCI && (BROKEN || !SPARC64)]
   }
   config FB_APOLLO boolean {
    depends on [FB="y" && APOLLO]
    default [y] if [HAS_IOMEM && FB="y" && APOLLO]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && APOLLO]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && APOLLO]
    inherited [HAS_IOMEM && FB="y" && APOLLO]
   }
   config FB_Q40 boolean {
    depends on [FB="y" && Q40]
    default [y] if [HAS_IOMEM && FB="y" && Q40]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && Q40]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && Q40]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && Q40]
    inherited [HAS_IOMEM && FB="y" && Q40]
   }
   config FB_AMIGA tristate {
    prompt "Amiga native chipset support" if [HAS_IOMEM && FB && AMIGA]
    depends on [FB && AMIGA]
    inherited [HAS_IOMEM && FB && AMIGA]
    config FB_AMIGA_OCS boolean {
     prompt "Amiga OCS chipset support" if [HAS_IOMEM && FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [HAS_IOMEM && FB_AMIGA]
    }
    config FB_AMIGA_ECS boolean {
     prompt "Amiga ECS chipset support" if [HAS_IOMEM && FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [HAS_IOMEM && FB_AMIGA]
    }
    config FB_AMIGA_AGA boolean {
     prompt "Amiga AGA chipset support" if [HAS_IOMEM && FB_AMIGA]
     depends on [FB_AMIGA]
     inherited [HAS_IOMEM && FB_AMIGA]
    }
   }
   config FB_FM2 boolean {
    prompt "Amiga FrameMaster II/Rainbow II support" if [HAS_IOMEM && FB="y" && ZORRO]
    depends on [FB="y" && ZORRO]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ZORRO]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ZORRO]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ZORRO]
    inherited [HAS_IOMEM && FB="y" && ZORRO]
   }
   config FB_ARC tristate {
    prompt "Arc Monochrome LCD board support" if [HAS_IOMEM && FB && X86]
    depends on [FB && X86]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && X86]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && X86]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && X86]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && X86]
    inherited [HAS_IOMEM && FB && X86]
   }
   config FB_ATARI boolean {
    prompt "Atari native chipset support" if [HAS_IOMEM && FB="y" && ATARI]
    depends on [FB="y" && ATARI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ATARI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ATARI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ATARI]
    inherited [HAS_IOMEM && FB="y" && ATARI]
   }
   config FB_OF boolean {
    prompt "Open Firmware frame buffer device support" if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    depends on [FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
    inherited [HAS_IOMEM && FB="y" && (PPC64 || PPC_OF) && (!PPC_PSERIES || PCI)]
   }
   config FB_CONTROL boolean {
    prompt "Apple \"control\" display support" if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    depends on [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    inherited [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
   }
   config FB_PLATINUM boolean {
    prompt "Apple \"platinum\" display support" if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    depends on [FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
    inherited [HAS_IOMEM && FB="y" && PPC_PMAC && PPC32]
   }
   config FB_VALKYRIE boolean {
    prompt "Apple \"valkyrie\" display support" if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    depends on [FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
    inherited [HAS_IOMEM && FB="y" && (MAC || PPC_PMAC && PPC32)]
   }
   config FB_CT65550 boolean {
    prompt "Chips 65550 display support" if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    depends on [FB="y" && PPC32 && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PPC32 && PCI]
    inherited [HAS_IOMEM && FB="y" && PPC32 && PCI]
   }
   config FB_ASILIANT boolean {
    prompt "Asiliant (Chips) 69000 display support" if [HAS_IOMEM && FB="y" && PCI]
    depends on [FB="y" && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI]
    inherited [HAS_IOMEM && FB="y" && PCI]
   }
   config FB_IMSTT boolean {
    prompt "IMS Twin Turbo display support" if [HAS_IOMEM && FB="y" && PCI]
    depends on [FB="y" && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && PCI && PPC]
    inherited [HAS_IOMEM && FB="y" && PCI]
   }
   config FB_VGA16 tristate {
    prompt "VGA 16-color graphics support" if [HAS_IOMEM && FB && (X86 || PPC)]
    depends on [FB && (X86 || PPC)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (X86 || PPC)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (X86 || PPC)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (X86 || PPC)]
    select VGASTATE if [HAS_IOMEM && FB && (X86 || PPC)]
    select FONT_8x16 if [HAS_IOMEM && FB && (X86 || PPC) && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && (X86 || PPC)]
   }
   config FB_BF54X_LQ043 tristate {
    prompt "SHARP LQ043 TFT LCD (BF548 EZKIT)" if [HAS_IOMEM && FB && BF54x]
    depends on [FB && BF54x]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && BF54x]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && BF54x]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && BF54x]
    inherited [HAS_IOMEM && FB && BF54x]
   }
   config FB_STI tristate {
    prompt "HP STI frame buffer device support" if [HAS_IOMEM && FB && PARISC]
    depends on [FB && PARISC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PARISC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PARISC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PARISC]
    default [y] if [HAS_IOMEM && FB && PARISC]
    inherited [HAS_IOMEM && FB && PARISC]
   }
   config FB_MAC boolean {
    prompt "Generic Macintosh display support" if [HAS_IOMEM && FB="y" && MAC]
    depends on [FB="y" && MAC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MAC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MAC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MAC]
    select FB_MACMODES if [HAS_IOMEM && FB="y" && MAC]
    inherited [HAS_IOMEM && FB="y" && MAC]
   }
   config FB_HP300 boolean {
    depends on [FB="y" && HP300]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && HP300]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && HP300]
    default [y] if [HAS_IOMEM && FB="y" && HP300]
    inherited [HAS_IOMEM && FB="y" && HP300]
   }
   config FB_TGA tristate {
    prompt "TGA/SFB+ framebuffer support" if [HAS_IOMEM && FB && (ALPHA || TC)]
    depends on [FB && (ALPHA || TC)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (ALPHA || TC)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (ALPHA || TC)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (ALPHA || TC)]
    select BITREVERSE if [HAS_IOMEM && FB && (ALPHA || TC)]
    inherited [HAS_IOMEM && FB && (ALPHA || TC)]
   }
   config FB_UVESA tristate {
    prompt "Userspace VESA VGA graphics support" if [HAS_IOMEM && FB && CONNECTOR]
    depends on [FB && CONNECTOR]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && CONNECTOR]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && CONNECTOR]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && CONNECTOR]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && CONNECTOR]
    inherited [HAS_IOMEM && FB && CONNECTOR]
   }
   config FB_VESA boolean {
    prompt "VESA VGA graphics support" if [HAS_IOMEM && FB="y" && X86]
    depends on [FB="y" && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && X86]
    select VIDEO_SELECT if [HAS_IOMEM && FB="y" && X86]
    inherited [HAS_IOMEM && FB="y" && X86]
   }
   config FB_EFI boolean {
    prompt "EFI-based Framebuffer Support" if [HAS_IOMEM && FB="y" && X86]
    depends on [FB="y" && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && X86]
    inherited [HAS_IOMEM && FB="y" && X86]
   }
   config FB_IMAC boolean {
    prompt "Intel-based Macintosh Framebuffer Support" if [HAS_IOMEM && FB="y" && X86 && EFI]
    depends on [FB="y" && X86 && EFI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && X86 && EFI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && X86 && EFI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && X86 && EFI]
    inherited [HAS_IOMEM && FB="y" && X86 && EFI]
   }
   config FB_HECUBA tristate {
    prompt "Hecuba board support" if [HAS_IOMEM && FB && X86 && MMU]
    depends on [FB && X86 && MMU]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && X86 && MMU]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && X86 && MMU]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && X86 && MMU]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && X86 && MMU]
    select FB_DEFERRED_IO if [HAS_IOMEM && FB && X86 && MMU]
    inherited [HAS_IOMEM && FB && X86 && MMU]
   }
   config FB_HGA tristate {
    prompt "Hercules mono graphics support" if [HAS_IOMEM && FB && X86]
    depends on [FB && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && X86]
    inherited [HAS_IOMEM && FB && X86]
    config FB_HGA_ACCEL boolean {
     prompt "Hercules mono Acceleration functions (EXPERIMENTAL)" if [HAS_IOMEM && FB_HGA && EXPERIMENTAL]
     depends on [FB_HGA && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB_HGA && EXPERIMENTAL]
    }
   }
   config FB_SGIVW tristate {
    prompt "SGI Visual Workstation framebuffer support" if [HAS_IOMEM && FB && X86_VISWS]
    depends on [FB && X86_VISWS]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && X86_VISWS]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && X86_VISWS]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && X86_VISWS]
    inherited [HAS_IOMEM && FB && X86_VISWS]
   }
   config FB_GBE boolean {
    prompt "SGI Graphics Backend frame buffer support" if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    depends on [FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    inherited [HAS_IOMEM && FB="y" && (SGI_IP32 || X86_VISWS)]
    config FB_GBE_MEM integer {
     prompt "Video memory size in MB" if [HAS_IOMEM && FB_GBE]
     depends on [FB_GBE]
     default [4] if [HAS_IOMEM && FB_GBE]
     inherited [HAS_IOMEM && FB_GBE]
    }
   }
   config FB_SBUS boolean {
    prompt "SBUS and UPA framebuffers" if [HAS_IOMEM && FB="y" && SPARC]
    depends on [FB="y" && SPARC]
    inherited [HAS_IOMEM && FB="y" && SPARC]
    config FB_BW2 boolean {
     prompt "BWtwo support" if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     depends on [FB="y" && SPARC && FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     inherited [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
    }
    config FB_CG3 boolean {
     prompt "CGthree support" if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     depends on [FB="y" && SPARC && FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     inherited [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
    }
    config FB_CG6 boolean {
     prompt "CGsix (GX,TurboGX) support" if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     depends on [FB="y" && SPARC && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
     inherited [HAS_IOMEM && FB="y" && SPARC && FB_SBUS]
    }
    config FB_FFB boolean {
     prompt "Creator/Creator3D/Elite3D support" if [HAS_IOMEM && FB_SBUS && SPARC64]
     depends on [FB_SBUS && SPARC64]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS && SPARC64]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS && SPARC64]
     inherited [HAS_IOMEM && FB_SBUS && SPARC64]
    }
    config FB_TCX boolean {
     prompt "TCX (SS4/SS5 only) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
    config FB_CG14 boolean {
     prompt "CGfourteen (SX) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
    config FB_P9100 boolean {
     prompt "P9100 (Sparcbook 3 only) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
    config FB_LEO boolean {
     prompt "Leo (ZX) support" if [HAS_IOMEM && FB_SBUS]
     depends on [FB_SBUS]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_SBUS]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_SBUS]
     inherited [HAS_IOMEM && FB_SBUS]
    }
   }
   config FB_IGA boolean {
    prompt "IGA 168x display support" if [HAS_IOMEM && FB="y" && SPARC32]
    depends on [FB="y" && SPARC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && SPARC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && SPARC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && SPARC32]
    inherited [HAS_IOMEM && FB="y" && SPARC32]
   }
   config FB_XVR500 boolean {
    prompt "Sun XVR-500 3DLABS Wildcat support" if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    depends on [FB="y" && PCI && SPARC64]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    inherited [HAS_IOMEM && FB="y" && PCI && SPARC64]
   }
   config FB_XVR2500 boolean {
    prompt "Sun XVR-2500 3DLABS Wildcat support" if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    depends on [FB="y" && PCI && SPARC64]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && PCI && SPARC64]
    inherited [HAS_IOMEM && FB="y" && PCI && SPARC64]
   }
   config FB_PVR2 tristate {
    prompt "NEC PowerVR 2 display support" if [HAS_IOMEM && FB && SH_DREAMCAST]
    depends on [FB && SH_DREAMCAST]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && SH_DREAMCAST]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && SH_DREAMCAST]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && SH_DREAMCAST]
    inherited [HAS_IOMEM && FB && SH_DREAMCAST]
   }
   config FB_EPSON1355 boolean {
    prompt "Epson 1355 framebuffer support" if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    depends on [FB="y" && ARCH_CEIVA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && ARCH_CEIVA]
    inherited [HAS_IOMEM && FB="y" && ARCH_CEIVA]
   }
   config FB_S1D13XXX tristate {
    prompt "Epson S1D13XXX framebuffer support" if [HAS_IOMEM && FB]
    depends on [FB]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_ATMEL tristate {
    prompt "AT91/AT32 LCD Controller support" if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9263 || AVR32)]
    depends on [FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9263 || AVR32)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9263 || AVR32)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9263 || AVR32)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9263 || AVR32)]
    inherited [HAS_IOMEM && FB && (ARCH_AT91SAM9261 || ARCH_AT91SAM9263 || AVR32)]
    config FB_INTSRAM boolean {
     prompt "Frame Buffer in internal SRAM" if [HAS_IOMEM && FB_ATMEL && ARCH_AT91SAM9261]
     depends on [FB_ATMEL && ARCH_AT91SAM9261]
     inherited [HAS_IOMEM && FB_ATMEL && ARCH_AT91SAM9261]
    }
    config FB_ATMEL_STN boolean {
     prompt "Use a STN display with AT91/AT32 LCD Controller" if [HAS_IOMEM && FB_ATMEL && MACH_AT91SAM9261EK]
     depends on [FB_ATMEL && MACH_AT91SAM9261EK]
     default [n] if [HAS_IOMEM && FB_ATMEL && MACH_AT91SAM9261EK]
     inherited [HAS_IOMEM && FB_ATMEL && MACH_AT91SAM9261EK]
    }
   }
   config FB_NVIDIA tristate {
    prompt "nVidia Framebuffer Support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_NVIDIA_BACKLIGHT]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select BITREVERSE if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_NVIDIA_I2C boolean {
     prompt "Enable DDC Support" if [HAS_IOMEM && FB_NVIDIA]
     depends on [FB_NVIDIA]
     select FB_DDC if [HAS_IOMEM && FB_NVIDIA]
     inherited [HAS_IOMEM && FB_NVIDIA]
    }
    config FB_NVIDIA_DEBUG boolean {
     prompt "Lots of debug output" if [HAS_IOMEM && FB_NVIDIA]
     depends on [FB_NVIDIA]
     default [n] if [HAS_IOMEM && FB_NVIDIA]
     inherited [HAS_IOMEM && FB_NVIDIA]
    }
    config FB_NVIDIA_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_NVIDIA]
     depends on [FB_NVIDIA]
     default [y] if [HAS_IOMEM && FB_NVIDIA]
     inherited [HAS_IOMEM && FB_NVIDIA]
    }
   }
   config FB_RIVA tristate {
    prompt "nVidia Riva support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_RIVA_BACKLIGHT]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select BITREVERSE if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_RIVA_I2C boolean {
     prompt "Enable DDC Support" if [HAS_IOMEM && FB_RIVA]
     depends on [FB_RIVA]
     select FB_DDC if [HAS_IOMEM && FB_RIVA]
     inherited [HAS_IOMEM && FB_RIVA]
    }
    config FB_RIVA_DEBUG boolean {
     prompt "Lots of debug output" if [HAS_IOMEM && FB_RIVA]
     depends on [FB_RIVA]
     default [n] if [HAS_IOMEM && FB_RIVA]
     inherited [HAS_IOMEM && FB_RIVA]
    }
    config FB_RIVA_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_RIVA]
     depends on [FB_RIVA]
     default [y] if [HAS_IOMEM && FB_RIVA]
     inherited [HAS_IOMEM && FB_RIVA]
    }
   }
   config FB_I810 tristate {
    prompt "Intel 810/815 support (EXPERIMENTAL)" if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    depends on [FB && EXPERIMENTAL && PCI && X86_32]
    select AGP if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    select AGP_INTEL if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    select VGASTATE if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    inherited [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86_32]
    config FB_I810_GTF boolean {
     prompt "use VESA Generalized Timing Formula" if [HAS_IOMEM && FB_I810]
     depends on [FB_I810]
     inherited [HAS_IOMEM && FB_I810]
     config FB_I810_I2C boolean {
      prompt "Enable DDC Support" if [HAS_IOMEM && FB_I810 && FB_I810_GTF]
      depends on [FB_I810 && FB_I810_GTF]
      select FB_DDC if [HAS_IOMEM && FB_I810 && FB_I810_GTF]
      inherited [HAS_IOMEM && FB_I810 && FB_I810_GTF]
     }
    }
   }
   config FB_LE80578 tristate {
    prompt "Intel LE80578 (Vermilion) support" if [HAS_IOMEM && FB && PCI && X86]
    depends on [FB && PCI && X86]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && X86]
    inherited [HAS_IOMEM && FB && PCI && X86]
    config FB_CARILLO_RANCH tristate {
     prompt "Intel Carillo Ranch support" if [HAS_IOMEM && FB_LE80578 && FB && PCI && X86]
     depends on [FB_LE80578 && FB && PCI && X86]
     inherited [HAS_IOMEM && FB_LE80578 && FB && PCI && X86]
    }
   }
   config FB_INTEL tristate {
    prompt "Intel 830M/845G/852GM/855GM/865G/915G/945G support (EXPERIMENTAL)" if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    depends on [FB && EXPERIMENTAL && PCI && X86]
    select AGP if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    select AGP_INTEL if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    inherited [HAS_IOMEM && FB && EXPERIMENTAL && PCI && X86]
    config FB_INTEL_DEBUG boolean {
     prompt "Intel driver Debug Messages" if [HAS_IOMEM && FB_INTEL]
     depends on [FB_INTEL]
     inherited [HAS_IOMEM && FB_INTEL]
    }
    config FB_INTEL_I2C boolean {
     prompt "DDC/I2C for Intel framebuffer support" if [HAS_IOMEM && FB_INTEL]
     depends on [FB_INTEL]
     select FB_DDC if [HAS_IOMEM && FB_INTEL]
     default [y] if [HAS_IOMEM && FB_INTEL]
     inherited [HAS_IOMEM && FB_INTEL]
    }
   }
   config FB_MATROX tristate {
    prompt "Matrox acceleration" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_MACMODES if [HAS_IOMEM && FB && PCI && PPC_PMAC]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_MATROX_MILLENIUM boolean {
     prompt "Millennium I/II support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
    }
    config FB_MATROX_MYSTIQUE boolean {
     prompt "Mystique support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
    }
    config FB_MATROX_G boolean {
     prompt "G100/G200/G400/G450/G550 support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
    }
    config FB_MATROX_I2C tristate {
     prompt "Matrox I2C support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     select FB_DDC if [HAS_IOMEM && FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
     config FB_MATROX_MAVEN tristate {
      prompt "G400 second head support" if [HAS_IOMEM && FB_MATROX_G && FB_MATROX_I2C]
      depends on [FB_MATROX_G && FB_MATROX_I2C]
      inherited [HAS_IOMEM && FB_MATROX_G && FB_MATROX_I2C]
     }
    }
    config FB_MATROX_MULTIHEAD boolean {
     prompt "Multihead support" if [HAS_IOMEM && FB_MATROX]
     depends on [FB_MATROX]
     inherited [HAS_IOMEM && FB_MATROX]
    }
   }
   config FB_RADEON tristate {
    prompt "ATI Radeon display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_RADEON_BACKLIGHT]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_MACMODES if [HAS_IOMEM && FB && PCI && PPC_OF]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_RADEON_I2C boolean {
     prompt "DDC/I2C for ATI Radeon support" if [HAS_IOMEM && FB_RADEON]
     depends on [FB_RADEON]
     select FB_DDC if [HAS_IOMEM && FB_RADEON]
     default [y] if [HAS_IOMEM && FB_RADEON]
     inherited [HAS_IOMEM && FB_RADEON]
    }
    config FB_RADEON_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_RADEON]
     depends on [FB_RADEON]
     default [y] if [HAS_IOMEM && FB_RADEON]
     inherited [HAS_IOMEM && FB_RADEON]
    }
    config FB_RADEON_DEBUG boolean {
     prompt "Lots of debug output from Radeon driver" if [HAS_IOMEM && FB_RADEON]
     depends on [FB_RADEON]
     default [n] if [HAS_IOMEM && FB_RADEON]
     inherited [HAS_IOMEM && FB_RADEON]
    }
   }
   config FB_ATY128 tristate {
    prompt "ATI Rage128 display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && PCI && FB_ATY128_BACKLIGHT]
    select FB_MACMODES if [HAS_IOMEM && FB && PCI && PPC_PMAC]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_ATY128_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_ATY128]
     depends on [FB_ATY128]
     default [y] if [HAS_IOMEM && FB_ATY128]
     inherited [HAS_IOMEM && FB_ATY128]
    }
   }
   config FB_ATY tristate {
    prompt "ATI Mach64 display support" if [HAS_IOMEM && FB && !SPARC32 && (PCI || ATARI)]
    depends on [FB && !SPARC32]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && !SPARC32]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && !SPARC32]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && !SPARC32]
    select FB_BACKLIGHT if [HAS_IOMEM && FB && !SPARC32 && FB_ATY_BACKLIGHT]
    select FB_MACMODES if [HAS_IOMEM && FB && !SPARC32 && PPC]
    inherited [HAS_IOMEM && FB && !SPARC32]
    config FB_ATY_CT boolean {
     prompt "Mach64 CT/VT/GT/LT (incl. 3D RAGE) support" if [HAS_IOMEM && PCI && FB_ATY]
     depends on [PCI && FB_ATY]
     default [y] if [HAS_IOMEM && FB_ATY && SPARC64 && PCI]
     inherited [HAS_IOMEM && PCI && FB_ATY]
     config FB_ATY_GENERIC_LCD boolean {
      prompt "Mach64 generic LCD support (EXPERIMENTAL)" if [HAS_IOMEM && FB_ATY_CT]
      depends on [FB_ATY_CT]
      inherited [HAS_IOMEM && FB_ATY_CT]
     }
    }
    config FB_ATY_GX boolean {
     prompt "Mach64 GX support" if [HAS_IOMEM && FB_ATY && PCI]
     depends on [FB_ATY]
     default [y] if [HAS_IOMEM && FB_ATY && ATARI]
     inherited [HAS_IOMEM && FB_ATY]
    }
    config FB_ATY_BACKLIGHT boolean {
     prompt "Support for backlight control" if [HAS_IOMEM && FB_ATY]
     depends on [FB_ATY]
     default [y] if [HAS_IOMEM && FB_ATY]
     inherited [HAS_IOMEM && FB_ATY]
    }
   }
   config FB_S3 tristate {
    prompt "S3 Trio/Virge support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_SVGALIB if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    select FONT_8x16 if [HAS_IOMEM && FB && PCI && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_SAVAGE tristate {
    prompt "S3 Savage support" if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    depends on [FB && PCI && EXPERIMENTAL]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select VGASTATE if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    inherited [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    config FB_SAVAGE_I2C boolean {
     prompt "Enable DDC2 Support" if [HAS_IOMEM && FB_SAVAGE]
     depends on [FB_SAVAGE]
     select FB_DDC if [HAS_IOMEM && FB_SAVAGE]
     inherited [HAS_IOMEM && FB_SAVAGE]
    }
    config FB_SAVAGE_ACCEL boolean {
     prompt "Enable Console Acceleration" if [HAS_IOMEM && FB_SAVAGE]
     depends on [FB_SAVAGE]
     default [n] if [HAS_IOMEM && FB_SAVAGE]
     inherited [HAS_IOMEM && FB_SAVAGE]
    }
   }
   config FB_SIS tristate {
    prompt "SiS/XGI display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_SIS_300 boolean {
     prompt "SiS 300 series support" if [HAS_IOMEM && FB_SIS]
     depends on [FB_SIS]
     inherited [HAS_IOMEM && FB_SIS]
    }
    config FB_SIS_315 boolean {
     prompt "SiS 315/330/340 series and XGI support" if [HAS_IOMEM && FB_SIS]
     depends on [FB_SIS]
     inherited [HAS_IOMEM && FB_SIS]
    }
   }
   config FB_NEOMAGIC tristate {
    prompt "NeoMagic display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_MODE_HELPERS if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_KYRO tristate {
    prompt "IMG Kyro support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_3DFX tristate {
    prompt "3Dfx Banshee/Voodoo3 display support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_3DFX_ACCEL boolean {
     prompt "3Dfx Banshee/Voodoo3 Acceleration functions (EXPERIMENTAL)" if [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
     depends on [FB_3DFX && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB_3DFX && EXPERIMENTAL]
    }
   }
   config FB_VOODOO1 tristate {
    prompt "3Dfx Voodoo Graphics (sst1) support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_VT8623 tristate {
    prompt "VIA VT8623 support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_SVGALIB if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    select FONT_8x16 if [HAS_IOMEM && FB && PCI && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_CYBLA tristate {
    prompt "Cyberblade/i1 support" if [HAS_IOMEM && FB && PCI && X86_32 && !64BIT]
    depends on [FB && PCI && X86_32 && !64BIT]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && X86_32 && !64BIT]
    select VIDEO_SELECT if [HAS_IOMEM && FB && PCI && X86_32 && !64BIT]
    inherited [HAS_IOMEM && FB && PCI && X86_32 && !64BIT]
   }
   config FB_TRIDENT tristate {
    prompt "Trident support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    inherited [HAS_IOMEM && FB && PCI]
    config FB_TRIDENT_ACCEL boolean {
     prompt "Trident Acceleration functions (EXPERIMENTAL)" if [HAS_IOMEM && FB_TRIDENT && EXPERIMENTAL]
     depends on [FB_TRIDENT && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB_TRIDENT && EXPERIMENTAL]
    }
   }
   config FB_ARK tristate {
    prompt "ARK 2000PV support" if [HAS_IOMEM && FB && PCI]
    depends on [FB && PCI]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI]
    select FB_TILEBLITTING if [HAS_IOMEM && FB && PCI]
    select FB_SVGALIB if [HAS_IOMEM && FB && PCI]
    select VGASTATE if [HAS_IOMEM && FB && PCI]
    select FONT_8x16 if [HAS_IOMEM && FB && PCI && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PCI]
   }
   config FB_PM3 tristate {
    prompt "Permedia3 support (EXPERIMENTAL)" if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    depends on [FB && PCI && EXPERIMENTAL]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
    inherited [HAS_IOMEM && FB && PCI && EXPERIMENTAL]
   }
   config FB_AU1100 boolean {
    prompt "Au1100 LCD Driver" if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    depends on [FB="y" && MIPS && SOC_AU1100]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
    inherited [HAS_IOMEM && FB="y" && MIPS && SOC_AU1100]
   }
   config FB_AU1200 boolean {
    prompt "Au1200 LCD Driver" if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    depends on [FB="y" && MIPS && SOC_AU1200]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
    inherited [HAS_IOMEM && FB="y" && MIPS && SOC_AU1200]
   }
   config FB_GEODE boolean {
    prompt "AMD Geode family framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && PCI && EXPERIMENTAL && X86]
    depends on [FB && PCI && EXPERIMENTAL && X86]
    inherited [HAS_IOMEM && FB && PCI && EXPERIMENTAL && X86]
    config FB_GEODE_LX tristate {
     prompt "AMD Geode LX framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && FB_GEODE]
     depends on [FB && FB_GEODE]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB && FB_GEODE]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB && FB_GEODE]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && FB_GEODE]
     inherited [HAS_IOMEM && FB && FB_GEODE]
    }
    config FB_GEODE_GX tristate {
     prompt "AMD Geode GX framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     depends on [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     config FB_GEODE_GX_SET_FBSIZE boolean {
      prompt "Manually specify the Geode GX framebuffer size" if [HAS_IOMEM && FB_GEODE_GX]
      depends on [FB_GEODE_GX]
      default [n] if [HAS_IOMEM && FB_GEODE_GX]
      inherited [HAS_IOMEM && FB_GEODE_GX]
      config FB_GEODE_GX_FBSIZE hex {
       prompt "Size of the GX framebuffer, in bytes" if [HAS_IOMEM && FB_GEODE_GX_SET_FBSIZE]
       depends on [FB_GEODE_GX_SET_FBSIZE]
       default [0x1600000] if [HAS_IOMEM && FB_GEODE_GX_SET_FBSIZE]
       inherited [HAS_IOMEM && FB_GEODE_GX_SET_FBSIZE]
      }
     }
    }
    config FB_GEODE_GX1 tristate {
     prompt "AMD Geode GX1 framebuffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     depends on [FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
     inherited [HAS_IOMEM && FB && FB_GEODE && EXPERIMENTAL]
    }
   }
   config FB_HIT tristate {
    prompt "HD64461 Frame Buffer support" if [HAS_IOMEM && FB && HD64461]
    depends on [FB && HD64461]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && HD64461]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && HD64461]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && HD64461]
    inherited [HAS_IOMEM && FB && HD64461]
   }
   config FB_PMAG_AA boolean {
    prompt "PMAG-AA TURBOchannel framebuffer support" if [HAS_IOMEM && FB="y" && TC]
    depends on [FB="y" && TC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && TC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && TC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && TC]
    inherited [HAS_IOMEM && FB="y" && TC]
   }
   config FB_PMAG_BA tristate {
    prompt "PMAG-BA TURBOchannel framebuffer support" if [HAS_IOMEM && FB && TC]
    depends on [FB && TC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && TC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && TC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && TC]
    inherited [HAS_IOMEM && FB && TC]
   }
   config FB_PMAGB_B tristate {
    prompt "PMAGB-B TURBOchannel framebuffer support" if [HAS_IOMEM && FB && TC]
    depends on [FB && TC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && TC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && TC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && TC]
    inherited [HAS_IOMEM && FB && TC]
   }
   config FB_MAXINE boolean {
    prompt "Maxine (Personal DECstation) onboard framebuffer support" if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    depends on [FB="y" && MACH_DECSTATION]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && MACH_DECSTATION]
    inherited [HAS_IOMEM && FB="y" && MACH_DECSTATION]
   }
   config FB_G364 boolean {
    prompt "G364 frame buffer support" if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    depends on [FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
    inherited [HAS_IOMEM && FB="y" && (MIPS_MAGNUM_4000 || OLIVETTI_M700)]
   }
   config FB_68328 boolean {
    prompt "Motorola 68328 native frame buffer support" if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    depends on [FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
    inherited [HAS_IOMEM && FB="y" && (M68328 || M68EZ328 || M68VZ328)]
   }
   config FB_PXA tristate {
    prompt "PXA LCD framebuffer support" if [HAS_IOMEM && FB && ARCH_PXA]
    depends on [FB && ARCH_PXA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_PXA]
    inherited [HAS_IOMEM && FB && ARCH_PXA]
    config FB_PXA_PARAMETERS boolean {
     prompt "PXA LCD command line parameters" if [HAS_IOMEM && FB_PXA]
     default [n] if [HAS_IOMEM && FB_PXA]
     depends on [FB_PXA]
     inherited [HAS_IOMEM && FB_PXA]
    }
   }
   config FB_MBX tristate {
    prompt "2700G LCD framebuffer support" if [HAS_IOMEM && FB && ARCH_PXA]
    depends on [FB && ARCH_PXA]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_PXA]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_PXA]
    inherited [HAS_IOMEM && FB && ARCH_PXA]
    config FB_MBX_DEBUG boolean {
     prompt "Enable debugging info via debugfs" if [HAS_IOMEM && FB_MBX && DEBUG_FS]
     depends on [FB_MBX && DEBUG_FS]
     default [n] if [HAS_IOMEM && FB_MBX && DEBUG_FS]
     inherited [HAS_IOMEM && FB_MBX && DEBUG_FS]
    }
   }
   config FB_W100 tristate {
    prompt "W100 frame buffer support" if [HAS_IOMEM && FB && PXA_SHARPSL]
    depends on [FB && PXA_SHARPSL]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PXA_SHARPSL]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PXA_SHARPSL]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PXA_SHARPSL]
    inherited [HAS_IOMEM && FB && PXA_SHARPSL]
   }
   config FB_S3C2410 tristate {
    prompt "S3C2410 LCD framebuffer support" if [HAS_IOMEM && FB && ARCH_S3C2410]
    depends on [FB && ARCH_S3C2410]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_S3C2410]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_S3C2410]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_S3C2410]
    inherited [HAS_IOMEM && FB && ARCH_S3C2410]
    config FB_S3C2410_DEBUG boolean {
     prompt "S3C2410 lcd debug messages" if [HAS_IOMEM && FB_S3C2410]
     depends on [FB_S3C2410]
     inherited [HAS_IOMEM && FB_S3C2410]
    }
   }
   config FB_SM501 tristate {
    prompt "Silicon Motion SM501 framebuffer support" if [HAS_IOMEM && FB && MFD_SM501]
    depends on [FB && MFD_SM501]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && MFD_SM501]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && MFD_SM501]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && MFD_SM501]
    inherited [HAS_IOMEM && FB && MFD_SM501]
   }
   config FB_PNX4008_DUM tristate {
    prompt "Display Update Module support on Philips PNX4008 board" if [HAS_IOMEM && FB && ARCH_PNX4008]
    depends on [FB && ARCH_PNX4008]
    inherited [HAS_IOMEM && FB && ARCH_PNX4008]
    config FB_PNX4008_DUM_RGB tristate {
     prompt "RGB Framebuffer support on Philips PNX4008 board" if [HAS_IOMEM && FB_PNX4008_DUM]
     depends on [FB_PNX4008_DUM]
     select FB_CFB_FILLRECT if [HAS_IOMEM && FB_PNX4008_DUM]
     select FB_CFB_COPYAREA if [HAS_IOMEM && FB_PNX4008_DUM]
     select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB_PNX4008_DUM]
     inherited [HAS_IOMEM && FB_PNX4008_DUM]
    }
   }
   config FB_IBM_GXT4500 tristate {
    prompt "Framebuffer support for IBM GXT4500P adaptor" if [HAS_IOMEM && FB && PPC]
    depends on [FB && PPC]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && PPC]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && PPC]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && PPC]
    inherited [HAS_IOMEM && FB && PPC]
   }
   config FB_PS3 tristate {
    prompt "PS3 GPU framebuffer driver" if [HAS_IOMEM && FB && PS3_PS3AV]
    depends on [FB && PS3_PS3AV]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB && PS3_PS3AV]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB && PS3_PS3AV]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB && PS3_PS3AV]
    select FB_SYS_FOPS if [HAS_IOMEM && FB && PS3_PS3AV]
    select VT_HW_CONSOLE_BINDING if [HAS_IOMEM && FB && PS3_PS3AV && FRAMEBUFFER_CONSOLE]
    inherited [HAS_IOMEM && FB && PS3_PS3AV]
    config FB_PS3_DEFAULT_SIZE_M integer {
     prompt "PS3 default frame buffer size (in MiB)" if [HAS_IOMEM && FB_PS3]
     depends on [FB_PS3]
     default [9] if [HAS_IOMEM && FB_PS3]
     inherited [HAS_IOMEM && FB_PS3]
    }
   }
   config FB_XILINX tristate {
    prompt "Xilinx frame buffer support" if [HAS_IOMEM && FB && XILINX_VIRTEX]
    depends on [FB && XILINX_VIRTEX]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && XILINX_VIRTEX]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && XILINX_VIRTEX]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && XILINX_VIRTEX]
    inherited [HAS_IOMEM && FB && XILINX_VIRTEX]
   }
   config FB_VIRTUAL tristate {
    prompt "Virtual Frame Buffer support (ONLY FOR TESTING!)" if [HAS_IOMEM && FB]
    depends on [FB]
    select FB_SYS_FILLRECT if [HAS_IOMEM && FB]
    select FB_SYS_COPYAREA if [HAS_IOMEM && FB]
    select FB_SYS_IMAGEBLIT if [HAS_IOMEM && FB]
    select FB_SYS_FOPS if [HAS_IOMEM && FB]
    inherited [HAS_IOMEM && FB]
   }
   config FB_OMAP tristate {
    prompt "OMAP frame buffer support (EXPERIMENTAL)" if [HAS_IOMEM && FB && ARCH_OMAP]
    depends on [FB && ARCH_OMAP]
    select FB_CFB_FILLRECT if [HAS_IOMEM && FB && ARCH_OMAP]
    select FB_CFB_COPYAREA if [HAS_IOMEM && FB && ARCH_OMAP]
    select FB_CFB_IMAGEBLIT if [HAS_IOMEM && FB && ARCH_OMAP]
    inherited [HAS_IOMEM && FB && ARCH_OMAP]
    config FB_OMAP_BOOTLOADER_INIT boolean {
     prompt "Check bootloader initialization" if [HAS_IOMEM && FB_OMAP]
     depends on [FB_OMAP]
     inherited [HAS_IOMEM && FB_OMAP]
    }
    config FB_OMAP_CONSISTENT_DMA_SIZE integer {
     prompt "Consistent DMA memory size (MB)" if [HAS_IOMEM && FB_OMAP]
     depends on [FB_OMAP]
     range [1 14] if [HAS_IOMEM && FB_OMAP]
     default [2] if [HAS_IOMEM && FB_OMAP]
     inherited [HAS_IOMEM && FB_OMAP]
    }
    config FB_OMAP_DMA_TUNE boolean {
     prompt "Set DMA SDRAM access priority high" if [HAS_IOMEM && FB_OMAP && ARCH_OMAP1]
     depends on [FB_OMAP && ARCH_OMAP1]
     inherited [HAS_IOMEM && FB_OMAP && ARCH_OMAP1]
    }
    config FB_OMAP_LCDC_EXTERNAL boolean {
     prompt "External LCD controller support" if [HAS_IOMEM && FB_OMAP]
     depends on [FB_OMAP]
     inherited [HAS_IOMEM && FB_OMAP]
     config FB_OMAP_LCDC_HWA742 boolean {
      prompt "Epson HWA742 LCD controller support" if [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
      depends on [FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
      inherited [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
     }
     config FB_OMAP_LCDC_BLIZZARD boolean {
      prompt "Epson Blizzard LCD controller support" if [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
      depends on [FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
      inherited [HAS_IOMEM && FB_OMAP && FB_OMAP_LCDC_EXTERNAL]
     }
    }
   }
  }
  menuconfig BACKLIGHT_LCD_SUPPORT boolean {
   prompt "Backlight & LCD device support" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config LCD_CLASS_DEVICE tristate {
    prompt "Lowlevel LCD controls" if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    depends on [BACKLIGHT_LCD_SUPPORT]
    default [m] if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    inherited [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    config LCD_LTV350QV tristate {
     prompt "Samsung LTV350QV LCD Panel" if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
     depends on [LCD_CLASS_DEVICE && SPI_MASTER]
     default [n] if [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
     inherited [HAS_IOMEM && LCD_CLASS_DEVICE && SPI_MASTER]
    }
   }
   config BACKLIGHT_CLASS_DEVICE tristate {
    prompt "Lowlevel Backlight controls" if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    depends on [BACKLIGHT_LCD_SUPPORT]
    default [m] if [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    inherited [HAS_IOMEM && BACKLIGHT_LCD_SUPPORT]
    config BACKLIGHT_CORGI tristate {
     prompt "Generic (aka Sharp Corgi) Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE]
     depends on [BACKLIGHT_CLASS_DEVICE]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE]
    }
    config BACKLIGHT_LOCOMO tristate {
     prompt "Sharp LOCOMO LCD/Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
     depends on [BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO]
    }
    config BACKLIGHT_HP680 tristate {
     prompt "HP Jornada 680 Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
     depends on [BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
     default [y] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && SH_HP6XX]
    }
    config BACKLIGHT_PROGEAR tristate {
     prompt "Frontpath ProGear Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PCI && X86]
     depends on [BACKLIGHT_CLASS_DEVICE && PCI && X86]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PCI && X86]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && PCI && X86]
    }
    config BACKLIGHT_CARILLO_RANCH tristate {
     prompt "Intel Carillo Ranch Backlight Driver" if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
     depends on [BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
     default [n] if [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
     inherited [HAS_IOMEM && BACKLIGHT_CLASS_DEVICE && LCD_CLASS_DEVICE && PCI && X86 && FB_LE80578]
    }
   }
  }
  menu "Display device support" {
   depends on [HAS_IOMEM]
   config DISPLAY_SUPPORT tristate {
    prompt "Display panel/monitor support" if [HAS_IOMEM]
    inherited [HAS_IOMEM]
   }
  }
  if [HAS_IOMEM && VT] {
   menu "Console display driver support" {
    depends on [HAS_IOMEM && VT]
    config VGA_CONSOLE boolean {
     prompt "VGA text console" if [HAS_IOMEM && VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN && (EMBEDDED || !X86)]
     depends on [!ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN]
     default [y] if [HAS_IOMEM && VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN]
     inherited [HAS_IOMEM && VT && !ARCH_ACORN && !ARCH_EBSA110 && !4xx && !8xx && !SPARC && !M68K && !PARISC && !FRV && !ARCH_VERSATILE && !SUPERH && !BLACKFIN]
     config VGACON_SOFT_SCROLLBACK boolean {
      prompt "Enable Scrollback Buffer in System RAM" if [HAS_IOMEM && VT && VGA_CONSOLE]
      depends on [VGA_CONSOLE]
      default [n] if [HAS_IOMEM && VT && VGA_CONSOLE]
      inherited [HAS_IOMEM && VT && VGA_CONSOLE]
      config VGACON_SOFT_SCROLLBACK_SIZE integer {
       prompt "Scrollback Buffer Size (in KB)" if [HAS_IOMEM && VT && VGACON_SOFT_SCROLLBACK]
       depends on [VGACON_SOFT_SCROLLBACK]
       default [64] if [HAS_IOMEM && VT && VGACON_SOFT_SCROLLBACK]
       inherited [HAS_IOMEM && VT && VGACON_SOFT_SCROLLBACK]
      }
     }
     config VIDEO_SELECT boolean {
      prompt "Video mode selection support" if [HAS_IOMEM && VT && X86 && VGA_CONSOLE]
      depends on [X86 && VGA_CONSOLE]
      inherited [HAS_IOMEM && VT && X86 && VGA_CONSOLE]
     }
    }
    config MDA_CONSOLE tristate {
     depends on [!M68K && !PARISC && ISA]
     prompt "MDA text console (dual-headed) (EXPERIMENTAL)" if [HAS_IOMEM && VT && !M68K && !PARISC && ISA]
     inherited [HAS_IOMEM && VT && !M68K && !PARISC && ISA]
    }
    config SGI_NEWPORT_CONSOLE tristate {
     prompt "SGI Newport Console support" if [HAS_IOMEM && VT && SGI_IP22]
     depends on [SGI_IP22]
     inherited [HAS_IOMEM && VT && SGI_IP22]
    }
    config PROM_CONSOLE boolean {
     prompt "PROM console" if [HAS_IOMEM && VT && SPARC]
     depends on [SPARC]
     inherited [HAS_IOMEM && VT && SPARC]
    }
    config DUMMY_CONSOLE boolean {
     depends on [PROM_CONSOLE!="y" || VGA_CONSOLE!="y" || SGI_NEWPORT_CONSOLE!="y"]
     default [y] if [HAS_IOMEM && VT && (!PROM_CONSOLE || !VGA_CONSOLE || SGI_NEWPORT_CONSOLE!="y")]
     inherited [HAS_IOMEM && VT && (!PROM_CONSOLE || !VGA_CONSOLE || SGI_NEWPORT_CONSOLE!="y")]
    }
    config DUMMY_CONSOLE_COLUMNS integer {
     prompt "Initial number of console screen columns" if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     depends on [PARISC && DUMMY_CONSOLE]
     default [160] if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     inherited [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
    }
    config DUMMY_CONSOLE_ROWS integer {
     prompt "Initial number of console screen rows" if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     depends on [PARISC && DUMMY_CONSOLE]
     default [64] if [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
     inherited [HAS_IOMEM && VT && PARISC && DUMMY_CONSOLE]
    }
    config FRAMEBUFFER_CONSOLE tristate {
     prompt "Framebuffer Console support" if [HAS_IOMEM && VT && FB]
     depends on [FB]
     select CRC32 if [HAS_IOMEM && VT && FB]
     inherited [HAS_IOMEM && VT && FB]
     config FRAMEBUFFER_CONSOLE_DETECT_PRIMARY boolean {
      prompt "Map the console to the primary display device" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
      depends on [FRAMEBUFFER_CONSOLE]
      default [n] if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FRAMEBUFFER_CONSOLE_ROTATION boolean {
      prompt "Framebuffer Console Rotation" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
      depends on [FRAMEBUFFER_CONSOLE]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
    }
    config STI_CONSOLE boolean {
     prompt "STI text console" if [HAS_IOMEM && VT && PARISC]
     depends on [PARISC]
     default [y] if [HAS_IOMEM && VT && PARISC]
     inherited [HAS_IOMEM && VT && PARISC]
    }
    config FONTS boolean {
     prompt "Select compiled-in fonts" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
     inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     config FONT_8x8 boolean {
      prompt "VGA 8x8 font" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
      default [y] if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && !SPARC && !FONTS]
      inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     }
     config FONT_8x16 boolean {
      prompt "VGA 8x16 font" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON]
      default [y] if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON) && !SPARC && !FONTS]
      inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || SGI_NEWPORT_CONSOLE || STI_CONSOLE || USB_SISUSBVGA_CON)]
     }
     config FONT_6x11 boolean {
      prompt "Mac console 6x11 font (not supported by all drivers)" if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS]
      depends on [FRAMEBUFFER_CONSOLE || STI_CONSOLE]
      default [y] if [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE) && !SPARC && !FONTS && MAC]
      inherited [HAS_IOMEM && VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE)]
     }
     config FONT_7x14 boolean {
      prompt "console 7x14 font (not supported by all drivers)" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_PEARL_8x8 boolean {
      prompt "Pearl (old m68k) console 8x8 font" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      default [y] if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && !SPARC && !FONTS && AMIGA]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_ACORN_8x8 boolean {
      prompt "Acorn console 8x8 font" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
      depends on [FRAMEBUFFER_CONSOLE]
      default [y] if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && !SPARC && !FONTS && ARM && ARCH_ACORN]
      inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
     }
     config FONT_MINI_4x6 boolean {
      prompt "Mini 4x6 font" if [HAS_IOMEM && VT && !SPARC && FONTS]
      depends on [!SPARC && FONTS]
      inherited [HAS_IOMEM && VT && !SPARC && FONTS]
     }
    }
    config FONT_SUN8x16 boolean {
     prompt "Sparc console 8x16 font" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     depends on [FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
    }
    config FONT_SUN12x22 boolean {
     prompt "Sparc console 12x22 font (not supported by all drivers)" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     depends on [FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
     inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && (!SPARC && FONTS || SPARC)]
    }
    config FONT_10x18 boolean {
     prompt "console 10x18 font (not supported by all drivers)" if [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE && FONTS]
     depends on [FRAMEBUFFER_CONSOLE]
     inherited [HAS_IOMEM && VT && FRAMEBUFFER_CONSOLE]
    }
   }
  }
  if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE)] {
   menuconfig LOGO boolean {
    prompt "Bootup logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE)]
    depends on [FB || SGI_NEWPORT_CONSOLE]
    inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE)]
    if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO] {
     config FB_LOGO_EXTRA boolean {
      depends on [FB="y"]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && FB="y" && SPU_BASE]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && FB="y"]
     }
     config LOGO_LINUX_MONO boolean {
      prompt "Standard black and white Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_LINUX_VGA16 boolean {
      prompt "Standard 16-color Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_LINUX_CLUT224 boolean {
      prompt "Standard 224-color Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO]
     }
     config LOGO_DEC_CLUT224 boolean {
      prompt "224-color Digital Equipment Corporation Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
      depends on [MACH_DECSTATION || ALPHA]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (MACH_DECSTATION || ALPHA)]
     }
     config LOGO_MAC_CLUT224 boolean {
      prompt "224-color Macintosh Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
      depends on [MAC]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && MAC]
     }
     config LOGO_PARISC_CLUT224 boolean {
      prompt "224-color PA-RISC Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
      depends on [PARISC]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && PARISC]
     }
     config LOGO_SGI_CLUT224 boolean {
      prompt "224-color SGI Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
      depends on [SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && (SGI_IP22 || SGI_IP27 || SGI_IP32 || X86_VISWS)]
     }
     config LOGO_SUN_CLUT224 boolean {
      prompt "224-color Sun Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
      depends on [SPARC]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SPARC]
     }
     config LOGO_SUPERH_MONO boolean {
      prompt "Black and white SuperH Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [SUPERH]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_SUPERH_VGA16 boolean {
      prompt "16-color SuperH Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [SUPERH]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_SUPERH_CLUT224 boolean {
      prompt "224-color SuperH Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      depends on [SUPERH]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && SUPERH]
     }
     config LOGO_M32R_CLUT224 boolean {
      prompt "224-color M32R Linux logo" if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
      depends on [M32R]
      default [y] if [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
      inherited [HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE) && LOGO && M32R]
     }
    }
   }
  }
 }
 menu "Sound" {
  depends on [HAS_IOMEM]
  config SOUND tristate {
   prompt "Sound card support" if [HAS_IOMEM]
   inherited [HAS_IOMEM]
   config DMASOUND_ATARI tristate {
    prompt "Atari DMA sound support" if [HAS_IOMEM && ATARI && SOUND]
    depends on [ATARI && SOUND]
    select DMASOUND if [HAS_IOMEM && ATARI && SOUND]
    inherited [HAS_IOMEM && ATARI && SOUND]
   }
   config DMASOUND_PAULA tristate {
    prompt "Amiga DMA sound support" if [HAS_IOMEM && (AMIGA || APUS) && SOUND]
    depends on [(AMIGA || APUS) && SOUND]
    select DMASOUND if [HAS_IOMEM && (AMIGA || APUS) && SOUND]
    inherited [HAS_IOMEM && (AMIGA || APUS) && SOUND]
   }
   config DMASOUND_Q40 tristate {
    prompt "Q40 sound support" if [HAS_IOMEM && Q40 && SOUND]
    depends on [Q40 && SOUND]
    select DMASOUND if [HAS_IOMEM && Q40 && SOUND]
    inherited [HAS_IOMEM && Q40 && SOUND]
   }
  }
  config DMASOUND tristate {
   inherited [HAS_IOMEM]
  }
  if [HAS_IOMEM && !M68K] {
   menu "Advanced Linux Sound Architecture" {
    depends on [HAS_IOMEM && !M68K && SOUND!="n"]
    config SND tristate {
     prompt "Advanced Linux Sound Architecture" if [HAS_IOMEM && !M68K && SOUND]
     depends on [SOUND]
     inherited [HAS_IOMEM && !M68K && SOUND]
     config SND_TIMER tristate {
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
     }
     config SND_PCM tristate {
      select SND_TIMER if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
     }
     config SND_HWDEP tristate {
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
     }
     config SND_RAWMIDI tristate {
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
     }
     config SND_SEQUENCER tristate {
      prompt "Sequencer support" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      depends on [SND]
      select SND_TIMER if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      config SND_SEQ_DUMMY tristate {
       prompt "Sequencer dummy client" if [HAS_IOMEM && !M68K && SOUND!="n" && SND_SEQUENCER]
       depends on [SND_SEQUENCER]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND_SEQUENCER]
      }
     }
     config SND_OSSEMUL boolean {
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND && SND]
     }
     config SND_MIXER_OSS tristate {
      prompt "OSS Mixer API" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      depends on [SND]
      select SND_OSSEMUL if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
     }
     config SND_PCM_OSS tristate {
      prompt "OSS PCM (digital audio) API" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      depends on [SND]
      select SND_OSSEMUL if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      config SND_PCM_OSS_PLUGINS boolean {
       prompt "OSS PCM (digital audio) API - Include plugin system" if [HAS_IOMEM && !M68K && SOUND && SND_PCM_OSS]
       depends on [SND_PCM_OSS]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND_PCM_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND && SND_PCM_OSS]
      }
     }
     config SND_SEQUENCER_OSS boolean {
      prompt "OSS Sequencer API" if [HAS_IOMEM && !M68K && SOUND && SND && SND_SEQUENCER]
      depends on [SND && SND_SEQUENCER]
      select SND_OSSEMUL if [HAS_IOMEM && !M68K && SOUND && SND && SND_SEQUENCER]
      inherited [HAS_IOMEM && !M68K && SOUND && SND && SND_SEQUENCER]
     }
     config SND_RTCTIMER tristate {
      prompt "RTC Timer support" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && RTC]
      depends on [SND && RTC]
      select SND_TIMER if [HAS_IOMEM && !M68K && SOUND!="n" && SND && RTC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && RTC]
      config SND_SEQ_RTCTIMER_DEFAULT boolean {
       prompt "Use RTC as default sequencer timer" if [HAS_IOMEM && !M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER]
       depends on [SND_RTCTIMER && SND_SEQUENCER]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER]
       inherited [HAS_IOMEM && !M68K && SOUND && SND_RTCTIMER && SND_SEQUENCER]
      }
     }
     config SND_DYNAMIC_MINORS boolean {
      prompt "Dynamic device file minor numbers" if [HAS_IOMEM && !M68K && SOUND && SND]
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND && SND]
     }
     config SND_SUPPORT_OLD_API boolean {
      prompt "Support old ALSA API" if [HAS_IOMEM && !M68K && SOUND && SND]
      depends on [SND]
      default [y] if [HAS_IOMEM && !M68K && SOUND && SND]
      inherited [HAS_IOMEM && !M68K && SOUND && SND]
     }
     config SND_VERBOSE_PROCFS boolean {
      prompt "Verbose procfs contents" if [HAS_IOMEM && !M68K && SOUND && SND && PROC_FS]
      depends on [SND && PROC_FS]
      default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PROC_FS]
      inherited [HAS_IOMEM && !M68K && SOUND && SND && PROC_FS]
     }
     config SND_VERBOSE_PRINTK boolean {
      prompt "Verbose printk" if [HAS_IOMEM && !M68K && SOUND && SND]
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND && SND]
     }
     config SND_DEBUG boolean {
      prompt "Debug" if [HAS_IOMEM && !M68K && SOUND && SND]
      depends on [SND]
      inherited [HAS_IOMEM && !M68K && SOUND && SND]
      config SND_DEBUG_DETECT boolean {
       prompt "Debug detection" if [HAS_IOMEM && !M68K && SOUND && SND_DEBUG]
       depends on [SND_DEBUG]
       inherited [HAS_IOMEM && !M68K && SOUND && SND_DEBUG]
      }
      config SND_PCM_XRUN_DEBUG boolean {
       prompt "Enable PCM ring buffer overrun/underrun debugging" if [HAS_IOMEM && !M68K && SOUND && SND_DEBUG && SND_VERBOSE_PROCFS]
       default [n] if [HAS_IOMEM && !M68K && SOUND && SND_DEBUG && SND_VERBOSE_PROCFS]
       depends on [SND_DEBUG && SND_VERBOSE_PROCFS]
       inherited [HAS_IOMEM && !M68K && SOUND && SND_DEBUG && SND_VERBOSE_PROCFS]
      }
     }
     menu "Generic devices" {
      depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      config SND_MPU401_UART tristate {
       select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      }
      config SND_OPL3_LIB tristate {
       select SND_TIMER if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      }
      config SND_OPL4_LIB tristate {
       select SND_TIMER if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      }
      config SND_VX_LIB tristate {
       select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      }
      config SND_AC97_CODEC tristate {
       select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       select AC97_BUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      }
      config SND_DUMMY tristate {
       prompt "Dummy (/dev/null) soundcard" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      }
      config SND_VIRMIDI tristate {
       prompt "Virtual MIDI soundcard" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
       depends on [SND_SEQUENCER]
       select SND_TIMER if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
       select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SEQUENCER]
      }
      config SND_MTPAV tristate {
       prompt "MOTU MidiTimePiece AV multiport MIDI" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      }
      config SND_MTS64 tristate {
       prompt "ESI Miditerminal 4140 driver" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PARPORT]
       depends on [SND && PARPORT]
       select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PARPORT]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && PARPORT]
      }
      config SND_SERIAL_U16550 tristate {
       prompt "UART16550 serial MIDI driver" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      }
      config SND_MPU401 tristate {
       prompt "Generic MPU-401 UART driver" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       depends on [SND]
       select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      }
      config SND_PORTMAN2X4 tristate {
       prompt "Portman 2x4 driver" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PARPORT]
       depends on [SND && PARPORT]
       select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PARPORT]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && PARPORT]
      }
     }
    }
    config SND_AD1848_LIB tristate {
     select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n"]
     inherited [HAS_IOMEM && !M68K && SOUND!="n"]
    }
    config SND_CS4231_LIB tristate {
     select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n"]
     inherited [HAS_IOMEM && !M68K && SOUND!="n"]
    }
    config SND_SB_COMMON tristate {
     inherited [HAS_IOMEM && !M68K && SOUND!="n"]
    }
    config SND_SB8_DSP tristate {
     select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n"]
     select SND_SB_COMMON if [HAS_IOMEM && !M68K && SOUND!="n"]
     inherited [HAS_IOMEM && !M68K && SOUND!="n"]
    }
    config SND_SB16_DSP tristate {
     select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n"]
     select SND_SB_COMMON if [HAS_IOMEM && !M68K && SOUND!="n"]
     inherited [HAS_IOMEM && !M68K && SOUND!="n"]
    }
    menu "ISA devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
     config SND_ADLIB tristate {
      prompt "AdLib FM card" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_AD1816A tristate {
      prompt "Analog Devices SoundPort AD1816A" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      depends on [SND && PNP && ISA]
      select ISAPNP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
     }
     config SND_AD1848 tristate {
      prompt "Generic AD1848/CS4248 driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_AD1848_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_ALS100 tristate {
      prompt "Avance Logic ALS100/ALS120" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      depends on [SND && PNP && ISA]
      select ISAPNP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_SB16_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
     }
     config SND_AZT2320 tristate {
      prompt "Aztech Systems AZT2320" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      depends on [SND && PNP && ISA]
      select ISAPNP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
     }
     config SND_CMI8330 tristate {
      prompt "C-Media CMI8330" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_AD1848_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_SB16_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_CS4231 tristate {
      prompt "Generic Cirrus Logic CS4231 driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_CS4232 tristate {
      prompt "Generic Cirrus Logic CS4232 driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_CS4236 tristate {
      prompt "Generic Cirrus Logic CS4236+ driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_DT019X tristate {
      prompt "Diamond Technologies DT-019X, Avance Logic ALS-007" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      depends on [SND && PNP && ISA]
      select ISAPNP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_SB16_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
     }
     config SND_ES968 tristate {
      prompt "Generic ESS ES968 driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      depends on [SND && PNP && ISA]
      select ISAPNP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_SB8_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
     }
     config SND_ES1688 tristate {
      prompt "Generic ESS ES688/ES1688 driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_ES18XX tristate {
      prompt "Generic ESS ES18xx driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_SC6000 tristate {
      prompt "Gallant SC-6000, Audio Excel DSP 16" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND && HAS_IOPORT]
      depends on [SND && HAS_IOPORT]
      select SND_AD1848_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND && HAS_IOPORT]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND && HAS_IOPORT]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND && HAS_IOPORT]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND && HAS_IOPORT]
     }
     config SND_GUS_SYNTH tristate {
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ISA && ISA_DMA_API]
     }
     config SND_GUSCLASSIC tristate {
      prompt "Gravis UltraSound Classic" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_GUS_SYNTH if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_GUSEXTREME tristate {
      prompt "Gravis UltraSound Extreme" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_GUS_SYNTH if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_GUSMAX tristate {
      prompt "Gravis UltraSound MAX" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_GUS_SYNTH if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_INTERWAVE tristate {
      prompt "AMD InterWave, Gravis UltraSound PnP" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      depends on [SND && PNP && ISA]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_GUS_SYNTH if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
     }
     config SND_INTERWAVE_STB tristate {
      prompt "AMD InterWave + TEA6330T (UltraSound 32-Pro)" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      depends on [SND && PNP && ISA]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      select SND_GUS_SYNTH if [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA_DMA_API && SND && PNP && ISA]
     }
     config SND_OPL3SA2 tristate {
      prompt "Yamaha OPL3-SA2/SA3" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_OPTI92X_AD1848 tristate {
      prompt "OPTi 82C92x - AD1848" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_OPL4_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_AD1848_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_OPTI92X_CS4231 tristate {
      prompt "OPTi 82C92x - CS4231" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_OPL4_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_OPTI93X tristate {
      prompt "OPTi 82C93x" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_MIRO tristate {
      prompt "Miro miroSOUND PCM1pro/PCM12/PCM20radio driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL4_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_SB8 tristate {
      prompt "Sound Blaster 1.0/2.0/Pro (8-bit)" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_SB8_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_SB16 tristate {
      prompt "Sound Blaster 16 (PnP)" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_SB16_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_SBAWE tristate {
      prompt "Sound Blaster AWE (32,64) (PnP)" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_SB16_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      config SND_SB16_CSP boolean {
       prompt "Sound Blaster 16/AWE CSP support" if [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
       depends on [(SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
       select FW_LOADER if [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC) && !SND_SB16_CSP_FIRMWARE_IN_KERNEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && (SND_SB16 || SND_SBAWE) && (BROKEN || !PPC)]
       config SND_SB16_CSP_FIRMWARE_IN_KERNEL boolean {
        prompt "In-kernel firmware for SB16 CSP" if [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && SND_SB16_CSP]
        depends on [SND_SB16_CSP]
        default [y] if [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && SND_SB16_CSP]
        inherited [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && SND_SB16_CSP]
       }
      }
     }
     config SND_SGALAXY tristate {
      prompt "Aztech Sound Galaxy" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_AD1848_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_SSCAPE tristate {
      prompt "Ensoniq SoundScape PnP driver" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
     }
     config SND_WAVEFRONT tristate {
      prompt "Turtle Beach Maui,Tropez,Tropez+ (Wavefront)" if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      select SND_CS4231_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ISA && ISA_DMA_API && SND]
      config SND_WAVEFRONT_FIRMWARE_IN_KERNEL boolean {
       prompt "In-kernel firmware for Wavefront" if [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && SND_WAVEFRONT]
       depends on [SND_WAVEFRONT]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && SND_WAVEFRONT]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && ISA && ISA_DMA_API && SND_WAVEFRONT]
      }
     }
    }
    menu "PCI devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PCI]
     config SND_AD1889 tristate {
      prompt "Analog Devices AD1889" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ALS300 tristate {
      prompt "Avance Logic ALS300/ALS300+" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ALS4000 tristate {
      prompt "Avance Logic ALS4000" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      depends on [SND && ISA_DMA_API]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      select SND_SB_COMMON if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
     }
     config SND_ALI5451 tristate {
      prompt "ALi M5451 PCI Audio Controller" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ATIIXP tristate {
      prompt "ATI IXP AC97 Controller" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ATIIXP_MODEM tristate {
      prompt "ATI IXP Modem" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_AU8810 tristate {
      prompt "Aureal Advantage" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_AU8820 tristate {
      prompt "Aureal Vortex" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_AU8830 tristate {
      prompt "Aureal Vortex 2" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_AZT3328 tristate {
      prompt "Aztech AZF3328 / PCI168 (EXPERIMENTAL)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
      depends on [SND && EXPERIMENTAL]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && EXPERIMENTAL]
     }
     config SND_BT87X tristate {
      prompt "Bt87x Audio Capture" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      config SND_BT87X_OVERCLOCK boolean {
       prompt "Bt87x Audio overclocking" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_BT87X]
       depends on [SND_BT87X]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_BT87X]
      }
     }
     config SND_CA0106 tristate {
      prompt "SB Audigy LS / Live 24bit" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_CMIPCI tristate {
      prompt "C-Media 8338, 8738, 8768, 8770" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_CS4281 tristate {
      prompt "Cirrus Logic (Sound Fusion) CS4281" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_CS46XX tristate {
      prompt "Cirrus Logic (Sound Fusion) CS4280/CS461x/CS462x/CS463x" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      config SND_CS46XX_NEW_DSP boolean {
       prompt "Cirrus Logic (Sound Fusion) New DSP support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_CS46XX]
       depends on [SND_CS46XX]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_CS46XX]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_CS46XX]
      }
     }
     config SND_CS5530 tristate {
      prompt "CS5530 Audio" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      depends on [SND && ISA_DMA_API]
      select SND_SB16_DSP if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && ISA_DMA_API]
     }
     config SND_CS5535AUDIO tristate {
      prompt "CS5535/CS5536 Audio" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
      depends on [SND && X86 && !X86_64]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && X86 && !X86_64]
     }
     config SND_DARLA20 tristate {
      prompt "(Echoaudio) Darla20" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_GINA20 tristate {
      prompt "(Echoaudio) Gina20" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_LAYLA20 tristate {
      prompt "(Echoaudio) Layla20" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_DARLA24 tristate {
      prompt "(Echoaudio) Darla24" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_GINA24 tristate {
      prompt "(Echoaudio) Gina24" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_LAYLA24 tristate {
      prompt "(Echoaudio) Layla24" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_MONA tristate {
      prompt "(Echoaudio) Mona" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_MIA tristate {
      prompt "(Echoaudio) Mia" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ECHO3G tristate {
      prompt "(Echoaudio) 3G cards" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_INDIGO tristate {
      prompt "(Echoaudio) Indigo" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_INDIGOIO tristate {
      prompt "(Echoaudio) Indigo IO" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_INDIGODJ tristate {
      prompt "(Echoaudio) Indigo DJ" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_EMU10K1 tristate {
      prompt "Emu10k1 (SB Live!, Audigy, E-mu APS)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_EMU10K1X tristate {
      prompt "Emu10k1X (Dell OEM Version)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ENS1370 tristate {
      prompt "(Creative) Ensoniq AudioPCI 1370" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ENS1371 tristate {
      prompt "(Creative) Ensoniq AudioPCI 1371/1373" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ES1938 tristate {
      prompt "ESS ES1938/1946/1969 (Solo-1)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ES1968 tristate {
      prompt "ESS ES1968/1978 (Maestro-1/2/2E)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_FM801 tristate {
      prompt "ForteMedia FM801" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      config SND_FM801_TEA575X_BOOL boolean {
       prompt "ForteMedia FM801 + TEA5757 tuner" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_FM801]
       depends on [SND_FM801]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_FM801]
       config SND_FM801_TEA575X tristate {
        depends on [SND_FM801_TEA575X_BOOL]
        default [SND_FM801] if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
        select VIDEO_V4L1 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
        select VIDEO_DEV if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
        inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PCI && SND_FM801_TEA575X_BOOL]
       }
      }
     }
     config SND_HDA_INTEL tristate {
      prompt "Intel HD Audio" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      config SND_HDA_HWDEP boolean {
       prompt "Build hwdep interface for HD-audio driver" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_REALTEK boolean {
       prompt "Build Realtek HD-audio codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_ANALOG boolean {
       prompt "Build Analog Device HD-audio codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_SIGMATEL boolean {
       prompt "Build IDT/Sigmatel HD-audio codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_VIA boolean {
       prompt "Build VIA HD-audio codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_ATIHDMI boolean {
       prompt "Build ATI HDMI HD-audio codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_CONEXANT boolean {
       prompt "Build Conexant HD-audio codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_CMEDIA boolean {
       prompt "Build C-Media HD-audio codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_CODEC_SI3054 boolean {
       prompt "Build Silicon Labs 3054 HD-modem codec support" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_GENERIC boolean {
       prompt "Enable generic HD-audio codec parser" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       depends on [SND_HDA_INTEL]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL]
      }
      config SND_HDA_POWER_SAVE boolean {
       prompt "Aggressive power-saving on HD-audio" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL && EXPERIMENTAL]
       depends on [SND_HDA_INTEL && EXPERIMENTAL]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_INTEL && EXPERIMENTAL]
       config SND_HDA_POWER_SAVE_DEFAULT integer {
        prompt "Default time-out for HD-audio power-save mode" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_POWER_SAVE]
        depends on [SND_HDA_POWER_SAVE]
        default [0] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_POWER_SAVE]
        inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_HDA_POWER_SAVE]
       }
      }
     }
     config SND_HDSP tristate {
      prompt "RME Hammerfall DSP Audio" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_HDSPM tristate {
      prompt "RME Hammerfall DSP MADI" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ICE1712 tristate {
      prompt "ICEnsemble ICE1712 (Envy24)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_ICE1724 tristate {
      prompt "ICE/VT1724/1720 (Envy24HT/PT)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_INTEL8X0 tristate {
      prompt "Intel/SiS/nVidia/AMD/ALi AC97 Controller" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_INTEL8X0M tristate {
      prompt "Intel/SiS/nVidia/AMD MC97 Modem" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_KORG1212 tristate {
      prompt "Korg 1212 IO" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && !SND_KORG1212_FIRMWARE_IN_KERNEL]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      config SND_KORG1212_FIRMWARE_IN_KERNEL boolean {
       prompt "In-kernel firmware for Korg1212 driver" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_KORG1212]
       depends on [SND_KORG1212]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_KORG1212]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_KORG1212]
      }
     }
     config SND_MAESTRO3 tristate {
      prompt "ESS Allegro/Maestro3" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && !SND_MAESTRO3_FIRMWARE_IN_KERNEL]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      config SND_MAESTRO3_FIRMWARE_IN_KERNEL boolean {
       prompt "In-kernel firmware for Maestro3 driver" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_MAESTRO3]
       depends on [SND_MAESTRO3]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_MAESTRO3]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_MAESTRO3]
      }
     }
     config SND_MIXART tristate {
      prompt "Digigram miXart" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_NM256 tristate {
      prompt "NeoMagic NM256AV/ZX" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_PCXHR tristate {
      prompt "Digigram PCXHR" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_RIPTIDE tristate {
      prompt "Conexant Riptide" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_RME32 tristate {
      prompt "RME Digi32, 32/8, 32 PRO" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_RME96 tristate {
      prompt "RME Digi96, 96/8, 96/8 PRO" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_RME9652 tristate {
      prompt "RME Digi9652 (Hammerfall)" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_SONICVIBES tristate {
      prompt "S3 SonicVibes" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_TRIDENT tristate {
      prompt "Trident 4D-Wave DX/NX; SiS 7018" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_VIA82XX tristate {
      prompt "VIA 82C686A/B, 8233/8235 AC97 Controller" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_VIA82XX_MODEM tristate {
      prompt "VIA 82C686A/B, 8233 based Modems" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_VX222 tristate {
      prompt "Digigram VX222" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select SND_VX_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
     }
     config SND_YMFPCI tristate {
      prompt "Yamaha YMF724/740/744/754" if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      depends on [SND]
      select FW_LOADER if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND && !SND_YMFPCI_FIRMWARE_IN_KERNEL]
      select SND_OPL3_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_MPU401_UART if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PCI && SND]
      config SND_YMFPCI_FIRMWARE_IN_KERNEL boolean {
       prompt "In-kernel firmware for YMFPCI driver" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_YMFPCI]
       depends on [SND_YMFPCI]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_YMFPCI]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_YMFPCI]
      }
     }
     config SND_AC97_POWER_SAVE boolean {
      prompt "AC97 Power-Saving Mode" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_AC97_CODEC && EXPERIMENTAL]
      depends on [SND_AC97_CODEC && EXPERIMENTAL]
      default [n] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_AC97_CODEC && EXPERIMENTAL]
      inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_AC97_CODEC && EXPERIMENTAL]
      config SND_AC97_POWER_SAVE_DEFAULT integer {
       prompt "Default time-out for AC97 power-save mode" if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_AC97_POWER_SAVE]
       depends on [SND_AC97_POWER_SAVE]
       default [0] if [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_AC97_POWER_SAVE]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PCI && SND_AC97_POWER_SAVE]
      }
     }
    }
    menu "ALSA PowerMac devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC]
     config SND_POWERMAC tristate {
      prompt "PowerMac (AWACS, DACA, Burgundy, Tumbler, Keywest)" if [HAS_IOMEM && !M68K && SOUND!="n" && PPC && SND && I2C && INPUT && PPC_PMAC]
      depends on [SND && I2C && INPUT && PPC_PMAC]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PPC && SND && I2C && INPUT && PPC_PMAC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PPC && SND && I2C && INPUT && PPC_PMAC]
      config SND_POWERMAC_AUTO_DRC boolean {
       prompt "Toggle DRC automatically at headphone/line plug-in" if [HAS_IOMEM && !M68K && SOUND && SND && PPC && SND_POWERMAC]
       depends on [SND_POWERMAC]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SND && PPC && SND_POWERMAC]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && PPC && SND_POWERMAC]
      }
     }
    }
    menu "ALSA PowerPC devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && (PPC64 || PPC32)]
     config SND_PS3 tristate {
      prompt "PS3 Audio support" if [HAS_IOMEM && !M68K && SOUND!="n" && (PPC64 || PPC32) && SND && PS3_PS3AV]
      depends on [SND && PS3_PS3AV]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && (PPC64 || PPC32) && SND && PS3_PS3AV]
      default [m] if [HAS_IOMEM && !M68K && SOUND!="n" && (PPC64 || PPC32) && SND && PS3_PS3AV]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && (PPC64 || PPC32) && SND && PS3_PS3AV]
      config SND_PS3_DEFAULT_START_DELAY integer {
       prompt "Startup delay time in ms" if [HAS_IOMEM && !M68K && SOUND && SND && (PPC64 || PPC32) && SND_PS3]
       depends on [SND_PS3]
       default [2000] if [HAS_IOMEM && !M68K && SOUND && SND && (PPC64 || PPC32) && SND_PS3]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && (PPC64 || PPC32) && SND_PS3]
      }
     }
    }
    menu "Apple Onboard Audio driver" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC]
     config SND_AOA tristate {
      prompt "Apple Onboard Audio driver" if [HAS_IOMEM && !M68K && SOUND!="n" && PPC_PMAC && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && PPC_PMAC && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && PPC_PMAC && SND]
      config SND_AOA_FABRIC_LAYOUT tristate {
       prompt "layout-id fabric" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       depends on [SND_AOA]
       select SND_AOA_SOUNDBUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       select SND_AOA_SOUNDBUS_I2S if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
      }
      config SND_AOA_ONYX tristate {
       prompt "support Onyx chip" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       depends on [SND_AOA]
       select I2C if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       select I2C_POWERMAC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
      }
      config SND_AOA_TAS tristate {
       prompt "support TAS chips" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       depends on [SND_AOA]
       select I2C if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       select I2C_POWERMAC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
      }
      config SND_AOA_TOONIE tristate {
       prompt "support Toonie chip" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
       depends on [SND_AOA]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA]
      }
     }
     config SND_AOA_SOUNDBUS tristate {
      prompt "Apple Soundbus support" if [HAS_IOMEM && !M68K && SND!="n" && PPC_PMAC && SOUND]
      depends on [SOUND]
      select SND_PCM if [HAS_IOMEM && !M68K && SND!="n" && PPC_PMAC && SOUND]
      inherited [HAS_IOMEM && !M68K && SND!="n" && PPC_PMAC && SOUND]
      config SND_AOA_SOUNDBUS_I2S tristate {
       prompt "I2S bus support" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA_SOUNDBUS && PCI]
       depends on [SND_AOA_SOUNDBUS && PCI]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PPC_PMAC && SND_AOA_SOUNDBUS && PCI]
      }
     }
    }
    menu "ALSA ARM devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARM]
     config SND_SA11XX_UDA1341 tristate {
      prompt "SA11xx UDA1341TS driver (iPaq H3600)" if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_SA1100 && SND && L3]
      depends on [ARCH_SA1100 && SND && L3]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_SA1100 && SND && L3]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_SA1100 && SND && L3]
     }
     config SND_ARMAACI tristate {
      prompt "ARM PrimeCell PL041 AC Link support" if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
      depends on [SND && ARM_AMBA]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ARM && SND && ARM_AMBA]
     }
     config SND_PXA2XX_PCM tristate {
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARM]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARM]
     }
     config SND_PXA2XX_AC97 tristate {
      prompt "AC97 driver for the Intel PXA2xx chip" if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
      depends on [ARCH_PXA && SND]
      select SND_PXA2XX_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
     }
    }
    if [HAS_IOMEM && !M68K && SOUND!="n" && SPI] {
     menu "SPI devices" {
      depends on [HAS_IOMEM && !M68K && SOUND!="n" && SPI && SND!="n"]
      config SND_AT73C213 tristate {
       prompt "Atmel AT73C213 DAC driver" if [HAS_IOMEM && !M68K && SOUND!="n" && SPI && SND!="n" && ATMEL_SSC]
       depends on [ATMEL_SSC]
       select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SPI && SND!="n" && ATMEL_SSC]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SPI && SND!="n" && ATMEL_SSC]
       config SND_AT73C213_TARGET_BITRATE integer {
        prompt "Target bitrate for AT73C213" if [HAS_IOMEM && !M68K && SOUND && SPI && SND && SND_AT73C213]
        depends on [SND_AT73C213]
        default [48000] if [HAS_IOMEM && !M68K && SOUND && SPI && SND && SND_AT73C213]
        range [8000 50000] if [HAS_IOMEM && !M68K && SOUND && SPI && SND && SND_AT73C213]
        inherited [HAS_IOMEM && !M68K && SOUND && SPI && SND && SND_AT73C213]
       }
      }
     }
    }
    menu "ALSA MIPS devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && MIPS]
     config SND_AU1X00 tristate {
      prompt "Au1x00 AC97 Port Driver" if [HAS_IOMEM && !M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
      depends on [(SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && MIPS && (SOC_AU1000 || SOC_AU1100 || SOC_AU1500) && SND]
     }
    }
    menu "SUPERH devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SUPERH]
     config SND_AICA tristate {
      prompt "Dreamcast Yamaha AICA sound" if [HAS_IOMEM && !M68K && SOUND!="n" && SUPERH && SH_DREAMCAST && SND]
      depends on [SH_DREAMCAST && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SUPERH && SH_DREAMCAST && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SUPERH && SH_DREAMCAST && SND]
     }
    }
    menu "USB devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && USB!="n"]
     config SND_USB_AUDIO tristate {
      prompt "USB Audio/MIDI driver" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      depends on [SND && USB]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
     }
     config SND_USB_USX2Y tristate {
      prompt "Tascam US-122, US-224 and US-428 USB driver" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
      depends on [SND && USB && (X86 || PPC || ALPHA)]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB && (X86 || PPC || ALPHA)]
     }
     config SND_USB_CAIAQ tristate {
      prompt "Native Instruments USB audio devices" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      depends on [SND && USB]
      select SND_HWDEP if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      select SND_RAWMIDI if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && USB]
      config SND_USB_CAIAQ_INPUT boolean {
       prompt "enable input device for controllers" if [HAS_IOMEM && !M68K && SOUND && SND && USB && SND_USB_CAIAQ]
       depends on [SND_USB_CAIAQ]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && USB && SND_USB_CAIAQ]
      }
     }
    }
    menu "PCMCIA devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && PCMCIA]
     config SND_VXPOCKET tristate {
      prompt "Digigram VXpocket" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PCMCIA]
      depends on [SND && PCMCIA]
      select SND_VX_LIB if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PCMCIA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && PCMCIA]
     }
     config SND_PDAUDIOCF tristate {
      prompt "Sound Core PDAudioCF" if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PCMCIA]
      depends on [SND && PCMCIA]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND && PCMCIA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND && PCMCIA]
     }
    }
    menu "ALSA Sparc devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SPARC]
     config SND_SUN_AMD7930 tristate {
      prompt "Sun AMD7930" if [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SBUS && SND]
      depends on [SBUS && SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SBUS && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SBUS && SND]
     }
     config SND_SUN_CS4231 tristate {
      prompt "Sun CS4231" if [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SND]
     }
     config SND_SUN_DBRI tristate {
      prompt "Sun DBRI" if [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SND && SBUS]
      depends on [SND && SBUS]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SND && SBUS]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SPARC && SND && SBUS]
     }
    }
    menu "GSC devices" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && GSC]
     config SND_HARMONY tristate {
      prompt "Harmony/Vivace sound chip" if [HAS_IOMEM && !M68K && SOUND!="n" && GSC && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && GSC && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && GSC && SND]
     }
    }
    menu "System on Chip audio support" {
     depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
     config SND_SOC_AC97_BUS boolean {
      inherited [HAS_IOMEM && !M68K && SOUND && SND]
     }
     config SND_SOC tristate {
      prompt "ALSA for SoC audio support" if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      depends on [SND]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND]
      config SND_AT91_SOC tristate {
       prompt "SoC Audio for the Atmel AT91 System-on-Chip" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARCH_AT91 && SND_SOC]
       depends on [ARCH_AT91 && SND_SOC]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARCH_AT91 && SND_SOC]
      }
     }
     config SND_AT91_SOC_SSC tristate {
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
     }
     config SND_AT91_SOC_ETI_B1_WM8731 tristate {
      prompt "SoC Audio support for WM8731-based Endrelia ETI-B1 boards" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_AT91_SOC && (MACH_ETI_B1 || MACH_ETI_C1)]
      depends on [SND_AT91_SOC && (MACH_ETI_B1 || MACH_ETI_C1)]
      select SND_AT91_SOC_SSC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_AT91_SOC && (MACH_ETI_B1 || MACH_ETI_C1)]
      select SND_SOC_WM8731 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_AT91_SOC && (MACH_ETI_B1 || MACH_ETI_C1)]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_AT91_SOC && (MACH_ETI_B1 || MACH_ETI_C1)]
      config SND_AT91_SOC_ETI_SLAVE boolean {
       prompt "Run codec in slave Mode on Endrelia boards" if [HAS_IOMEM && !M68K && SOUND && SND && SND_AT91_SOC_ETI_B1_WM8731]
       depends on [SND_AT91_SOC_ETI_B1_WM8731]
       default [n] if [HAS_IOMEM && !M68K && SOUND && SND && SND_AT91_SOC_ETI_B1_WM8731]
       inherited [HAS_IOMEM && !M68K && SOUND && SND && SND_AT91_SOC_ETI_B1_WM8731]
      }
     }
     config SND_PXA2XX_SOC tristate {
      prompt "SoC Audio for the Intel PXA2xx chip" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARCH_PXA && SND_SOC]
      depends on [ARCH_PXA && SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARCH_PXA && SND_SOC]
     }
     config SND_PXA2XX_AC97 tristate {
      prompt "AC97 driver for the Intel PXA2xx chip" if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
      depends on [ARCH_PXA && SND]
      select SND_PXA2XX_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && ARCH_PXA && SND]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
     }
     config SND_PXA2XX_SOC_AC97 tristate {
      select AC97_BUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      select SND_SOC_AC97_BUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
     }
     config SND_PXA2XX_SOC_I2S tristate {
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
     }
     config SND_PXA2XX_SOC_CORGI tristate {
      prompt "SoC Audio support for Sharp Zaurus SL-C7x0" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
      depends on [SND_PXA2XX_SOC && PXA_SHARP_C7xx]
      select SND_PXA2XX_SOC_I2S if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
      select SND_SOC_WM8731 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_C7xx]
     }
     config SND_PXA2XX_SOC_SPITZ tristate {
      prompt "SoC Audio support for Sharp Zaurus SL-Cxx00" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
      depends on [SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
      select SND_PXA2XX_SOC_I2S if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
      select SND_SOC_WM8750 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && PXA_SHARP_Cxx00]
     }
     config SND_PXA2XX_SOC_POODLE tristate {
      prompt "SoC Audio support for Poodle" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_POODLE]
      depends on [SND_PXA2XX_SOC && MACH_POODLE]
      select SND_PXA2XX_SOC_I2S if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_POODLE]
      select SND_SOC_WM8731 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_POODLE]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_POODLE]
     }
     config SND_PXA2XX_SOC_TOSA tristate {
      prompt "SoC AC97 Audio support for Tosa" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_TOSA]
      depends on [SND_PXA2XX_SOC && MACH_TOSA]
      select SND_PXA2XX_SOC_AC97 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_TOSA]
      select SND_SOC_WM9712 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_TOSA]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_PXA2XX_SOC && MACH_TOSA]
     }
     config SND_S3C24XX_SOC tristate {
      prompt "SoC Audio for the Samsung S3C24XX chips" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARCH_S3C2410 && SND_SOC]
      depends on [ARCH_S3C2410 && SND_SOC]
      select SND_PCM if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARCH_S3C2410 && SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && ARCH_S3C2410 && SND_SOC]
     }
     config SND_S3C24XX_SOC_I2S tristate {
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
     }
     config SND_S3C2443_SOC_AC97 tristate {
      select AC97_BUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      select SND_SOC_AC97_BUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
     }
     config SND_S3C24XX_SOC_NEO1973_WM8753 tristate {
      prompt "SoC I2S Audio support for NEO1973 - WM8753" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
      depends on [SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
      select SND_S3C24XX_SOC_I2S if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
      select SND_SOC_WM8753 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_NEO1973_GTA01]
     }
     config SND_S3C24XX_SOC_SMDK2443_WM9710 tristate {
      prompt "SoC AC97 Audio support for SMDK2443 - WM9710" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_SMDK2443]
      depends on [SND_S3C24XX_SOC && MACH_SMDK2443]
      select SND_S3C2443_SOC_AC97 if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_SMDK2443]
      select SND_SOC_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_SMDK2443]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_S3C24XX_SOC && MACH_SMDK2443]
     }
     menu "SoC Audio support for SuperH" {
      depends on [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      config SND_SOC_PCM_SH7760 tristate {
       prompt "SoC Audio support for Renesas SH7760" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && CPU_SUBTYPE_SH7760 && SND_SOC && SH_DMABRG]
       depends on [CPU_SUBTYPE_SH7760 && SND_SOC && SH_DMABRG]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && CPU_SUBTYPE_SH7760 && SND_SOC && SH_DMABRG]
      }
      config SND_SOC_SH4_HAC tristate {
       select AC97_BUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       select SND_SOC_AC97_BUS if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      }
      config SND_SOC_SH4_SSI tristate {
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n"]
      }
      config SND_SH7760_AC97 tristate {
       prompt "SH7760 AC97 sound support" if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
       depends on [CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
       select SND_SOC_SH4_HAC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
       select SND_SOC_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760]
      }
     }
     config SND_SOC_AC97_CODEC tristate {
      depends on [SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SOC]
     }
     config SND_SOC_WM8731 tristate {
      depends on [SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SOC]
     }
     config SND_SOC_WM8750 tristate {
      depends on [SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SOC]
     }
     config SND_SOC_WM8753 tristate {
      depends on [SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SOC]
     }
     config SND_SOC_WM9712 tristate {
      depends on [SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SOC]
     }
     config SND_SOC_CS4270 tristate {
      depends on [SND_SOC]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SND!="n" && SND_SOC]
     }
     config SND_SOC_CS4270_HWMUTE boolean {
      depends on [SND_SOC_CS4270]
      inherited [HAS_IOMEM && !M68K && SOUND && SND && SND_SOC_CS4270]
     }
     config SND_SOC_CS4270_VD33_ERRATA boolean {
      depends on [SND_SOC_CS4270]
      inherited [HAS_IOMEM && !M68K && SOUND && SND && SND_SOC_CS4270]
     }
    }
   }
   menu "Open Sound System" {
    depends on [HAS_IOMEM && !M68K && SOUND!="n"]
    config SOUND_PRIME tristate {
     prompt "Open Sound System (DEPRECATED)" if [HAS_IOMEM && !M68K && SOUND]
     depends on [SOUND]
     inherited [HAS_IOMEM && !M68K && SOUND]
     config SOUND_BCM_CS4297A tristate {
      prompt "Crystal Sound CS4297a (for Swarm)" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && SIBYTE_SWARM]
      depends on [SOUND_PRIME && SIBYTE_SWARM]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && SIBYTE_SWARM]
     }
     config SOUND_VWSND tristate {
      prompt "SGI Visual Workstation Sound" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && X86_VISWS]
      depends on [SOUND_PRIME && X86_VISWS]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && X86_VISWS]
     }
     config SOUND_HAL2 tristate {
      prompt "SGI HAL2 sound (EXPERIMENTAL)" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && SGI_IP22 && EXPERIMENTAL]
      depends on [SOUND_PRIME && SGI_IP22 && EXPERIMENTAL]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && SGI_IP22 && EXPERIMENTAL]
     }
     config SOUND_AU1550_AC97 tristate {
      prompt "Au1550/Au1200 AC97 Sound" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
      select SND_AC97_CODEC if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
      depends on [SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)]
     }
     config SOUND_TRIDENT tristate {
      prompt "Trident 4DWave DX/NX, SiS 7018 or ALi 5451 PCI Audio Core" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && PCI]
      depends on [SOUND_PRIME && PCI]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && PCI]
     }
     config SOUND_MSNDCLAS tristate {
      prompt "Support for Turtle Beach MultiSound Classic, Tahiti, Monterey" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      depends on [SOUND_PRIME && (m || !STANDALONE)]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      config MSNDCLAS_HAVE_BOOT boolean {
       depends on [SOUND_MSNDCLAS="y" && !STANDALONE]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y" && !STANDALONE]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y" && !STANDALONE]
      }
      config MSNDCLAS_INIT_FILE string {
       prompt "Full pathname of MSNDINIT.BIN firmware file" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS]
       depends on [SOUND_MSNDCLAS]
       default ["/etc/sound/msndinit.bin"] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS]
      }
      config MSNDCLAS_PERM_FILE string {
       prompt "Full pathname of MSNDPERM.BIN firmware file" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS]
       depends on [SOUND_MSNDCLAS]
       default ["/etc/sound/msndperm.bin"] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS]
      }
      config MSNDCLAS_IRQ integer {
       prompt "MSND Classic IRQ 5, 7, 9, 10, 11, 12" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
       depends on [SOUND_MSNDCLAS="y"]
       default [5] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
      }
      config MSNDCLAS_MEM hex {
       prompt "MSND Classic memory B0000, C8000, D0000, D8000, E0000, E8000" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
       depends on [SOUND_MSNDCLAS="y"]
       default [D0000] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
      }
      config MSNDCLAS_IO hex {
       prompt "MSND Classic I/O 210, 220, 230, 240, 250, 260, 290, 3E0" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
       depends on [SOUND_MSNDCLAS="y"]
       default [290] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDCLAS="y"]
      }
     }
     config SOUND_MSNDPIN tristate {
      prompt "Support for Turtle Beach MultiSound Pinnacle, Fiji" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      depends on [SOUND_PRIME && (m || !STANDALONE)]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && (m && <choice> || !STANDALONE)]
      config MSNDPIN_HAVE_BOOT boolean {
       depends on [SOUND_MSNDPIN="y"]
       default [y] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_INIT_FILE string {
       prompt "Full pathname of PNDSPINI.BIN firmware file" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN]
       depends on [SOUND_MSNDPIN]
       default ["/etc/sound/pndspini.bin"] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN]
      }
      config MSNDPIN_PERM_FILE string {
       prompt "Full pathname of PNDSPERM.BIN firmware file" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN]
       depends on [SOUND_MSNDPIN]
       default ["/etc/sound/pndsperm.bin"] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN]
      }
      config MSNDPIN_IRQ integer {
       prompt "MSND Pinnacle IRQ 5, 7, 9, 10, 11, 12" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       default [5] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_MEM hex {
       prompt "MSND Pinnacle memory B0000, C8000, D0000, D8000, E0000, E8000" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       default [D0000] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_IO hex {
       prompt "MSND Pinnacle I/O 210, 220, 230, 240, 250, 260, 290, 3E0" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       default [290] if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_DIGITAL boolean {
       prompt "MSND Pinnacle has S/PDIF I/O" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
      }
      config MSNDPIN_NONPNP boolean {
       prompt "MSND Pinnacle non-PnP Mode" if [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       depends on [SOUND_MSNDPIN="y"]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_MSNDPIN="y"]
       config MSNDPIN_CFG hex {
        prompt "MSND Pinnacle config port 250,260,270" if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [250] if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        inherited [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_MPU_IO hex {
        prompt "MSND Pinnacle MPU I/O (e.g. 330)" if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        inherited [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_MPU_IRQ integer {
        prompt "MSND Pinnacle MPU IRQ (e.g. 9)" if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        inherited [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_IDE_IO0 hex {
        prompt "MSND Pinnacle IDE I/O 0 (e.g. 170)" if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        inherited [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_IDE_IO1 hex {
        prompt "MSND Pinnacle IDE I/O 1 (e.g. 376)" if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        inherited [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_IDE_IRQ integer {
        prompt "MSND Pinnacle IDE IRQ (e.g. 15)" if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        inherited [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
       }
       config MSNDPIN_JOYSTICK_IO hex {
        prompt "MSND Pinnacle joystick I/O (e.g. 200)" if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        depends on [MSNDPIN_NONPNP]
        default [0] if [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
        inherited [HAS_IOMEM && !M68K && SOUND && MSNDPIN_NONPNP]
       }
      }
     }
     config MSND_FIFOSIZE integer {
      prompt "MSND buffer size (kB)" if [HAS_IOMEM && !M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
      depends on [SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
      default [128] if [HAS_IOMEM && !M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
      inherited [HAS_IOMEM && !M68K && SOUND && SOUND_PRIME && (SOUND_MSNDPIN="y" || SOUND_MSNDCLAS="y")]
     }
     config SOUND_OSS tristate {
      prompt "OSS sound modules" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && ISA_DMA_API && VIRT_TO_BUS]
      depends on [SOUND_PRIME && ISA_DMA_API && VIRT_TO_BUS]
      inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && ISA_DMA_API && VIRT_TO_BUS]
      config SOUND_TRACEINIT boolean {
       prompt "Verbose initialisation" if [HAS_IOMEM && !M68K && SOUND && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_OSS]
      }
      config SOUND_DMAP boolean {
       prompt "Persistent DMA buffers" if [HAS_IOMEM && !M68K && SOUND && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND && SOUND_OSS]
      }
      config SOUND_SSCAPE tristate {
       prompt "Ensoniq SoundScape support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS && VIRT_TO_BUS]
       depends on [SOUND_OSS]
       depends on [VIRT_TO_BUS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS && VIRT_TO_BUS]
      }
      config SOUND_VMIDI tristate {
       prompt "Loopback MIDI device support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_TRIX tristate {
       prompt "MediaTrix AudioTrix Pro support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       config TRIX_HAVE_BOOT boolean {
        prompt "Have TRXPRO.HEX firmware file" if [HAS_IOMEM && !M68K && SOUND && SOUND_TRIX="y" && !STANDALONE]
        depends on [SOUND_TRIX="y" && !STANDALONE]
        inherited [HAS_IOMEM && !M68K && SOUND && SOUND_TRIX="y" && !STANDALONE]
        config TRIX_BOOT_FILE string {
         prompt "Full pathname of TRXPRO.HEX firmware file" if [HAS_IOMEM && !M68K && SOUND && TRIX_HAVE_BOOT]
         depends on [TRIX_HAVE_BOOT]
         default ["/etc/sound/trxpro.hex"] if [HAS_IOMEM && !M68K && SOUND && TRIX_HAVE_BOOT]
         inherited [HAS_IOMEM && !M68K && SOUND && TRIX_HAVE_BOOT]
        }
       }
      }
      config SOUND_MSS tristate {
       prompt "Microsoft Sound System support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_MPU401 tristate {
       prompt "MPU-401 support (NOT for SB16)" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_PAS tristate {
       prompt "ProAudioSpectrum 16 support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       config PAS_JOYSTICK boolean {
        prompt "Enable PAS16 joystick port" if [HAS_IOMEM && !M68K && SOUND && SOUND_PAS="y"]
        depends on [SOUND_PAS="y"]
        inherited [HAS_IOMEM && !M68K && SOUND && SOUND_PAS="y"]
       }
      }
      config SOUND_PSS tristate {
       prompt "PSS (AD1848, ADSP-2115, ESC614) support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       config PSS_MIXER boolean {
        prompt "Enable PSS mixer (Beethoven ADSP-16 and other compatible)" if [HAS_IOMEM && !M68K && SOUND && SOUND_PSS]
        depends on [SOUND_PSS]
        inherited [HAS_IOMEM && !M68K && SOUND && SOUND_PSS]
       }
       config PSS_HAVE_BOOT boolean {
        prompt "Have DSPxxx.LD firmware file" if [HAS_IOMEM && !M68K && SOUND && SOUND_PSS && !STANDALONE]
        depends on [SOUND_PSS && !STANDALONE]
        inherited [HAS_IOMEM && !M68K && SOUND && SOUND_PSS && !STANDALONE]
        config PSS_BOOT_FILE string {
         prompt "Full pathname of DSPxxx.LD firmware file" if [HAS_IOMEM && !M68K && SOUND && PSS_HAVE_BOOT]
         depends on [PSS_HAVE_BOOT]
         default ["/etc/sound/dsp001.ld"] if [HAS_IOMEM && !M68K && SOUND && PSS_HAVE_BOOT]
         inherited [HAS_IOMEM && !M68K && SOUND && PSS_HAVE_BOOT]
        }
       }
      }
      config SOUND_SB tristate {
       prompt "100% Sound Blaster compatibles (SB16/32/64, ESS, Jazz16) support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_YM3812 tristate {
       prompt "Yamaha FM synthesizer (YM3812/OPL-3) support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_UART6850 tristate {
       prompt "6850 UART support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
      }
      config SOUND_AEDSP16 tristate {
       prompt "Gallant Audio Cards (SC-6000 and SC-6600 based)" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       depends on [SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_OSS]
       config SC6600 boolean {
        prompt "SC-6600 based audio cards (new Audio Excel DSP 16)" if [HAS_IOMEM && !M68K && SOUND && SOUND_AEDSP16]
        depends on [SOUND_AEDSP16]
        inherited [HAS_IOMEM && !M68K && SOUND && SOUND_AEDSP16]
        config SC6600_JOY boolean {
         prompt "Activate SC-6600 Joystick Interface" if [HAS_IOMEM && !M68K && SOUND && SC6600]
         depends on [SC6600]
         inherited [HAS_IOMEM && !M68K && SOUND && SC6600]
        }
        config SC6600_CDROM integer {
         prompt "SC-6600 CDROM Interface (4=None, 3=IDE, 1=Panasonic, 0=?Sony?)" if [HAS_IOMEM && !M68K && SOUND && SC6600]
         depends on [SC6600]
         default [4] if [HAS_IOMEM && !M68K && SOUND && SC6600]
         inherited [HAS_IOMEM && !M68K && SOUND && SC6600]
        }
        config SC6600_CDROMBASE hex {
         prompt "SC-6600 CDROM Interface I/O Address" if [HAS_IOMEM && !M68K && SOUND && SC6600]
         depends on [SC6600]
         default [0] if [HAS_IOMEM && !M68K && SOUND && SC6600]
         inherited [HAS_IOMEM && !M68K && SOUND && SC6600]
        }
       }
       choice boolean optional {
        prompt "Audio Excel DSP 16" if [HAS_IOMEM && !M68K && SOUND && SOUND_AEDSP16]
        depends on [SOUND_AEDSP16]
        config AEDSP16_MSS boolean {
         prompt "MSS emulation" if [<choice> && SOUND_MSS]
         depends on [SOUND_MSS]
         inherited [<choice> && SOUND_MSS]
        }
        config AEDSP16_SBPRO boolean {
         prompt "SBPro emulation" if [<choice> && SOUND_SB]
         depends on [SOUND_SB]
         inherited [<choice> && SOUND_SB]
        }
       }
      }
      config SOUND_VIDC tristate {
       prompt "VIDC 16-bit sound" if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && (ARCH_ACORN || ARCH_CLPS7500) && SOUND_OSS]
       depends on [ARM && (ARCH_ACORN || ARCH_CLPS7500) && SOUND_OSS]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && ARM && (ARCH_ACORN || ARCH_CLPS7500) && SOUND_OSS]
      }
      config SOUND_WAVEARTIST tristate {
       prompt "Netwinder WaveArtist" if [HAS_IOMEM && !M68K && SOUND!="n" && ARM && SOUND_OSS && ARCH_NETWINDER]
       depends on [ARM && SOUND_OSS && ARCH_NETWINDER]
       inherited [HAS_IOMEM && !M68K && SOUND!="n" && ARM && SOUND_OSS && ARCH_NETWINDER]
      }
     }
    }
    config SOUND_KAHLUA tristate {
     prompt "XpressAudio Sound Blaster emulation" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_SB]
     depends on [SOUND_SB]
     inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_SB]
    }
    config SOUND_SH_DAC_AUDIO tristate {
     prompt "SuperH DAC audio support" if [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && CPU_SH3]
     depends on [SOUND_PRIME && CPU_SH3]
     inherited [HAS_IOMEM && !M68K && SOUND!="n" && SOUND_PRIME && CPU_SH3]
     config SOUND_SH_DAC_AUDIO_CHANNEL integer {
      prompt "DAC channel" if [HAS_IOMEM && !M68K && SOUND && SOUND_SH_DAC_AUDIO]
      default [1] if [HAS_IOMEM && !M68K && SOUND && SOUND_SH_DAC_AUDIO]
      depends on [SOUND_SH_DAC_AUDIO]
      inherited [HAS_IOMEM && !M68K && SOUND && SOUND_SH_DAC_AUDIO]
     }
    }
   }
  }
  config AC97_BUS tristate {
   inherited [HAS_IOMEM]
  }
 }
 menuconfig HID_SUPPORT boolean {
  prompt "HID Devices" if [INPUT]
  depends on [INPUT]
  default [y] if [INPUT]
  inherited [INPUT]
  if [HID_SUPPORT] {
   config HID tristate {
    prompt "Generic HID support" if [HID_SUPPORT && INPUT]
    depends on [INPUT]
    default [y] if [HID_SUPPORT && INPUT]
    inherited [HID_SUPPORT && INPUT]
    config HID_DEBUG boolean {
     prompt "HID debugging support" if [HID_SUPPORT && HID]
     default [y] if [HID_SUPPORT && HID && !EMBEDDED]
     depends on [HID]
     inherited [HID_SUPPORT && HID]
    }
    config HIDRAW boolean {
     prompt "/dev/hidraw raw HID device support" if [HID_SUPPORT && HID]
     depends on [HID]
     inherited [HID_SUPPORT && HID]
    }
   }
   config USB_HID tristate {
    prompt "USB Human Interface Device (full HID) support" if [HID_SUPPORT && USB && INPUT]
    default [y] if [HID_SUPPORT && USB && INPUT]
    depends on [USB && INPUT]
    select HID if [HID_SUPPORT && USB && INPUT]
    inherited [HID_SUPPORT && USB && INPUT]
    config USB_HIDINPUT_POWERBOOK boolean {
     prompt "Enable support for iBook/PowerBook/MacBook/MacBookPro special keys" if [HID_SUPPORT && USB_HID]
     default [n] if [HID_SUPPORT && USB_HID]
     depends on [USB_HID]
     inherited [HID_SUPPORT && USB_HID]
    }
    config HID_FF boolean {
     prompt "Force feedback support (EXPERIMENTAL)" if [HID_SUPPORT && USB_HID && EXPERIMENTAL]
     depends on [USB_HID && EXPERIMENTAL]
     inherited [HID_SUPPORT && USB_HID && EXPERIMENTAL]
     config HID_PID boolean {
      prompt "PID device support" if [HID_SUPPORT && HID_FF]
      depends on [HID_FF]
      inherited [HID_SUPPORT && HID_FF]
     }
     config LOGITECH_FF boolean {
      prompt "Logitech devices support" if [HID_SUPPORT && HID_FF]
      depends on [HID_FF]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID_FF && USB_HID]
      inherited [HID_SUPPORT && HID_FF]
     }
     config PANTHERLORD_FF boolean {
      prompt "PantherLord/GreenAsia based device support" if [HID_SUPPORT && HID_FF]
      depends on [HID_FF]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID_FF && USB_HID]
      inherited [HID_SUPPORT && HID_FF]
     }
     config THRUSTMASTER_FF boolean {
      prompt "ThrustMaster devices support (EXPERIMENTAL)" if [HID_SUPPORT && HID_FF && EXPERIMENTAL]
      depends on [HID_FF && EXPERIMENTAL]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID_FF && EXPERIMENTAL && USB_HID]
      inherited [HID_SUPPORT && HID_FF && EXPERIMENTAL]
     }
     config ZEROPLUS_FF boolean {
      prompt "Zeroplus based game controller support" if [HID_SUPPORT && HID_FF]
      depends on [HID_FF]
      select INPUT_FF_MEMLESS if [HID_SUPPORT && HID_FF && USB_HID]
      inherited [HID_SUPPORT && HID_FF]
     }
    }
    config USB_HIDDEV boolean {
     prompt "/dev/hiddev raw HID device support" if [HID_SUPPORT && USB_HID]
     depends on [USB_HID]
     inherited [HID_SUPPORT && USB_HID]
    }
   }
   menu "USB HID Boot Protocol drivers" {
    depends on [HID_SUPPORT && USB!="n" && USB_HID!="y"]
    config USB_KBD tristate {
     prompt "USB HIDBP Keyboard (simple Boot) support" if [HID_SUPPORT && USB_HID!="y" && USB && INPUT]
     depends on [USB && INPUT]
     inherited [HID_SUPPORT && USB_HID!="y" && USB && INPUT]
    }
    config USB_MOUSE tristate {
     prompt "USB HIDBP Mouse (simple Boot) support" if [HID_SUPPORT && USB_HID!="y" && USB && INPUT]
     depends on [USB && INPUT]
     inherited [HID_SUPPORT && USB_HID!="y" && USB && INPUT]
    }
   }
  }
 }
 menuconfig USB_SUPPORT boolean {
  prompt "USB support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  default [y] if [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [USB_SUPPORT] {
   config USB_ARCH_HAS_HCD boolean {
    default [y] if [USB_SUPPORT && USB_ARCH_HAS_OHCI]
    default [y] if [USB_SUPPORT && USB_ARCH_HAS_EHCI]
    default [y] if [USB_SUPPORT && PCMCIA && !M32R]
    default [y] if [USB_SUPPORT && ARM]
    default [y] if [USB_SUPPORT && SUPERH]
    default [PCI] if [USB_SUPPORT]
    inherited [USB_SUPPORT]
   }
   config USB_ARCH_HAS_OHCI boolean {
    default [y] if [USB_SUPPORT && SA1111]
    default [y] if [USB_SUPPORT && ARCH_OMAP]
    default [y] if [USB_SUPPORT && ARCH_LH7A404]
    default [y] if [USB_SUPPORT && ARCH_S3C2410]
    default [y] if [USB_SUPPORT && PXA27x]
    default [y] if [USB_SUPPORT && ARCH_EP93XX]
    default [y] if [USB_SUPPORT && ARCH_AT91]
    default [y] if [USB_SUPPORT && ARCH_PNX4008]
    default [y] if [USB_SUPPORT && STB03xxx]
    default [y] if [USB_SUPPORT && PPC_MPC52xx]
    default [y] if [USB_SUPPORT && SOC_AU1X00]
    default [PCI] if [USB_SUPPORT]
    inherited [USB_SUPPORT]
   }
   config USB_ARCH_HAS_EHCI boolean {
    default [y] if [USB_SUPPORT && PPC_83xx]
    default [y] if [USB_SUPPORT && SOC_AU1200]
    default [PCI] if [USB_SUPPORT]
    inherited [USB_SUPPORT]
   }
   config USB tristate {
    prompt "Support for Host-side USB" if [USB_SUPPORT && USB_ARCH_HAS_HCD]
    depends on [USB_ARCH_HAS_HCD]
    inherited [USB_SUPPORT && USB_ARCH_HAS_HCD]
    config USB_DEBUG boolean {
     prompt "USB verbose debug messages" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_DEVICEFS boolean {
     prompt "USB device filesystem" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_DEVICE_CLASS boolean {
     prompt "USB device class-devices (DEPRECATED)" if [USB_SUPPORT && USB]
     depends on [USB]
     default [y] if [USB_SUPPORT && USB]
     inherited [USB_SUPPORT && USB]
    }
    config USB_DYNAMIC_MINORS boolean {
     prompt "Dynamic USB minor allocation (EXPERIMENTAL)" if [USB_SUPPORT && USB && EXPERIMENTAL]
     depends on [USB && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB && EXPERIMENTAL]
    }
    config USB_SUSPEND boolean {
     prompt "USB selective suspend/resume and wakeup (EXPERIMENTAL)" if [USB_SUPPORT && USB && PM && EXPERIMENTAL]
     depends on [USB && PM && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB && PM && EXPERIMENTAL]
    }
    config USB_PERSIST boolean {
     prompt "USB device persistence during system suspend (DANGEROUS)" if [USB_SUPPORT && USB && PM && EXPERIMENTAL]
     depends on [USB && PM && EXPERIMENTAL]
     default [n] if [USB_SUPPORT && USB && PM && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB && PM && EXPERIMENTAL]
    }
    config USB_OTG boolean {
     depends on [USB && EXPERIMENTAL]
     select USB_SUSPEND if [USB_SUPPORT && USB && EXPERIMENTAL]
     default [n] if [USB_SUPPORT && USB && EXPERIMENTAL]
     prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
     depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB && EXPERIMENTAL]
    }
    config USB_OTG_WHITELIST boolean {
     prompt "Rely on OTG Targeted Peripherals List" if [USB_SUPPORT && USB_OTG]
     depends on [USB_OTG]
     default [y] if [USB_SUPPORT && USB_OTG]
     inherited [USB_SUPPORT && USB_OTG]
    }
    config USB_OTG_BLACKLIST_HUB boolean {
     prompt "Disable external hubs" if [USB_SUPPORT && USB_OTG]
     depends on [USB_OTG]
     inherited [USB_SUPPORT && USB_OTG]
    }
    config USB_EHCI_HCD tristate {
     prompt "EHCI HCD (USB 2.0) support" if [USB_SUPPORT && USB && USB_ARCH_HAS_EHCI]
     depends on [USB && USB_ARCH_HAS_EHCI]
     inherited [USB_SUPPORT && USB && USB_ARCH_HAS_EHCI]
     config USB_EHCI_SPLIT_ISO boolean {
      prompt "Full speed ISO transactions (EXPERIMENTAL)" if [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
      depends on [USB_EHCI_HCD && EXPERIMENTAL]
      default [n] if [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
     }
     config USB_EHCI_ROOT_HUB_TT boolean {
      prompt "Root Hub Transaction Translators (EXPERIMENTAL)" if [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
      depends on [USB_EHCI_HCD && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
     }
     config USB_EHCI_TT_NEWSCHED boolean {
      prompt "Improved Transaction Translator scheduling (EXPERIMENTAL)" if [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
      depends on [USB_EHCI_HCD && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB_EHCI_HCD && EXPERIMENTAL]
     }
     config USB_EHCI_BIG_ENDIAN_MMIO boolean {
      depends on [USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX)]
      default [y] if [USB_SUPPORT && USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX)]
      inherited [USB_SUPPORT && USB_EHCI_HCD && (PPC_CELLEB || PPC_PS3 || 440EPX)]
     }
     config USB_EHCI_BIG_ENDIAN_DESC boolean {
      depends on [USB_EHCI_HCD && 440EPX]
      default [y] if [USB_SUPPORT && USB_EHCI_HCD && 440EPX]
      inherited [USB_SUPPORT && USB_EHCI_HCD && 440EPX]
     }
    }
   }
   config USB_EHCI_FSL boolean {
    select USB_EHCI_ROOT_HUB_TT if [USB_SUPPORT]
    default [y] if [USB_SUPPORT && (MPC834x || PPC_MPC831x)]
    inherited [USB_SUPPORT]
   }
   config USB_ISP116X_HCD tristate {
    prompt "ISP116X HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_OHCI_HCD tristate {
    prompt "OHCI HCD support" if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI]
    depends on [USB && USB_ARCH_HAS_OHCI]
    select ISP1301_OMAP if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI && (MACH_OMAP_H2 || MACH_OMAP_H3)]
    select I2C if [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI && ARCH_PNX4008]
    inherited [USB_SUPPORT && USB && USB_ARCH_HAS_OHCI]
    config USB_OHCI_HCD_PPC_SOC boolean {
     prompt "OHCI support for on-chip PPC USB controller" if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     depends on [USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     default [y] if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     select USB_OHCI_BIG_ENDIAN_DESC if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     select USB_OHCI_BIG_ENDIAN_MMIO if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     inherited [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
    }
    config USB_OHCI_HCD_PPC_OF boolean {
     prompt "OHCI support for PPC USB controller on OF platform bus" if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     depends on [USB_OHCI_HCD && PPC_OF]
     default [y] if [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     inherited [USB_SUPPORT && USB_OHCI_HCD && PPC_OF]
     config USB_OHCI_HCD_PPC_OF_BE boolean {
      prompt "Support big endian HC" if [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
      depends on [USB_OHCI_HCD_PPC_OF]
      default [y] if [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
      select USB_OHCI_BIG_ENDIAN_DESC if [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
      select USB_OHCI_BIG_ENDIAN_MMIO if [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
      inherited [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
     }
     config USB_OHCI_HCD_PPC_OF_LE boolean {
      prompt "Support little endian HC" if [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
      depends on [USB_OHCI_HCD_PPC_OF]
      default [n] if [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
      select USB_OHCI_LITTLE_ENDIAN if [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
      inherited [USB_SUPPORT && USB_OHCI_HCD_PPC_OF]
     }
    }
    config USB_OHCI_HCD_PCI boolean {
     prompt "OHCI support for PCI-bus USB controllers" if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     depends on [USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     default [y] if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     select USB_OHCI_LITTLE_ENDIAN if [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
     inherited [USB_SUPPORT && USB_OHCI_HCD && PCI && (STB03xxx || PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)]
    }
    config USB_OHCI_HCD_SSB boolean {
     prompt "OHCI support for Broadcom SSB OHCI core" if [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
     depends on [USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_OHCI_HCD && (SSB="y" || SSB="USB_OHCI_HCD") && EXPERIMENTAL]
    }
    config USB_OHCI_BIG_ENDIAN_DESC boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB_OHCI_HCD]
    }
    config USB_OHCI_BIG_ENDIAN_MMIO boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB_OHCI_HCD]
    }
    config USB_OHCI_LITTLE_ENDIAN boolean {
     depends on [USB_OHCI_HCD]
     default [n] if [USB_SUPPORT && USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)]
     default [y] if [USB_SUPPORT && USB_OHCI_HCD]
     inherited [USB_SUPPORT && USB_OHCI_HCD]
    }
   }
   config USB_UHCI_HCD tristate {
    prompt "UHCI HCD (most Intel and VIA) support" if [USB_SUPPORT && USB && PCI]
    depends on [USB && PCI]
    inherited [USB_SUPPORT && USB && PCI]
   }
   config USB_U132_HCD tristate {
    prompt "Elan U132 Adapter Host Controller" if [USB_SUPPORT && USB && USB_FTDI_ELAN]
    depends on [USB && USB_FTDI_ELAN]
    default [M] if [USB_SUPPORT && USB && USB_FTDI_ELAN]
    inherited [USB_SUPPORT && USB && USB_FTDI_ELAN]
   }
   config USB_SL811_HCD tristate {
    prompt "SL811HS HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
    config USB_SL811_CS tristate {
     prompt "CF/PCMCIA support for SL811HS HCD" if [USB_SUPPORT && USB_SL811_HCD && PCMCIA]
     depends on [USB_SL811_HCD && PCMCIA]
     inherited [USB_SUPPORT && USB_SL811_HCD && PCMCIA]
    }
   }
   config USB_R8A66597_HCD tristate {
    prompt "R8A66597 HCD support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_ACM tristate {
    prompt "USB Modem (CDC ACM) support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_PRINTER tristate {
    prompt "USB Printer support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_STORAGE tristate {
    prompt "USB Mass Storage support" if [USB_SUPPORT && USB && SCSI]
    depends on [USB && SCSI]
    inherited [USB_SUPPORT && USB && SCSI]
    config USB_STORAGE_DEBUG boolean {
     prompt "USB Mass Storage verbose debug" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_DATAFAB boolean {
     prompt "Datafab Compact Flash Reader support (EXPERIMENTAL)" if [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
     depends on [USB_STORAGE && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
    }
    config USB_STORAGE_FREECOM boolean {
     prompt "Freecom USB/ATAPI Bridge support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_ISD200 boolean {
     prompt "ISD-200 USB/ATA Bridge support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_DPCM boolean {
     prompt "Microtech/ZiO! CompactFlash/SmartMedia support" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
    config USB_STORAGE_USBAT boolean {
     prompt "USBAT/USBAT02-based storage support (EXPERIMENTAL)" if [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
     depends on [USB_STORAGE && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
    }
    config USB_STORAGE_SDDR09 boolean {
     prompt "SanDisk SDDR-09 (and other SmartMedia) support (EXPERIMENTAL)" if [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
     depends on [USB_STORAGE && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
    }
    config USB_STORAGE_SDDR55 boolean {
     prompt "SanDisk SDDR-55 SmartMedia support (EXPERIMENTAL)" if [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
     depends on [USB_STORAGE && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
    }
    config USB_STORAGE_JUMPSHOT boolean {
     prompt "Lexar Jumpshot Compact Flash Reader (EXPERIMENTAL)" if [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
     depends on [USB_STORAGE && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
    }
    config USB_STORAGE_ALAUDA boolean {
     prompt "Olympus MAUSB-10/Fuji DPC-R1 support (EXPERIMENTAL)" if [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
     depends on [USB_STORAGE && EXPERIMENTAL]
     inherited [USB_SUPPORT && USB_STORAGE && EXPERIMENTAL]
    }
    config USB_STORAGE_ONETOUCH boolean {
     prompt "Support OneTouch Button on Maxtor Hard Drives (EXPERIMENTAL)" if [USB_SUPPORT && USB_STORAGE && INPUT_EVDEV && EXPERIMENTAL && !PM]
     depends on [USB_STORAGE && INPUT_EVDEV && EXPERIMENTAL && !PM]
     inherited [USB_SUPPORT && USB_STORAGE && INPUT_EVDEV && EXPERIMENTAL && !PM]
    }
    config USB_STORAGE_KARMA boolean {
     prompt "Support for Rio Karma music player" if [USB_SUPPORT && USB_STORAGE]
     depends on [USB_STORAGE]
     inherited [USB_SUPPORT && USB_STORAGE]
    }
   }
   config USB_LIBUSUAL boolean {
    prompt "The shared table of common (or usual) storage devices" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_MDC800 tristate {
    prompt "USB Mustek MDC800 Digital Camera support (EXPERIMENTAL)" if [USB_SUPPORT && USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && EXPERIMENTAL]
   }
   config USB_MICROTEK tristate {
    prompt "Microtek X6USB scanner support" if [USB_SUPPORT && USB && SCSI]
    depends on [USB && SCSI]
    inherited [USB_SUPPORT && USB && SCSI]
   }
   config USB_MON boolean {
    prompt "USB Monitor" if [USB_SUPPORT && USB]
    depends on [USB]
    default [y] if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_USS720 tristate {
    prompt "USS720 parport driver" if [USB_SUPPORT && USB && PARPORT]
    depends on [USB && PARPORT]
    select PARPORT_NOT_PC if [USB_SUPPORT && USB && PARPORT]
    inherited [USB_SUPPORT && USB && PARPORT]
   }
   menu "USB Serial Converter support" {
    depends on [USB_SUPPORT && USB!="n"]
    config USB_SERIAL tristate {
     prompt "USB Serial Converter support" if [USB_SUPPORT && USB]
     depends on [USB]
     inherited [USB_SUPPORT && USB]
     config USB_SERIAL_CONSOLE boolean {
      prompt "USB Serial Console device support (EXPERIMENTAL)" if [USB_SUPPORT && USB && USB_SERIAL="y" && EXPERIMENTAL]
      depends on [USB_SERIAL="y" && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB && USB_SERIAL="y" && EXPERIMENTAL]
     }
     config USB_SERIAL_GENERIC boolean {
      prompt "USB Generic Serial Driver" if [USB_SUPPORT && USB && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB && USB_SERIAL]
     }
     config USB_SERIAL_AIRCABLE tristate {
      prompt "USB AIRcable Bluetooth Dongle Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_AIRPRIME tristate {
      prompt "USB AirPrime CDMA Wireless Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_ARK3116 tristate {
      prompt "USB ARK Micro 3116 USB Serial Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_BELKIN tristate {
      prompt "USB Belkin and Peracom Single Port Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_CH341 tristate {
      prompt "USB Winchiphead CH341 Single Port Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_WHITEHEAT tristate {
      prompt "USB ConnectTech WhiteHEAT Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_DIGI_ACCELEPORT tristate {
      prompt "USB Digi International AccelePort USB Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_CP2101 tristate {
      prompt "USB CP2101 UART Bridge Controller" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_CYPRESS_M8 tristate {
      prompt "USB Cypress M8 USB Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_EMPEG tristate {
      prompt "USB Empeg empeg-car Mark I/II Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_FTDI_SIO tristate {
      prompt "USB FTDI Single Port Serial Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_FUNSOFT tristate {
      prompt "USB Fundamental Software Dongle Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_VISOR tristate {
      prompt "USB Handspring Visor / Palm m50x / Sony Clie Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_IPAQ tristate {
      prompt "USB PocketPC PDA Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_IR tristate {
      prompt "USB IR Dongle Serial Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_EDGEPORT tristate {
      prompt "USB Inside Out Edgeport Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_EDGEPORT_TI tristate {
      prompt "USB Inside Out Edgeport Serial Driver (TI devices)" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_GARMIN tristate {
      prompt "USB Garmin GPS driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_IPW tristate {
      prompt "USB IPWireless (3G UMTS TDD) Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_KEYSPAN_PDA tristate {
      prompt "USB Keyspan PDA Single Port Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_KEYSPAN tristate {
      prompt "USB Keyspan USA-xxx Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
      config USB_SERIAL_KEYSPAN_MPR boolean {
       prompt "USB Keyspan MPR Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA28 boolean {
       prompt "USB Keyspan USA-28 Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA28X boolean {
       prompt "USB Keyspan USA-28X Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA28XA boolean {
       prompt "USB Keyspan USA-28XA Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA28XB boolean {
       prompt "USB Keyspan USA-28XB Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA19 boolean {
       prompt "USB Keyspan USA-19 Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA18X boolean {
       prompt "USB Keyspan USA-18X Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA19W boolean {
       prompt "USB Keyspan USA-19W Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA19QW boolean {
       prompt "USB Keyspan USA-19QW Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA19QI boolean {
       prompt "USB Keyspan USA-19QI Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA49W boolean {
       prompt "USB Keyspan USA-49W Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
      config USB_SERIAL_KEYSPAN_USA49WLC boolean {
       prompt "USB Keyspan USA-49WLC Firmware" if [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
       depends on [USB_SERIAL_KEYSPAN]
       inherited [USB_SUPPORT && USB && USB_SERIAL_KEYSPAN]
      }
     }
     config USB_SERIAL_KLSI tristate {
      prompt "USB KL5KUSB105 (Palmconnect) Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_KOBIL_SCT tristate {
      prompt "USB KOBIL chipcard reader" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_MCT_U232 tristate {
      prompt "USB MCT Single Port Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_MOS7720 tristate {
      prompt "USB Moschip 7720 Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_MOS7840 tristate {
      prompt "USB Moschip 7840/7820 USB Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_NAVMAN tristate {
      prompt "USB Navman GPS device" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_PL2303 tristate {
      prompt "USB Prolific 2303 Single Port Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_OTI6858 tristate {
      prompt "USB Ours Technology Inc. OTi-6858 USB To RS232 Bridge Controller (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_HP4X tristate {
      prompt "USB HP4x Calculators support" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_SAFE tristate {
      prompt "USB Safe Serial (Encapsulated) Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      config USB_SERIAL_SAFE_PADDED boolean {
       prompt "USB Secure Encapsulated Driver - Padded" if [USB_SUPPORT && USB && USB_SERIAL_SAFE]
       depends on [USB_SERIAL_SAFE]
       inherited [USB_SUPPORT && USB && USB_SERIAL_SAFE]
      }
     }
     config USB_SERIAL_SIERRAWIRELESS tristate {
      prompt "USB Sierra Wireless Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_TI tristate {
      prompt "USB TI 3410/5052 Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_CYBERJACK tristate {
      prompt "USB REINER SCT cyberJack pinpad/e-com chipcard reader (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_XIRCOM tristate {
      prompt "USB Xircom / Entregra Single Port Serial Driver" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_OPTION tristate {
      prompt "USB driver for GSM and CDMA modems" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
     config USB_SERIAL_OMNINET tristate {
      prompt "USB ZyXEL omni.net LCD Plus Driver (EXPERIMENTAL)" if [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
      depends on [USB_SERIAL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL && EXPERIMENTAL]
     }
     config USB_SERIAL_DEBUG tristate {
      prompt "USB Debugging Device" if [USB_SUPPORT && USB!="n" && USB_SERIAL]
      depends on [USB_SERIAL]
      inherited [USB_SUPPORT && USB!="n" && USB_SERIAL]
     }
    }
    config USB_EZUSB boolean {
     depends on [USB_SERIAL_KEYSPAN_PDA || USB_SERIAL_XIRCOM || USB_SERIAL_KEYSPAN || USB_SERIAL_WHITEHEAT]
     default [y] if [USB_SUPPORT && USB && (USB_SERIAL_KEYSPAN_PDA || USB_SERIAL_XIRCOM || USB_SERIAL_KEYSPAN || USB_SERIAL_WHITEHEAT)]
     inherited [USB_SUPPORT && USB && (USB_SERIAL_KEYSPAN_PDA || USB_SERIAL_XIRCOM || USB_SERIAL_KEYSPAN || USB_SERIAL_WHITEHEAT)]
    }
   }
   config USB_EMI62 tristate {
    prompt "EMI 6|2m USB Audio interface support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_EMI26 tristate {
    prompt "EMI 2|6 USB Audio interface support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_ADUTUX tristate {
    prompt "ADU devices from Ontrak Control Systems (EXPERIMENTAL)" if [USB_SUPPORT && USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && EXPERIMENTAL]
   }
   config USB_AUERSWALD tristate {
    prompt "USB Auerswald ISDN support (EXPERIMENTAL)" if [USB_SUPPORT && USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && EXPERIMENTAL]
   }
   config USB_RIO500 tristate {
    prompt "USB Diamond Rio500 support (EXPERIMENTAL)" if [USB_SUPPORT && USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && EXPERIMENTAL]
   }
   config USB_LEGOTOWER tristate {
    prompt "USB Lego Infrared Tower support (EXPERIMENTAL)" if [USB_SUPPORT && USB && EXPERIMENTAL]
    depends on [USB && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && EXPERIMENTAL]
   }
   config USB_LCD tristate {
    prompt "USB LCD driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_BERRY_CHARGE tristate {
    prompt "USB BlackBerry recharge support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_LED tristate {
    prompt "USB LED driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_CYPRESS_CY7C63 tristate {
    prompt "Cypress CY7C63xxx USB driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_CYTHERM tristate {
    prompt "Cypress USB thermometer driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_PHIDGET tristate {
    prompt "USB Phidgets drivers" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
    config USB_PHIDGETKIT tristate {
     prompt "USB PhidgetInterfaceKit support" if [USB_SUPPORT && USB_PHIDGET]
     depends on [USB_PHIDGET]
     inherited [USB_SUPPORT && USB_PHIDGET]
    }
    config USB_PHIDGETMOTORCONTROL tristate {
     prompt "USB PhidgetMotorControl support" if [USB_SUPPORT && USB_PHIDGET]
     depends on [USB_PHIDGET]
     inherited [USB_SUPPORT && USB_PHIDGET]
    }
    config USB_PHIDGETSERVO tristate {
     prompt "USB PhidgetServo support" if [USB_SUPPORT && USB_PHIDGET]
     depends on [USB_PHIDGET]
     inherited [USB_SUPPORT && USB_PHIDGET]
    }
   }
   config USB_IDMOUSE tristate {
    prompt "Siemens ID USB Mouse Fingerprint sensor support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_FTDI_ELAN tristate {
    prompt "Elan PCMCIA CardBus Adapter USB Client" if [USB_SUPPORT && USB]
    depends on [USB]
    default [M] if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_APPLEDISPLAY tristate {
    prompt "Apple Cinema Display support" if [USB_SUPPORT && USB]
    depends on [USB]
    select BACKLIGHT_LCD_SUPPORT if [USB_SUPPORT && USB]
    select BACKLIGHT_CLASS_DEVICE if [USB_SUPPORT && USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_SISUSBVGA tristate {
    prompt "USB 2.0 SVGA dongle support (Net2280/SiS315)" if [USB_SUPPORT && USB && USB_EHCI_HCD]
    depends on [USB && USB_EHCI_HCD]
    inherited [USB_SUPPORT && USB && USB_EHCI_HCD]
    config USB_SISUSBVGA_CON boolean {
     prompt "Text console and mode switching support" if [USB_SUPPORT && VT && USB_SISUSBVGA]
     depends on [VT]
     select FONT_8x16 if [USB_SUPPORT && VT]
     inherited [USB_SUPPORT && VT]
    }
   }
   config USB_LD tristate {
    prompt "USB LD driver" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_TRANCEVIBRATOR tristate {
    prompt "PlayStation 2 Trance Vibrator driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_IOWARRIOR tristate {
    prompt "IO Warrior driver support" if [USB_SUPPORT && USB]
    depends on [USB]
    inherited [USB_SUPPORT && USB]
   }
   config USB_TEST tristate {
    prompt "USB testing driver (DEVELOPMENT)" if [USB_SUPPORT && USB && USB_DEVICEFS && EXPERIMENTAL]
    depends on [USB && USB_DEVICEFS && EXPERIMENTAL]
    inherited [USB_SUPPORT && USB && USB_DEVICEFS && EXPERIMENTAL]
   }
   menu "USB DSL modem support" {
    depends on [USB_SUPPORT && USB]
    config USB_ATM tristate {
     prompt "USB DSL modem support" if [USB_SUPPORT && USB && ATM]
     depends on [USB && ATM]
     select CRC32 if [USB_SUPPORT && USB && ATM]
     default [n] if [USB_SUPPORT && USB && ATM]
     inherited [USB_SUPPORT && USB && ATM]
     config USB_SPEEDTOUCH tristate {
      prompt "Speedtouch USB support" if [USB_SUPPORT && USB && USB_ATM]
      depends on [USB_ATM]
      select FW_LOADER if [USB_SUPPORT && USB && USB_ATM]
      inherited [USB_SUPPORT && USB && USB_ATM]
     }
     config USB_CXACRU tristate {
      prompt "Conexant AccessRunner USB support" if [USB_SUPPORT && USB && USB_ATM]
      depends on [USB_ATM]
      select FW_LOADER if [USB_SUPPORT && USB && USB_ATM]
      inherited [USB_SUPPORT && USB && USB_ATM]
     }
     config USB_UEAGLEATM tristate {
      prompt "ADI 930 and eagle USB DSL modem" if [USB_SUPPORT && USB && USB_ATM]
      depends on [USB_ATM]
      select FW_LOADER if [USB_SUPPORT && USB && USB_ATM]
      inherited [USB_SUPPORT && USB && USB_ATM]
     }
     config USB_XUSBATM tristate {
      prompt "Other USB DSL modem support" if [USB_SUPPORT && USB && USB_ATM]
      depends on [USB_ATM]
      inherited [USB_SUPPORT && USB && USB_ATM]
     }
    }
   }
   menu "USB Gadget Support" {
    depends on [USB_SUPPORT]
    config USB_GADGET tristate {
     prompt "Support for USB Gadgets" if [USB_SUPPORT]
     inherited [USB_SUPPORT]
     config USB_GADGET_DEBUG boolean {
      prompt "Debugging messages" if [USB_SUPPORT && USB_GADGET && DEBUG_KERNEL && EXPERIMENTAL]
      depends on [USB_GADGET && DEBUG_KERNEL && EXPERIMENTAL]
      inherited [USB_SUPPORT && USB_GADGET && DEBUG_KERNEL && EXPERIMENTAL]
     }
     config USB_GADGET_DEBUG_FILES boolean {
      prompt "Debugging information files" if [USB_SUPPORT && USB_GADGET && PROC_FS]
      depends on [USB_GADGET && PROC_FS]
      inherited [USB_SUPPORT && USB_GADGET && PROC_FS]
     }
     config USB_GADGET_DEBUG_FS boolean {
      prompt "Debugging information files in debugfs" if [USB_SUPPORT && USB_GADGET && DEBUG_FS]
      depends on [USB_GADGET && DEBUG_FS]
      inherited [USB_SUPPORT && USB_GADGET && DEBUG_FS]
     }
    }
    config USB_GADGET_SELECTED boolean {
     inherited [USB_SUPPORT]
    }
    choice boolean {
     prompt "USB Peripheral Controller" if [USB_SUPPORT && USB_GADGET]
     depends on [USB_GADGET]
     config USB_GADGET_AMD5536UDC boolean {
      prompt "AMD5536 UDC" if [<choice> && PCI]
      depends on [PCI]
      select USB_GADGET_DUALSPEED if [<choice> && PCI]
      inherited [<choice> && PCI]
      config USB_AMD5536UDC tristate {
       depends on [USB_GADGET_AMD5536UDC]
       default [USB_GADGET] if [<choice> && USB_GADGET_AMD5536UDC]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_AMD5536UDC]
       inherited [<choice> && USB_GADGET_AMD5536UDC]
      }
     }
     config USB_GADGET_ATMEL_USBA boolean {
      prompt "Atmel USBA" if [<choice> && AVR32]
      select USB_GADGET_DUALSPEED if [<choice> && AVR32]
      depends on [AVR32]
      inherited [<choice> && AVR32]
      config USB_ATMEL_USBA tristate {
       depends on [USB_GADGET_ATMEL_USBA]
       default [USB_GADGET] if [<choice> && USB_GADGET_ATMEL_USBA]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_ATMEL_USBA]
       inherited [<choice> && USB_GADGET_ATMEL_USBA]
      }
     }
     config USB_GADGET_FSL_USB2 boolean {
      prompt "Freescale Highspeed USB DR Peripheral Controller" if [<choice> && (MPC834x || PPC_MPC831x)]
      depends on [MPC834x || PPC_MPC831x]
      select USB_GADGET_DUALSPEED if [<choice> && (MPC834x || PPC_MPC831x)]
      inherited [<choice> && (MPC834x || PPC_MPC831x)]
      config USB_FSL_USB2 tristate {
       depends on [USB_GADGET_FSL_USB2]
       default [USB_GADGET] if [<choice> && USB_GADGET_FSL_USB2]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_FSL_USB2]
       inherited [<choice> && USB_GADGET_FSL_USB2]
      }
     }
     config USB_GADGET_NET2280 boolean {
      prompt "NetChip 228x" if [<choice> && PCI]
      depends on [PCI]
      select USB_GADGET_DUALSPEED if [<choice> && PCI]
      inherited [<choice> && PCI]
      config USB_NET2280 tristate {
       depends on [USB_GADGET_NET2280]
       default [USB_GADGET] if [<choice> && USB_GADGET_NET2280]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_NET2280]
       inherited [<choice> && USB_GADGET_NET2280]
      }
     }
     config USB_GADGET_PXA2XX boolean {
      prompt "PXA 25x or IXP 4xx" if [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
      depends on [ARCH_PXA && PXA25x || ARCH_IXP4XX]
      inherited [<choice> && (ARCH_PXA && PXA25x || ARCH_IXP4XX)]
      config USB_PXA2XX tristate {
       depends on [USB_GADGET_PXA2XX]
       default [USB_GADGET] if [<choice> && USB_GADGET_PXA2XX]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_PXA2XX]
       inherited [<choice> && USB_GADGET_PXA2XX]
      }
      config USB_PXA2XX_SMALL boolean {
       depends on [USB_GADGET_PXA2XX]
       default [n] if [<choice> && USB_GADGET_PXA2XX && USB_ETH_RNDIS]
       default [y] if [<choice> && USB_GADGET_PXA2XX && USB_ZERO]
       default [y] if [<choice> && USB_GADGET_PXA2XX && USB_ETH]
       default [y] if [<choice> && USB_GADGET_PXA2XX && USB_G_SERIAL]
       inherited [<choice> && USB_GADGET_PXA2XX]
      }
     }
     config USB_GADGET_M66592 boolean {
      prompt "Renesas M66592 USB Peripheral Controller" if [<choice>]
      select USB_GADGET_DUALSPEED if [<choice>]
      inherited [<choice>]
      config USB_M66592 tristate {
       depends on [USB_GADGET_M66592]
       default [USB_GADGET] if [<choice> && USB_GADGET_M66592]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_M66592]
       inherited [<choice> && USB_GADGET_M66592]
      }
     }
     config USB_GADGET_GOKU boolean {
      prompt "Toshiba TC86C001 'Goku-S'" if [<choice> && PCI]
      depends on [PCI]
      inherited [<choice> && PCI]
      config USB_GOKU tristate {
       depends on [USB_GADGET_GOKU]
       default [USB_GADGET] if [<choice> && USB_GADGET_GOKU]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_GOKU]
       inherited [<choice> && USB_GADGET_GOKU]
      }
     }
     config USB_GADGET_LH7A40X boolean {
      prompt "LH7A40X" if [<choice> && ARCH_LH7A40X]
      depends on [ARCH_LH7A40X]
      inherited [<choice> && ARCH_LH7A40X]
      config USB_LH7A40X tristate {
       depends on [USB_GADGET_LH7A40X]
       default [USB_GADGET] if [<choice> && USB_GADGET_LH7A40X]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_LH7A40X]
       inherited [<choice> && USB_GADGET_LH7A40X]
      }
     }
     config USB_GADGET_OMAP boolean {
      prompt "OMAP USB Device Controller" if [<choice> && ARCH_OMAP]
      depends on [ARCH_OMAP]
      select ISP1301_OMAP if [<choice> && ARCH_OMAP && (MACH_OMAP_H2 || MACH_OMAP_H3)]
      inherited [<choice> && ARCH_OMAP]
      config USB_OMAP tristate {
       depends on [USB_GADGET_OMAP]
       default [USB_GADGET] if [<choice> && USB_GADGET_OMAP]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_OMAP]
       inherited [<choice> && USB_GADGET_OMAP]
      }
      config USB_OTG boolean {
       depends on [USB && EXPERIMENTAL]
       select USB_SUSPEND if [USB_SUPPORT && USB && EXPERIMENTAL]
       default [n] if [USB_SUPPORT && USB && EXPERIMENTAL]
       prompt "OTG Support" if [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
       depends on [USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
       inherited [<choice> && USB_GADGET_OMAP && ARCH_OMAP_OTG && USB_OHCI_HCD]
      }
     }
     config USB_GADGET_S3C2410 boolean {
      prompt "S3C2410 USB Device Controller" if [<choice> && ARCH_S3C2410]
      depends on [ARCH_S3C2410]
      inherited [<choice> && ARCH_S3C2410]
      config USB_S3C2410 tristate {
       depends on [USB_GADGET_S3C2410]
       default [USB_GADGET] if [<choice> && USB_GADGET_S3C2410]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_S3C2410]
       inherited [<choice> && USB_GADGET_S3C2410]
      }
      config USB_S3C2410_DEBUG boolean {
       prompt "S3C2410 udc debug messages" if [<choice> && USB_GADGET_S3C2410]
       depends on [USB_GADGET_S3C2410]
       inherited [<choice> && USB_GADGET_S3C2410]
      }
     }
     config USB_GADGET_AT91 boolean {
      prompt "AT91 USB Device Port" if [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL]
      depends on [ARCH_AT91 && !ARCH_AT91SAM9RL]
      select USB_GADGET_SELECTED if [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL]
      inherited [<choice> && ARCH_AT91 && !ARCH_AT91SAM9RL]
      config USB_AT91 tristate {
       depends on [USB_GADGET_AT91]
       default [USB_GADGET] if [<choice> && USB_GADGET_AT91]
       inherited [<choice> && USB_GADGET_AT91]
      }
     }
     config USB_GADGET_DUMMY_HCD boolean {
      prompt "Dummy HCD (DEVELOPMENT)" if [<choice> && (USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
      depends on [(USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
      select USB_GADGET_DUALSPEED if [<choice> && (USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
      inherited [<choice> && (USB="y" || USB="m" && USB_GADGET="m") && EXPERIMENTAL]
      config USB_DUMMY_HCD tristate {
       depends on [USB_GADGET_DUMMY_HCD]
       default [USB_GADGET] if [<choice> && USB_GADGET_DUMMY_HCD]
       select USB_GADGET_SELECTED if [<choice> && USB_GADGET_DUMMY_HCD]
       inherited [<choice> && USB_GADGET_DUMMY_HCD]
      }
     }
    }
    config USB_GADGET_DUALSPEED boolean {
     depends on [USB_GADGET]
     default [n] if [USB_SUPPORT && USB_GADGET]
     inherited [USB_SUPPORT && USB_GADGET]
    }
    choice tristate {
     prompt "USB Gadget Drivers" if [USB_SUPPORT && USB_GADGET && USB_GADGET_SELECTED]
     depends on [USB_GADGET && USB_GADGET_SELECTED]
     default [USB_ETH] if [USB_SUPPORT && USB_GADGET && USB_GADGET_SELECTED]
     config USB_ZERO tristate {
      prompt "Gadget Zero (DEVELOPMENT)" if [<choice> && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      inherited [<choice> && EXPERIMENTAL]
      config USB_ZERO_HNPTEST boolean {
       prompt "HNP Test Device" if [<choice> && USB_ZERO && USB_OTG]
       depends on [USB_ZERO && USB_OTG]
       inherited [<choice> && USB_ZERO && USB_OTG]
      }
     }
     config USB_ETH tristate {
      prompt "Ethernet Gadget (with CDC Ethernet support)" if [<choice> && NET]
      depends on [NET]
      inherited [<choice> && NET]
      config USB_ETH_RNDIS boolean {
       prompt "RNDIS support (EXPERIMENTAL)" if [<choice> && USB_ETH && EXPERIMENTAL]
       depends on [USB_ETH && EXPERIMENTAL]
       default [y] if [<choice> && USB_ETH && EXPERIMENTAL]
       inherited [<choice> && USB_ETH && EXPERIMENTAL]
      }
     }
     config USB_GADGETFS tristate {
      prompt "Gadget Filesystem (EXPERIMENTAL)" if [<choice> && EXPERIMENTAL]
      depends on [EXPERIMENTAL]
      inherited [<choice> && EXPERIMENTAL]
     }
     config USB_FILE_STORAGE tristate {
      prompt "File-backed Storage Gadget" if [<choice> && BLOCK]
      depends on [BLOCK]
      inherited [<choice> && BLOCK]
      config USB_FILE_STORAGE_TEST boolean {
       prompt "File-backed Storage Gadget testing version" if [<choice> && USB_FILE_STORAGE]
       depends on [USB_FILE_STORAGE]
       default [n] if [<choice> && USB_FILE_STORAGE]
       inherited [<choice> && USB_FILE_STORAGE]
      }
     }
     config USB_G_SERIAL tristate {
      prompt "Serial Gadget (with CDC ACM support)" if [<choice>]
      inherited [<choice>]
     }
     config USB_MIDI_GADGET tristate {
      prompt "MIDI Gadget (EXPERIMENTAL)" if [<choice> && SND && EXPERIMENTAL]
      depends on [SND && EXPERIMENTAL]
      select SND_RAWMIDI if [<choice> && SND && EXPERIMENTAL]
      inherited [<choice> && SND && EXPERIMENTAL]
     }
    }
   }
  }
 }
 menuconfig MMC tristate {
  prompt "MMC/SD card support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  config MMC_DEBUG boolean {
   prompt "MMC debugging" if [MMC]
   depends on [MMC]
   inherited [MMC]
  }
  if [MMC] {
   config MMC_UNSAFE_RESUME boolean {
    prompt "Allow unsafe resume (DANGEROUS)" if [MMC]
    inherited [MMC]
   }
   config MMC_BLOCK tristate {
    prompt "MMC block device driver" if [MMC && BLOCK]
    depends on [BLOCK]
    default [y] if [MMC && BLOCK]
    inherited [MMC && BLOCK]
    config MMC_BLOCK_BOUNCE boolean {
     prompt "Use bounce buffer for simple hosts" if [MMC && MMC_BLOCK]
     depends on [MMC_BLOCK]
     default [y] if [MMC && MMC_BLOCK]
     inherited [MMC && MMC_BLOCK]
    }
   }
   config SDIO_UART tristate {
    prompt "SDIO UART/GPS class support" if [MMC]
    depends on [MMC]
    inherited [MMC]
   }
   config MMC_ARMMMCI tristate {
    prompt "ARM AMBA Multimedia Card Interface support" if [MMC && ARM_AMBA]
    depends on [ARM_AMBA]
    inherited [MMC && ARM_AMBA]
   }
   config MMC_PXA tristate {
    prompt "Intel PXA25x/26x/27x Multimedia Card Interface support" if [MMC && ARCH_PXA]
    depends on [ARCH_PXA]
    inherited [MMC && ARCH_PXA]
   }
   config MMC_SDHCI tristate {
    prompt "Secure Digital Host Controller Interface support  (EXPERIMENTAL)" if [MMC && PCI && EXPERIMENTAL]
    depends on [PCI && EXPERIMENTAL]
    inherited [MMC && PCI && EXPERIMENTAL]
    config MMC_RICOH_MMC tristate {
     prompt "Ricoh MMC Controller Disabler  (EXPERIMENTAL)" if [MMC && PCI && EXPERIMENTAL && MMC_SDHCI]
     depends on [PCI && EXPERIMENTAL && MMC_SDHCI]
     inherited [MMC && PCI && EXPERIMENTAL && MMC_SDHCI]
    }
   }
   config MMC_OMAP tristate {
    prompt "TI OMAP Multimedia Card Interface support" if [MMC && ARCH_OMAP]
    depends on [ARCH_OMAP]
    select TPS65010 if [MMC && ARCH_OMAP && MACH_OMAP_H2]
    inherited [MMC && ARCH_OMAP]
   }
   config MMC_WBSD tristate {
    prompt "Winbond W83L51xD SD/MMC Card Interface support" if [MMC && ISA_DMA_API]
    depends on [ISA_DMA_API]
    inherited [MMC && ISA_DMA_API]
   }
   config MMC_AU1X tristate {
    prompt "Alchemy AU1XX0 MMC Card Interface support" if [MMC && SOC_AU1200]
    depends on [SOC_AU1200]
    inherited [MMC && SOC_AU1200]
   }
   config MMC_AT91 tristate {
    prompt "AT91 SD/MMC Card Interface support" if [MMC && ARCH_AT91]
    depends on [ARCH_AT91]
    inherited [MMC && ARCH_AT91]
   }
   config MMC_IMX tristate {
    prompt "Motorola i.MX Multimedia Card Interface support" if [MMC && ARCH_IMX]
    depends on [ARCH_IMX]
    inherited [MMC && ARCH_IMX]
   }
   config MMC_TIFM_SD tristate {
    prompt "TI Flash Media MMC/SD Interface support  (EXPERIMENTAL)" if [MMC && EXPERIMENTAL && PCI]
    depends on [EXPERIMENTAL && PCI]
    select TIFM_CORE if [MMC && EXPERIMENTAL && PCI]
    inherited [MMC && EXPERIMENTAL && PCI]
   }
   config MMC_SPI tristate {
    prompt "MMC/SD over SPI (EXPERIMENTAL)" if [MMC && SPI_MASTER && !HIGHMEM && EXPERIMENTAL]
    depends on [MMC && SPI_MASTER && !HIGHMEM && EXPERIMENTAL]
    select CRC7 if [MMC && SPI_MASTER && !HIGHMEM && EXPERIMENTAL]
    select CRC_ITU_T if [MMC && SPI_MASTER && !HIGHMEM && EXPERIMENTAL]
    inherited [MMC && SPI_MASTER && !HIGHMEM && EXPERIMENTAL]
   }
  }
 }
 menuconfig NEW_LEDS boolean {
  prompt "LED Support" if [HAS_IOMEM]
  depends on [HAS_IOMEM]
  inherited [HAS_IOMEM]
  if [NEW_LEDS] {
   config LEDS_CLASS tristate {
    prompt "LED Class Support" if [NEW_LEDS]
    inherited [NEW_LEDS]
   }
   config LEDS_CORGI tristate {
    prompt "LED Support for the Sharp SL-C7x0 series" if [NEW_LEDS && LEDS_CLASS && PXA_SHARP_C7xx]
    depends on [LEDS_CLASS && PXA_SHARP_C7xx]
    inherited [NEW_LEDS && LEDS_CLASS && PXA_SHARP_C7xx]
   }
   config LEDS_LOCOMO tristate {
    prompt "LED Support for Locomo device" if [NEW_LEDS && LEDS_CLASS && SHARP_LOCOMO]
    depends on [LEDS_CLASS && SHARP_LOCOMO]
    inherited [NEW_LEDS && LEDS_CLASS && SHARP_LOCOMO]
   }
   config LEDS_SPITZ tristate {
    prompt "LED Support for the Sharp SL-Cxx00 series" if [NEW_LEDS && LEDS_CLASS && PXA_SHARP_Cxx00]
    depends on [LEDS_CLASS && PXA_SHARP_Cxx00]
    inherited [NEW_LEDS && LEDS_CLASS && PXA_SHARP_Cxx00]
   }
   config LEDS_IXP4XX tristate {
    prompt "LED Support for GPIO connected LEDs on IXP4XX processors" if [NEW_LEDS && LEDS_CLASS && ARCH_IXP4XX]
    depends on [LEDS_CLASS && ARCH_IXP4XX]
    inherited [NEW_LEDS && LEDS_CLASS && ARCH_IXP4XX]
   }
   config LEDS_TOSA tristate {
    prompt "LED Support for the Sharp SL-6000 series" if [NEW_LEDS && LEDS_CLASS && PXA_SHARPSL]
    depends on [LEDS_CLASS && PXA_SHARPSL]
    inherited [NEW_LEDS && LEDS_CLASS && PXA_SHARPSL]
   }
   config LEDS_S3C24XX tristate {
    prompt "LED Support for Samsung S3C24XX GPIO LEDs" if [NEW_LEDS && LEDS_CLASS && ARCH_S3C2410]
    depends on [LEDS_CLASS && ARCH_S3C2410]
    inherited [NEW_LEDS && LEDS_CLASS && ARCH_S3C2410]
   }
   config LEDS_AMS_DELTA tristate {
    prompt "LED Support for the Amstrad Delta (E3)" if [NEW_LEDS && LEDS_CLASS && MACH_AMS_DELTA]
    depends on [LEDS_CLASS && MACH_AMS_DELTA]
    inherited [NEW_LEDS && LEDS_CLASS && MACH_AMS_DELTA]
   }
   config LEDS_NET48XX tristate {
    prompt "LED Support for Soekris net48xx series Error LED" if [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
    depends on [LEDS_CLASS && SCx200_GPIO]
    inherited [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
   }
   config LEDS_WRAP tristate {
    prompt "LED Support for the WRAP series LEDs" if [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
    depends on [LEDS_CLASS && SCx200_GPIO]
    inherited [NEW_LEDS && LEDS_CLASS && SCx200_GPIO]
   }
   config LEDS_H1940 tristate {
    prompt "LED Support for iPAQ H1940 device" if [NEW_LEDS && LEDS_CLASS && ARCH_H1940]
    depends on [LEDS_CLASS && ARCH_H1940]
    inherited [NEW_LEDS && LEDS_CLASS && ARCH_H1940]
   }
   config LEDS_COBALT_QUBE tristate {
    prompt "LED Support for the Cobalt Qube series front LED" if [NEW_LEDS && LEDS_CLASS && MIPS_COBALT]
    depends on [LEDS_CLASS && MIPS_COBALT]
    inherited [NEW_LEDS && LEDS_CLASS && MIPS_COBALT]
   }
   config LEDS_COBALT_RAQ boolean {
    prompt "LED Support for the Cobalt Raq series" if [NEW_LEDS && LEDS_CLASS && MIPS_COBALT]
    depends on [LEDS_CLASS && MIPS_COBALT]
    select LEDS_TRIGGERS if [NEW_LEDS && LEDS_CLASS && MIPS_COBALT]
    inherited [NEW_LEDS && LEDS_CLASS && MIPS_COBALT]
   }
   config LEDS_GPIO tristate {
    prompt "LED Support for GPIO connected LEDs" if [NEW_LEDS && LEDS_CLASS && GENERIC_GPIO]
    depends on [LEDS_CLASS && GENERIC_GPIO]
    inherited [NEW_LEDS && LEDS_CLASS && GENERIC_GPIO]
   }
   config LEDS_CM_X270 tristate {
    prompt "LED Support for the CM-X270 LEDs" if [NEW_LEDS && LEDS_CLASS && MACH_ARMCORE]
    depends on [LEDS_CLASS && MACH_ARMCORE]
    inherited [NEW_LEDS && LEDS_CLASS && MACH_ARMCORE]
   }
   config LEDS_TRIGGERS boolean {
    prompt "LED Trigger support" if [NEW_LEDS]
    inherited [NEW_LEDS]
    config LEDS_TRIGGER_TIMER tristate {
     prompt "LED Timer Trigger" if [NEW_LEDS && LEDS_TRIGGERS]
     depends on [LEDS_TRIGGERS]
     inherited [NEW_LEDS && LEDS_TRIGGERS]
    }
    config LEDS_TRIGGER_IDE_DISK boolean {
     prompt "LED IDE Disk Trigger" if [NEW_LEDS && LEDS_TRIGGERS && BLK_DEV_IDEDISK]
     depends on [LEDS_TRIGGERS && BLK_DEV_IDEDISK]
     inherited [NEW_LEDS && LEDS_TRIGGERS && BLK_DEV_IDEDISK]
    }
    config LEDS_TRIGGER_HEARTBEAT tristate {
     prompt "LED Heartbeat Trigger" if [NEW_LEDS && LEDS_TRIGGERS]
     depends on [LEDS_TRIGGERS]
     inherited [NEW_LEDS && LEDS_TRIGGERS]
    }
   }
  }
 }
 menuconfig INFINIBAND tristate {
  prompt "InfiniBand support" if [(PCI || BROKEN) && HAS_IOMEM]
  depends on [PCI || BROKEN]
  depends on [HAS_IOMEM]
  inherited [(PCI || BROKEN) && HAS_IOMEM]
  if [INFINIBAND] {
   config INFINIBAND_USER_MAD tristate {
    prompt "InfiniBand userspace MAD support" if [INFINIBAND]
    depends on [INFINIBAND]
    inherited [INFINIBAND]
   }
   config INFINIBAND_USER_ACCESS tristate {
    prompt "InfiniBand userspace access (verbs and CM)" if [INFINIBAND]
    inherited [INFINIBAND]
    config INFINIBAND_USER_MEM boolean {
     depends on [INFINIBAND_USER_ACCESS]
     default [y] if [INFINIBAND && INFINIBAND_USER_ACCESS]
     inherited [INFINIBAND && INFINIBAND_USER_ACCESS]
    }
   }
   config INFINIBAND_ADDR_TRANS boolean {
    depends on [INET]
    default [y] if [INFINIBAND && INET]
    inherited [INFINIBAND && INET]
   }
   config INFINIBAND_MTHCA tristate {
    prompt "Mellanox HCA support" if [INFINIBAND && PCI]
    depends on [PCI]
    inherited [INFINIBAND && PCI]
    config INFINIBAND_MTHCA_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND && INFINIBAND_MTHCA && EMBEDDED]
     depends on [INFINIBAND_MTHCA]
     default [y] if [INFINIBAND && INFINIBAND_MTHCA]
     inherited [INFINIBAND && INFINIBAND_MTHCA]
    }
   }
   config INFINIBAND_IPATH tristate {
    prompt "QLogic InfiniPath Driver" if [INFINIBAND && (PCI_MSI || HT_IRQ) && 64BIT && NET]
    depends on [(PCI_MSI || HT_IRQ) && 64BIT && NET]
    inherited [INFINIBAND && (PCI_MSI || HT_IRQ) && 64BIT && NET]
   }
   config INFINIBAND_EHCA tristate {
    prompt "eHCA support" if [INFINIBAND && IBMEBUS]
    depends on [IBMEBUS]
    inherited [INFINIBAND && IBMEBUS]
   }
   config INFINIBAND_AMSO1100 tristate {
    prompt "Ammasso 1100 HCA support" if [INFINIBAND && PCI && INET]
    depends on [PCI && INET]
    inherited [INFINIBAND && PCI && INET]
    config INFINIBAND_AMSO1100_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND && INFINIBAND_AMSO1100]
     depends on [INFINIBAND_AMSO1100]
     default [n] if [INFINIBAND && INFINIBAND_AMSO1100]
     inherited [INFINIBAND && INFINIBAND_AMSO1100]
    }
   }
   config INFINIBAND_CXGB3 tristate {
    prompt "Chelsio RDMA Driver" if [INFINIBAND && CHELSIO_T3 && INET]
    depends on [CHELSIO_T3 && INET]
    select GENERIC_ALLOCATOR if [INFINIBAND && CHELSIO_T3 && INET]
    inherited [INFINIBAND && CHELSIO_T3 && INET]
    config INFINIBAND_CXGB3_DEBUG boolean {
     prompt "Verbose debugging output" if [INFINIBAND && INFINIBAND_CXGB3]
     depends on [INFINIBAND_CXGB3]
     default [n] if [INFINIBAND && INFINIBAND_CXGB3]
     inherited [INFINIBAND && INFINIBAND_CXGB3]
    }
   }
   config MLX4_INFINIBAND tristate {
    prompt "Mellanox ConnectX HCA support" if [INFINIBAND]
    select MLX4_CORE if [INFINIBAND]
    inherited [INFINIBAND]
   }
   config INFINIBAND_IPOIB tristate {
    prompt "IP-over-InfiniBand" if [INFINIBAND && NETDEVICES && INET && (IPV6 || IPV6="n")]
    depends on [NETDEVICES && INET && (IPV6 || IPV6="n")]
    inherited [INFINIBAND && NETDEVICES && INET && (IPV6 || IPV6="n")]
    config INFINIBAND_IPOIB_CM boolean {
     prompt "IP-over-InfiniBand Connected Mode support" if [INFINIBAND && INFINIBAND_IPOIB && EXPERIMENTAL]
     depends on [INFINIBAND_IPOIB && EXPERIMENTAL]
     default [n] if [INFINIBAND && INFINIBAND_IPOIB && EXPERIMENTAL]
     inherited [INFINIBAND && INFINIBAND_IPOIB && EXPERIMENTAL]
    }
    config INFINIBAND_IPOIB_DEBUG boolean {
     prompt "IP-over-InfiniBand debugging" if [INFINIBAND && INFINIBAND_IPOIB && EMBEDDED]
     depends on [INFINIBAND_IPOIB]
     default [y] if [INFINIBAND && INFINIBAND_IPOIB]
     inherited [INFINIBAND && INFINIBAND_IPOIB]
     config INFINIBAND_IPOIB_DEBUG_DATA boolean {
      prompt "IP-over-InfiniBand data path debugging" if [INFINIBAND && INFINIBAND_IPOIB_DEBUG]
      depends on [INFINIBAND_IPOIB_DEBUG]
      inherited [INFINIBAND && INFINIBAND_IPOIB_DEBUG]
     }
    }
   }
   config INFINIBAND_SRP tristate {
    prompt "InfiniBand SCSI RDMA Protocol" if [INFINIBAND && SCSI]
    depends on [SCSI]
    select SCSI_SRP_ATTRS if [INFINIBAND && SCSI]
    inherited [INFINIBAND && SCSI]
   }
   config INFINIBAND_ISER tristate {
    prompt "iSCSI Extensions for RDMA (iSER)" if [INFINIBAND && SCSI && INET]
    depends on [SCSI && INET]
    select SCSI_ISCSI_ATTRS if [INFINIBAND && SCSI && INET]
    inherited [INFINIBAND && SCSI && INET]
   }
  }
 }
 menuconfig EDAC boolean {
  prompt "EDAC - error detection and reporting (EXPERIMENTAL)" if [HAS_IOMEM && EXPERIMENTAL && (X86 || PPC)]
  depends on [HAS_IOMEM]
  depends on [EXPERIMENTAL]
  depends on [X86 || PPC]
  inherited [HAS_IOMEM && EXPERIMENTAL && (X86 || PPC)]
  if [EDAC] {
   config EDAC_DEBUG boolean {
    prompt "Debugging" if [EDAC]
    inherited [EDAC]
   }
   config EDAC_MM_EDAC tristate {
    prompt "Main Memory EDAC (Error Detection And Correction) reporting" if [EDAC]
    default [y] if [EDAC]
    inherited [EDAC]
    config EDAC_AMD76X tristate {
     prompt "AMD 76x (760, 762, 768)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_E7XXX tristate {
     prompt "Intel e7xxx (e7205, e7500, e7501, e7505)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_E752X tristate {
     prompt "Intel e752x (e7520, e7525, e7320)" if [EDAC && EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
     depends on [EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86 && HOTPLUG]
    }
    config EDAC_I82443BXGX tristate {
     prompt "Intel 82443BX/GX (440BX/GX)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32 && BROKEN]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     depends on [BROKEN]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32 && BROKEN]
    }
    config EDAC_I82875P tristate {
     prompt "Intel 82875p (D82875P, E7210)" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_I82975X tristate {
     prompt "Intel 82975x (D82975x)" if [EDAC && EDAC_MM_EDAC && PCI && X86]
     depends on [EDAC_MM_EDAC && PCI && X86]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86]
    }
    config EDAC_I3000 tristate {
     prompt "Intel 3000/3010" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_I82860 tristate {
     prompt "Intel 82860" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_R82600 tristate {
     prompt "Radisys 82600 embedded chipset" if [EDAC && EDAC_MM_EDAC && PCI && X86_32]
     depends on [EDAC_MM_EDAC && PCI && X86_32]
     inherited [EDAC && EDAC_MM_EDAC && PCI && X86_32]
    }
    config EDAC_I5000 tristate {
     prompt "Intel Greencreek/Blackford chipset" if [EDAC && EDAC_MM_EDAC && X86 && PCI]
     depends on [EDAC_MM_EDAC && X86 && PCI]
     inherited [EDAC && EDAC_MM_EDAC && X86 && PCI]
    }
    config EDAC_PASEMI tristate {
     prompt "PA Semi PWRficient" if [EDAC && EDAC_MM_EDAC && PCI && PPC_PASEMI]
     depends on [EDAC_MM_EDAC && PCI]
     depends on [PPC_PASEMI]
     inherited [EDAC && EDAC_MM_EDAC && PCI && PPC_PASEMI]
    }
   }
  }
 }
 config RTC_LIB tristate {
 }
 menuconfig RTC_CLASS tristate {
  prompt "Real Time Clock" if [!S390]
  default [n] if [!S390]
  depends on [!S390]
  select RTC_LIB if [!S390]
  inherited [!S390]
  if [RTC_CLASS] {
   config RTC_HCTOSYS boolean {
    prompt "Set system time from RTC on startup and resume" if [RTC_CLASS="y"]
    depends on [RTC_CLASS="y"]
    default [y] if [RTC_CLASS="y"]
    inherited [RTC_CLASS="y"]
    config RTC_HCTOSYS_DEVICE string {
     prompt "RTC used to set the system time" if [RTC_CLASS && RTC_HCTOSYS]
     depends on [RTC_HCTOSYS="y"]
     default ["rtc0"] if [RTC_CLASS && RTC_HCTOSYS]
     inherited [RTC_CLASS && RTC_HCTOSYS]
    }
   }
   config RTC_DEBUG boolean {
    prompt "RTC debug support" if [RTC_CLASS="y"]
    depends on [RTC_CLASS="y"]
    inherited [RTC_CLASS="y"]
   }
   config RTC_INTF_SYSFS boolean {
    prompt "/sys/class/rtc/rtcN (sysfs)" if [RTC_CLASS && SYSFS]
    depends on [SYSFS]
    default [RTC_CLASS] if [RTC_CLASS && SYSFS]
    inherited [RTC_CLASS && SYSFS]
   }
   config RTC_INTF_PROC boolean {
    prompt "/proc/driver/rtc (procfs for rtc0)" if [RTC_CLASS && PROC_FS]
    depends on [PROC_FS]
    default [RTC_CLASS] if [RTC_CLASS && PROC_FS]
    inherited [RTC_CLASS && PROC_FS]
   }
   config RTC_INTF_DEV boolean {
    prompt "/dev/rtcN (character devices)" if [RTC_CLASS]
    default [RTC_CLASS] if [RTC_CLASS]
    inherited [RTC_CLASS]
    config RTC_INTF_DEV_UIE_EMUL boolean {
     prompt "RTC UIE emulation on dev interface" if [RTC_CLASS && RTC_INTF_DEV]
     depends on [RTC_INTF_DEV]
     inherited [RTC_CLASS && RTC_INTF_DEV]
    }
   }
   config RTC_DRV_TEST tristate {
    prompt "Test driver/device" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   if [RTC_CLASS && I2C] {
    config RTC_DRV_DS1307 tristate {
     prompt "Dallas/Maxim DS1307/37/38/39/40, ST M41T00" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_DS1374 tristate {
     prompt "Maxim/Dallas Semiconductor DS1374 Real Time Clock" if [RTC_CLASS && I2C]
     depends on [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_DS1672 tristate {
     prompt "Dallas/Maxim DS1672" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_MAX6900 tristate {
     prompt "Maxim 6900" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_RS5C372 tristate {
     prompt "Ricoh RS5C372A/B, RV5C386, RV5C387A" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_ISL1208 tristate {
     prompt "Intersil 1208" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_X1205 tristate {
     prompt "Xicor/Intersil X1205" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_PCF8563 tristate {
     prompt "Philips PCF8563/Epson RTC8564" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_PCF8583 tristate {
     prompt "Philips PCF8583" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
    }
    config RTC_DRV_M41T80 tristate {
     prompt "ST M41T80 series RTC" if [RTC_CLASS && I2C]
     inherited [RTC_CLASS && I2C]
     config RTC_DRV_M41T80_WDT boolean {
      prompt "ST M41T80 series RTC watchdog timer" if [RTC_CLASS && I2C && RTC_DRV_M41T80]
      depends on [RTC_DRV_M41T80]
      inherited [RTC_CLASS && I2C && RTC_DRV_M41T80]
     }
    }
    config RTC_DRV_TWL92330 boolean {
     prompt "TI TWL92330/Menelaus" if [RTC_CLASS && I2C && MENELAUS]
     depends on [MENELAUS]
     inherited [RTC_CLASS && I2C && MENELAUS]
    }
   }
   if [RTC_CLASS && SPI_MASTER] {
    config RTC_DRV_RS5C348 tristate {
     prompt "Ricoh RS5C348A/B" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
    config RTC_DRV_MAX6902 tristate {
     prompt "Maxim 6902" if [RTC_CLASS && SPI_MASTER]
     inherited [RTC_CLASS && SPI_MASTER]
    }
   }
   config RTC_DRV_CMOS tristate {
    prompt "PC-style 'CMOS'" if [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS)]
    depends on [X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS]
    inherited [RTC_CLASS && (X86 || ALPHA || ARM || M32R || ATARI || PPC || MIPS)]
   }
   config RTC_DRV_DS1216 tristate {
    prompt "Dallas DS1216" if [RTC_CLASS && SNI_RM]
    depends on [SNI_RM]
    inherited [RTC_CLASS && SNI_RM]
   }
   config RTC_DRV_DS1553 tristate {
    prompt "Dallas DS1553" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_STK17TA8 tristate {
    prompt "Simtek STK17TA8" if [RTC_CLASS]
    depends on [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_DS1742 tristate {
    prompt "Dallas DS1742/1743" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_M48T86 tristate {
    prompt "ST M48T86/Dallas DS12887" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_M48T59 tristate {
    prompt "ST M48T59" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_V3020 tristate {
    prompt "EM Microelectronic V3020" if [RTC_CLASS]
    inherited [RTC_CLASS]
   }
   config RTC_DRV_OMAP tristate {
    prompt "TI OMAP1" if [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730)]
    depends on [ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730]
    inherited [RTC_CLASS && (ARCH_OMAP15XX || ARCH_OMAP16XX || ARCH_OMAP730)]
   }
   config RTC_DRV_S3C tristate {
    prompt "Samsung S3C series SoC RTC" if [RTC_CLASS && ARCH_S3C2410]
    depends on [ARCH_S3C2410]
    inherited [RTC_CLASS && ARCH_S3C2410]
   }
   config RTC_DRV_EP93XX tristate {
    prompt "Cirrus Logic EP93XX" if [RTC_CLASS && ARCH_EP93XX]
    depends on [ARCH_EP93XX]
    inherited [RTC_CLASS && ARCH_EP93XX]
   }
   config RTC_DRV_SA1100 tristate {
    prompt "SA11x0/PXA2xx" if [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
    depends on [ARCH_SA1100 || ARCH_PXA]
    inherited [RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)]
   }
   config RTC_DRV_SH tristate {
    prompt "SuperH On-Chip RTC" if [RTC_CLASS && (CPU_SH3 || CPU_SH4)]
    depends on [RTC_CLASS && (CPU_SH3 || CPU_SH4)]
    inherited [RTC_CLASS && (CPU_SH3 || CPU_SH4)]
   }
   config RTC_DRV_VR41XX tristate {
    prompt "NEC VR41XX" if [RTC_CLASS && CPU_VR41XX]
    depends on [CPU_VR41XX]
    inherited [RTC_CLASS && CPU_VR41XX]
   }
   config RTC_DRV_PL031 tristate {
    prompt "ARM AMBA PL031 RTC" if [RTC_CLASS && ARM_AMBA]
    depends on [ARM_AMBA]
    inherited [RTC_CLASS && ARM_AMBA]
   }
   config RTC_DRV_AT32AP700X tristate {
    prompt "AT32AP700X series RTC" if [RTC_CLASS && PLATFORM_AT32AP]
    depends on [PLATFORM_AT32AP]
    inherited [RTC_CLASS && PLATFORM_AT32AP]
   }
   config RTC_DRV_AT91RM9200 tristate {
    prompt "AT91RM9200" if [RTC_CLASS && ARCH_AT91RM9200]
    depends on [ARCH_AT91RM9200]
    inherited [RTC_CLASS && ARCH_AT91RM9200]
   }
   config RTC_DRV_BFIN tristate {
    prompt "Blackfin On-Chip RTC" if [RTC_CLASS && BLACKFIN]
    depends on [BLACKFIN]
    inherited [RTC_CLASS && BLACKFIN]
   }
   config RTC_DRV_RS5C313 tristate {
    prompt "Ricoh RS5C313" if [RTC_CLASS && SH_LANDISK]
    depends on [SH_LANDISK]
    inherited [RTC_CLASS && SH_LANDISK]
   }
  }
 }
 menuconfig DMADEVICES boolean {
  prompt "DMA Engine support" if [PCI && X86 || ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX]
  depends on [PCI && X86 || ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX]
  inherited [PCI && X86 || ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX]
  if [DMADEVICES] {
   config INTEL_IOATDMA tristate {
    prompt "Intel I/OAT DMA support" if [DMADEVICES && PCI && X86]
    depends on [PCI && X86]
    select DMA_ENGINE if [DMADEVICES && PCI && X86]
    select DCA if [DMADEVICES && PCI && X86]
    inherited [DMADEVICES && PCI && X86]
   }
   config INTEL_IOP_ADMA tristate {
    prompt "Intel IOP ADMA support" if [DMADEVICES && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)]
    depends on [ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX]
    select ASYNC_CORE if [DMADEVICES && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)]
    select DMA_ENGINE if [DMADEVICES && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)]
    inherited [DMADEVICES && (ARCH_IOP32X || ARCH_IOP33X || ARCH_IOP13XX)]
   }
   config DMA_ENGINE boolean {
    inherited [DMADEVICES]
   }
   config NET_DMA boolean {
    prompt "Network: TCP receive copy offload" if [DMADEVICES && DMA_ENGINE && NET]
    depends on [DMA_ENGINE && NET]
    inherited [DMADEVICES && DMA_ENGINE && NET]
   }
  }
 }
 config DCA tristate {
 }
 menuconfig AUXDISPLAY boolean {
  depends on [PARPORT]
  prompt "Auxiliary Display support" if [PARPORT]
  inherited [PARPORT]
  if [AUXDISPLAY && PARPORT] {
   config KS0108 tristate {
    prompt "KS0108 LCD Controller" if [AUXDISPLAY && PARPORT && PARPORT_PC]
    depends on [PARPORT_PC]
    default [n] if [AUXDISPLAY && PARPORT && PARPORT_PC]
    inherited [AUXDISPLAY && PARPORT && PARPORT_PC]
    config KS0108_PORT hex {
     prompt "Parallel port where the LCD is connected" if [AUXDISPLAY && PARPORT && KS0108]
     depends on [KS0108]
     default [0x378] if [AUXDISPLAY && PARPORT && KS0108]
     inherited [AUXDISPLAY && PARPORT && KS0108]
    }
    config KS0108_DELAY integer {
     prompt "Delay between each control writing (microseconds)" if [AUXDISPLAY && PARPORT && KS0108]
     depends on [KS0108]
     default [2] if [AUXDISPLAY && PARPORT && KS0108]
     inherited [AUXDISPLAY && PARPORT && KS0108]
    }
    config CFAG12864B tristate {
     prompt "CFAG12864B LCD" if [AUXDISPLAY && PARPORT && X86 && FB && KS0108]
     depends on [X86]
     depends on [FB]
     depends on [KS0108]
     select FB_SYS_FILLRECT if [AUXDISPLAY && PARPORT && X86 && FB && KS0108]
     select FB_SYS_COPYAREA if [AUXDISPLAY && PARPORT && X86 && FB && KS0108]
     select FB_SYS_IMAGEBLIT if [AUXDISPLAY && PARPORT && X86 && FB && KS0108]
     select FB_SYS_FOPS if [AUXDISPLAY && PARPORT && X86 && FB && KS0108]
     default [n] if [AUXDISPLAY && PARPORT && X86 && FB && KS0108]
     inherited [AUXDISPLAY && PARPORT && X86 && FB && KS0108]
     config CFAG12864B_RATE integer {
      prompt "Refresh rate (hertz)" if [AUXDISPLAY && PARPORT && CFAG12864B]
      depends on [CFAG12864B]
      default [20] if [AUXDISPLAY && PARPORT && CFAG12864B]
      inherited [AUXDISPLAY && PARPORT && CFAG12864B]
     }
    }
   }
  }
 }
 menuconfig VIRTUALIZATION boolean {
  prompt "Virtualization" if [X86]
  depends on [X86]
  default [y] if [X86]
  inherited [X86]
  if [VIRTUALIZATION] {
   config KVM tristate {
    prompt "Kernel-based Virtual Machine (KVM) support" if [VIRTUALIZATION && X86 && EXPERIMENTAL]
    depends on [X86 && EXPERIMENTAL]
    select PREEMPT_NOTIFIERS if [VIRTUALIZATION && X86 && EXPERIMENTAL]
    select ANON_INODES if [VIRTUALIZATION && X86 && EXPERIMENTAL]
    inherited [VIRTUALIZATION && X86 && EXPERIMENTAL]
    config KVM_INTEL tristate {
     prompt "KVM for Intel processors support" if [VIRTUALIZATION && KVM]
     depends on [KVM]
     inherited [VIRTUALIZATION && KVM]
    }
    config KVM_AMD tristate {
     prompt "KVM for AMD processors support" if [VIRTUALIZATION && KVM]
     depends on [KVM]
     inherited [VIRTUALIZATION && KVM]
    }
   }
   config LGUEST tristate {
    prompt "Linux hypervisor example code" if [VIRTUALIZATION && X86_32 && EXPERIMENTAL && !X86_PAE && FUTEX && !X86_VISWS && !X86_VOYAGER]
    depends on [X86_32 && EXPERIMENTAL && !X86_PAE && FUTEX && !(X86_VISWS || X86_VOYAGER)]
    select HVC_DRIVER if [VIRTUALIZATION && X86_32 && EXPERIMENTAL && !X86_PAE && FUTEX && !X86_VISWS && !X86_VOYAGER]
    inherited [VIRTUALIZATION && X86_32 && EXPERIMENTAL && !X86_PAE && FUTEX && !X86_VISWS && !X86_VOYAGER]
   }
  }
 }
 menu "Userspace I/O" {
  depends on [!S390]
  config UIO tristate {
   prompt "Userspace I/O drivers" if [!S390]
   default [n] if [!S390]
   inherited [!S390]
   config UIO_CIF tristate {
    prompt "generic Hilscher CIF Card driver" if [!S390 && UIO && PCI]
    depends on [UIO && PCI]
    default [n] if [!S390 && UIO && PCI]
    inherited [!S390 && UIO && PCI]
   }
  }
 }
 config VIRTIO boolean {
 }
 config VIRTIO_RING boolean {
  depends on [VIRTIO]
  inherited [VIRTIO]
 }
}
menu "Firmware Drivers" {
 config EDD tristate {
  prompt "BIOS Enhanced Disk Drive calls determine boot disk" if [!IA64]
  depends on [!IA64]
  inherited [!IA64]
 }
 config EFI_VARS tristate {
  prompt "EFI Variable Support via sysfs" if [EFI]
  depends on [EFI]
  default [n] if [EFI]
  inherited [EFI]
 }
 config EFI_PCDP boolean {
  prompt "Console device selection via EFI PCDP or HCDP table" if [ACPI && EFI && IA64]
  depends on [ACPI && EFI && IA64]
  default [y] if [ACPI && EFI && IA64]
  inherited [ACPI && EFI && IA64]
 }
 config DELL_RBU tristate {
  prompt "BIOS update support for DELL systems via sysfs" if [X86]
  depends on [X86]
  select FW_LOADER if [X86]
  inherited [X86]
 }
 config DCDBAS tristate {
  prompt "Dell Systems Management Base Driver" if [X86]
  depends on [X86]
  inherited [X86]
 }
 config DMIID boolean {
  prompt "Export DMI identification via sysfs to userspace" if [DMI]
  depends on [DMI]
  default [y] if [DMI]
  inherited [DMI]
 }
}
menu "File systems" {
 if [BLOCK] {
  config EXT2_FS tristate {
   prompt "Second extended fs support" if [BLOCK]
   inherited [BLOCK]
   config EXT2_FS_XATTR boolean {
    prompt "Ext2 extended attributes" if [BLOCK && EXT2_FS]
    depends on [EXT2_FS]
    inherited [BLOCK && EXT2_FS]
    config EXT2_FS_POSIX_ACL boolean {
     prompt "Ext2 POSIX Access Control Lists" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
    config EXT2_FS_SECURITY boolean {
     prompt "Ext2 Security Labels" if [BLOCK && EXT2_FS_XATTR]
     depends on [EXT2_FS_XATTR]
     inherited [BLOCK && EXT2_FS_XATTR]
    }
   }
   config EXT2_FS_XIP boolean {
    prompt "Ext2 execute in place support" if [BLOCK && EXT2_FS && MMU]
    depends on [EXT2_FS && MMU]
    inherited [BLOCK && EXT2_FS && MMU]
    config FS_XIP boolean {
     depends on [EXT2_FS_XIP]
     default [y] if [BLOCK && EXT2_FS_XIP]
     inherited [BLOCK && EXT2_FS_XIP]
    }
   }
  }
  config EXT3_FS tristate {
   prompt "Ext3 journalling file system support" if [BLOCK]
   select JBD if [BLOCK]
   inherited [BLOCK]
   config EXT3_FS_XATTR boolean {
    prompt "Ext3 extended attributes" if [BLOCK && EXT3_FS]
    depends on [EXT3_FS]
    default [y] if [BLOCK && EXT3_FS]
    inherited [BLOCK && EXT3_FS]
    config EXT3_FS_POSIX_ACL boolean {
     prompt "Ext3 POSIX Access Control Lists" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
    config EXT3_FS_SECURITY boolean {
     prompt "Ext3 Security Labels" if [BLOCK && EXT3_FS_XATTR]
     depends on [EXT3_FS_XATTR]
     inherited [BLOCK && EXT3_FS_XATTR]
    }
   }
  }
  config EXT4DEV_FS tristate {
   prompt "Ext4dev/ext4 extended fs support development (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select JBD2 if [BLOCK && EXPERIMENTAL]
   select CRC16 if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config EXT4DEV_FS_XATTR boolean {
    prompt "Ext4dev extended attributes" if [BLOCK && EXT4DEV_FS]
    depends on [EXT4DEV_FS]
    default [y] if [BLOCK && EXT4DEV_FS]
    inherited [BLOCK && EXT4DEV_FS]
    config EXT4DEV_FS_POSIX_ACL boolean {
     prompt "Ext4dev POSIX Access Control Lists" if [BLOCK && EXT4DEV_FS_XATTR]
     depends on [EXT4DEV_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && EXT4DEV_FS_XATTR]
     inherited [BLOCK && EXT4DEV_FS_XATTR]
    }
    config EXT4DEV_FS_SECURITY boolean {
     prompt "Ext4dev Security Labels" if [BLOCK && EXT4DEV_FS_XATTR]
     depends on [EXT4DEV_FS_XATTR]
     inherited [BLOCK && EXT4DEV_FS_XATTR]
    }
   }
  }
  config JBD tristate {
   inherited [BLOCK]
  }
  config JBD_DEBUG boolean {
   prompt "JBD (ext3) debugging support" if [BLOCK && JBD && DEBUG_FS]
   depends on [JBD && DEBUG_FS]
   inherited [BLOCK && JBD && DEBUG_FS]
  }
  config JBD2 tristate {
   inherited [BLOCK]
  }
  config JBD2_DEBUG boolean {
   prompt "JBD2 (ext4dev/ext4) debugging support" if [BLOCK && JBD2 && DEBUG_FS]
   depends on [JBD2 && DEBUG_FS]
   inherited [BLOCK && JBD2 && DEBUG_FS]
  }
  config FS_MBCACHE tristate {
   depends on [EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR]
   default [y] if [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR) && (EXT2_FS="y" || EXT3_FS="y" || EXT4DEV_FS="y")]
   default [m] if [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR) && (EXT2_FS="m" || EXT3_FS="m" || EXT4DEV_FS="m")]
   inherited [BLOCK && (EXT2_FS_XATTR || EXT3_FS_XATTR || EXT4DEV_FS_XATTR)]
  }
  config REISERFS_FS tristate {
   prompt "Reiserfs support" if [BLOCK]
   inherited [BLOCK]
   config REISERFS_CHECK boolean {
    prompt "Enable reiserfs debug mode" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
   }
   config REISERFS_PROC_INFO boolean {
    prompt "Stats in /proc/fs/reiserfs" if [BLOCK && REISERFS_FS && PROC_FS]
    depends on [REISERFS_FS && PROC_FS]
    inherited [BLOCK && REISERFS_FS && PROC_FS]
   }
   config REISERFS_FS_XATTR boolean {
    prompt "ReiserFS extended attributes" if [BLOCK && REISERFS_FS]
    depends on [REISERFS_FS]
    inherited [BLOCK && REISERFS_FS]
    config REISERFS_FS_POSIX_ACL boolean {
     prompt "ReiserFS POSIX Access Control Lists" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     select FS_POSIX_ACL if [BLOCK && REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
    config REISERFS_FS_SECURITY boolean {
     prompt "ReiserFS Security Labels" if [BLOCK && REISERFS_FS_XATTR]
     depends on [REISERFS_FS_XATTR]
     inherited [BLOCK && REISERFS_FS_XATTR]
    }
   }
  }
  config JFS_FS tristate {
   prompt "JFS filesystem support" if [BLOCK]
   select NLS if [BLOCK]
   inherited [BLOCK]
   config JFS_POSIX_ACL boolean {
    prompt "JFS POSIX Access Control Lists" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    select FS_POSIX_ACL if [BLOCK && JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_SECURITY boolean {
    prompt "JFS Security Labels" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_DEBUG boolean {
    prompt "JFS debugging" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
   config JFS_STATISTICS boolean {
    prompt "JFS statistics" if [BLOCK && JFS_FS]
    depends on [JFS_FS]
    inherited [BLOCK && JFS_FS]
   }
  }
  config FS_POSIX_ACL boolean {
   default [n] if [BLOCK]
   inherited [BLOCK]
  }
  config XFS_FS tristate {
   prompt "XFS filesystem support" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config XFS_QUOTA boolean {
    prompt "XFS Quota support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_SECURITY boolean {
    prompt "XFS Security Label support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_POSIX_ACL boolean {
    prompt "XFS POSIX ACL support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
   config XFS_RT boolean {
    prompt "XFS Realtime subvolume support" if [BLOCK && XFS_FS]
    depends on [XFS_FS]
    inherited [BLOCK && XFS_FS]
   }
  }
  config GFS2_FS tristate {
   prompt "GFS2 file system support" if [BLOCK && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select FS_POSIX_ACL if [BLOCK && EXPERIMENTAL]
   select CRC32 if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config GFS2_FS_LOCKING_NOLOCK tristate {
    prompt "GFS2 \"nolock\" locking module" if [BLOCK && GFS2_FS]
    depends on [GFS2_FS]
    inherited [BLOCK && GFS2_FS]
   }
   config GFS2_FS_LOCKING_DLM tristate {
    prompt "GFS2 DLM locking module" if [BLOCK && GFS2_FS && SYSFS && NET && INET && (IPV6 || IPV6="n")]
    depends on [GFS2_FS && SYSFS && NET && INET && (IPV6 || IPV6="n")]
    select IP_SCTP if [BLOCK && GFS2_FS && SYSFS && NET && INET && (IPV6 || IPV6="n") && DLM_SCTP]
    select CONFIGFS_FS if [BLOCK && GFS2_FS && SYSFS && NET && INET && (IPV6 || IPV6="n")]
    select DLM if [BLOCK && GFS2_FS && SYSFS && NET && INET && (IPV6 || IPV6="n")]
    inherited [BLOCK && GFS2_FS && SYSFS && NET && INET && (IPV6 || IPV6="n")]
   }
  }
  config OCFS2_FS tristate {
   prompt "OCFS2 file system support" if [BLOCK && NET && SYSFS]
   depends on [NET && SYSFS]
   select CONFIGFS_FS if [BLOCK && NET && SYSFS]
   select JBD if [BLOCK && NET && SYSFS]
   select CRC32 if [BLOCK && NET && SYSFS]
   inherited [BLOCK && NET && SYSFS]
   config OCFS2_DEBUG_MASKLOG boolean {
    prompt "OCFS2 logging support" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [y] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
   config OCFS2_DEBUG_FS boolean {
    prompt "OCFS2 expensive checks" if [BLOCK && OCFS2_FS]
    depends on [OCFS2_FS]
    default [n] if [BLOCK && OCFS2_FS]
    inherited [BLOCK && OCFS2_FS]
   }
  }
  config MINIX_FS tristate {
   prompt "Minix fs support" if [BLOCK]
   inherited [BLOCK]
  }
  config ROMFS_FS tristate {
   prompt "ROM file system support" if [BLOCK]
   inherited [BLOCK]
  }
 }
 config INOTIFY boolean {
  prompt "Inotify file change notification support" if []
  default [y] if []
  config INOTIFY_USER boolean {
   prompt "Inotify support for userspace" if [INOTIFY]
   depends on [INOTIFY]
   default [y] if [INOTIFY]
   inherited [INOTIFY]
  }
 }
 config QUOTA boolean {
  prompt "Quota support" if []
  config QUOTA_NETLINK_INTERFACE boolean {
   prompt "Report quota messages through netlink interface" if [QUOTA && NET]
   depends on [QUOTA && NET]
   inherited [QUOTA && NET]
  }
  config PRINT_QUOTA_WARNING boolean {
   prompt "Print quota warnings to console (OBSOLETE)" if [QUOTA]
   depends on [QUOTA]
   default [y] if [QUOTA]
   inherited [QUOTA]
  }
  config QFMT_V1 tristate {
   prompt "Old quota format support" if [QUOTA]
   depends on [QUOTA]
   inherited [QUOTA]
  }
  config QFMT_V2 tristate {
   prompt "Quota format v2 support" if [QUOTA]
   depends on [QUOTA]
   inherited [QUOTA]
  }
  config QUOTACTL boolean {
   depends on [XFS_QUOTA || QUOTA]
   default [y] if [XFS_QUOTA || QUOTA]
   inherited [XFS_QUOTA || QUOTA]
  }
 }
 config DNOTIFY boolean {
  prompt "Dnotify support" if []
  default [y] if []
 }
 config AUTOFS_FS tristate {
  prompt "Kernel automounter support" if []
 }
 config AUTOFS4_FS tristate {
  prompt "Kernel automounter version 4 support (also supports v3)" if []
 }
 config FUSE_FS tristate {
  prompt "Filesystem in Userspace support" if []
 }
 config GENERIC_ACL boolean {
  select FS_POSIX_ACL if []
 }
 if [BLOCK] {
  menu "CD-ROM/DVD Filesystems" {
   depends on [BLOCK]
   config ISO9660_FS tristate {
    prompt "ISO 9660 CDROM file system support" if [BLOCK]
    inherited [BLOCK]
    config JOLIET boolean {
     prompt "Microsoft Joliet CDROM extensions" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select NLS if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
    }
    config ZISOFS boolean {
     prompt "Transparent decompression extension" if [BLOCK && ISO9660_FS]
     depends on [ISO9660_FS]
     select ZLIB_INFLATE if [BLOCK && ISO9660_FS]
     inherited [BLOCK && ISO9660_FS]
    }
   }
   config UDF_FS tristate {
    prompt "UDF file system support" if [BLOCK]
    inherited [BLOCK]
    config UDF_NLS boolean {
     default [y] if [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
     depends on [UDF_FS="m" && NLS || UDF_FS="y" && NLS="y"]
     inherited [BLOCK && (UDF_FS="m" && NLS || UDF_FS="y" && NLS="y")]
    }
   }
  }
 }
 if [BLOCK] {
  menu "DOS/FAT/NT Filesystems" {
   depends on [BLOCK]
   config FAT_FS tristate {
    select NLS if [BLOCK]
    inherited [BLOCK]
   }
   config MSDOS_FS tristate {
    prompt "MSDOS fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
   }
   config VFAT_FS tristate {
    prompt "VFAT (Windows-95) fs support" if [BLOCK]
    select FAT_FS if [BLOCK]
    inherited [BLOCK]
    config FAT_DEFAULT_CODEPAGE integer {
     prompt "Default codepage for FAT" if [BLOCK && (MSDOS_FS || VFAT_FS)]
     depends on [MSDOS_FS || VFAT_FS]
     default [437] if [BLOCK && (MSDOS_FS || VFAT_FS)]
     inherited [BLOCK && (MSDOS_FS || VFAT_FS)]
    }
    config FAT_DEFAULT_IOCHARSET string {
     prompt "Default iocharset for FAT" if [BLOCK && VFAT_FS]
     depends on [VFAT_FS]
     default ["iso8859-1"] if [BLOCK && VFAT_FS]
     inherited [BLOCK && VFAT_FS]
    }
   }
   config NTFS_FS tristate {
    prompt "NTFS file system support" if [BLOCK]
    select NLS if [BLOCK]
    inherited [BLOCK]
    config NTFS_DEBUG boolean {
     prompt "NTFS debugging support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
    config NTFS_RW boolean {
     prompt "NTFS write support" if [BLOCK && NTFS_FS]
     depends on [NTFS_FS]
     inherited [BLOCK && NTFS_FS]
    }
   }
  }
 }
 menu "Pseudo filesystems" {
  config PROC_FS boolean {
   prompt "/proc file system support" if [EMBEDDED]
   default [y] if []
   config PROC_KCORE boolean {
    prompt "/proc/kcore support" if [PROC_FS && MMU && !ARM]
    depends on [PROC_FS && MMU]
    inherited [PROC_FS && MMU]
   }
   config PROC_VMCORE boolean {
    prompt "/proc/vmcore support (EXPERIMENTAL)" if [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
    depends on [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
    default [y] if [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
    inherited [PROC_FS && EXPERIMENTAL && CRASH_DUMP]
   }
   config PROC_SYSCTL boolean {
    prompt "Sysctl support (/proc/sys)" if [PROC_FS && EMBEDDED]
    depends on [PROC_FS]
    select SYSCTL if [PROC_FS]
    default [y] if [PROC_FS]
    inherited [PROC_FS]
   }
  }
  config SYSFS boolean {
   prompt "sysfs file system support" if [EMBEDDED]
   default [y] if []
  }
  config TMPFS boolean {
   prompt "Virtual memory file system support (former shm fs)" if []
   config TMPFS_POSIX_ACL boolean {
    prompt "Tmpfs POSIX Access Control Lists" if [TMPFS]
    depends on [TMPFS]
    select GENERIC_ACL if [TMPFS]
    inherited [TMPFS]
   }
  }
  config HUGETLBFS boolean {
   prompt "HugeTLB file system support" if [X86 || IA64 || PPC64 || SPARC64 || SUPERH && MMU || BROKEN]
   depends on [X86 || IA64 || PPC64 || SPARC64 || SUPERH && MMU || BROKEN]
   inherited [X86 || IA64 || PPC64 || SPARC64 || SUPERH && MMU || BROKEN]
  }
  config HUGETLB_PAGE boolean {
   default [HUGETLBFS] if []
  }
  config CONFIGFS_FS tristate {
   prompt "Userspace-driven configuration filesystem (EXPERIMENTAL)" if [SYSFS && EXPERIMENTAL]
   depends on [SYSFS && EXPERIMENTAL]
   inherited [SYSFS && EXPERIMENTAL]
  }
 }
 menu "Miscellaneous filesystems" {
  config ADFS_FS tristate {
   prompt "ADFS file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config ADFS_FS_RW boolean {
    prompt "ADFS write support (DANGEROUS)" if [ADFS_FS]
    depends on [ADFS_FS]
    inherited [ADFS_FS]
   }
  }
  config AFFS_FS tristate {
   prompt "Amiga FFS file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config ECRYPT_FS tristate {
   prompt "eCrypt filesystem layer support (EXPERIMENTAL)" if [EXPERIMENTAL && KEYS && CRYPTO && NET]
   depends on [EXPERIMENTAL && KEYS && CRYPTO && NET]
   inherited [EXPERIMENTAL && KEYS && CRYPTO && NET]
  }
  config HFS_FS tristate {
   prompt "Apple Macintosh file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   select NLS if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config HFSPLUS_FS tristate {
   prompt "Apple Extended HFS file system support" if [BLOCK]
   depends on [BLOCK]
   select NLS if [BLOCK]
   select NLS_UTF8 if [BLOCK]
   inherited [BLOCK]
  }
  config BEFS_FS tristate {
   prompt "BeOS file system (BeFS) support (read only) (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   select NLS if [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
   config BEFS_DEBUG boolean {
    prompt "Debug BeFS" if [BEFS_FS]
    depends on [BEFS_FS]
    inherited [BEFS_FS]
   }
  }
  config BFS_FS tristate {
   prompt "BFS file system support (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config EFS_FS tristate {
   prompt "EFS file system support (read only) (EXPERIMENTAL)" if [BLOCK && EXPERIMENTAL]
   depends on [BLOCK && EXPERIMENTAL]
   inherited [BLOCK && EXPERIMENTAL]
  }
  config JFFS2_FS tristate {
   prompt "Journalling Flash File System v2 (JFFS2) support" if [MTD]
   select CRC32 if [MTD]
   depends on [MTD]
   inherited [MTD]
   config JFFS2_FS_DEBUG integer {
    prompt "JFFS2 debugging verbosity (0 = quiet, 2 = noisy)" if [JFFS2_FS]
    depends on [JFFS2_FS]
    default [0] if [JFFS2_FS]
    inherited [JFFS2_FS]
   }
   config JFFS2_FS_WRITEBUFFER boolean {
    prompt "JFFS2 write-buffering support" if [JFFS2_FS]
    depends on [JFFS2_FS]
    default [y] if [JFFS2_FS]
    inherited [JFFS2_FS]
    config JFFS2_FS_WBUF_VERIFY boolean {
     prompt "Verify JFFS2 write-buffer reads" if [JFFS2_FS_WRITEBUFFER]
     depends on [JFFS2_FS_WRITEBUFFER]
     default [n] if [JFFS2_FS_WRITEBUFFER]
     inherited [JFFS2_FS_WRITEBUFFER]
    }
   }
   config JFFS2_SUMMARY boolean {
    prompt "JFFS2 summary support (EXPERIMENTAL)" if [JFFS2_FS && EXPERIMENTAL]
    depends on [JFFS2_FS && EXPERIMENTAL]
    default [n] if [JFFS2_FS && EXPERIMENTAL]
    inherited [JFFS2_FS && EXPERIMENTAL]
   }
   config JFFS2_FS_XATTR boolean {
    prompt "JFFS2 XATTR support (EXPERIMENTAL)" if [JFFS2_FS && EXPERIMENTAL]
    depends on [JFFS2_FS && EXPERIMENTAL]
    default [n] if [JFFS2_FS && EXPERIMENTAL]
    inherited [JFFS2_FS && EXPERIMENTAL]
    config JFFS2_FS_POSIX_ACL boolean {
     prompt "JFFS2 POSIX Access Control Lists" if [JFFS2_FS_XATTR]
     depends on [JFFS2_FS_XATTR]
     default [y] if [JFFS2_FS_XATTR]
     select FS_POSIX_ACL if [JFFS2_FS_XATTR]
     inherited [JFFS2_FS_XATTR]
    }
    config JFFS2_FS_SECURITY boolean {
     prompt "JFFS2 Security Labels" if [JFFS2_FS_XATTR]
     depends on [JFFS2_FS_XATTR]
     default [y] if [JFFS2_FS_XATTR]
     inherited [JFFS2_FS_XATTR]
    }
   }
   config JFFS2_COMPRESSION_OPTIONS boolean {
    prompt "Advanced compression options for JFFS2" if [JFFS2_FS]
    depends on [JFFS2_FS]
    default [n] if [JFFS2_FS]
    inherited [JFFS2_FS]
    config JFFS2_ZLIB boolean {
     prompt "JFFS2 ZLIB compression support" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     select ZLIB_INFLATE if [JFFS2_FS]
     select ZLIB_DEFLATE if [JFFS2_FS]
     depends on [JFFS2_FS]
     default [y] if [JFFS2_FS]
     inherited [JFFS2_FS]
    }
    config JFFS2_LZO boolean {
     prompt "JFFS2 LZO compression support" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     select LZO_COMPRESS if [JFFS2_FS]
     select LZO_DECOMPRESS if [JFFS2_FS]
     depends on [JFFS2_FS]
     default [n] if [JFFS2_FS]
     inherited [JFFS2_FS]
    }
    config JFFS2_RTIME boolean {
     prompt "JFFS2 RTIME compression support" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     depends on [JFFS2_FS]
     default [y] if [JFFS2_FS]
     inherited [JFFS2_FS]
    }
    config JFFS2_RUBIN boolean {
     prompt "JFFS2 RUBIN compression support" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     depends on [JFFS2_FS]
     default [n] if [JFFS2_FS]
     inherited [JFFS2_FS]
    }
    choice boolean {
     prompt "JFFS2 default compression mode" if [JFFS2_FS && JFFS2_COMPRESSION_OPTIONS]
     default [JFFS2_CMODE_PRIORITY] if [JFFS2_FS]
     depends on [JFFS2_FS]
     config JFFS2_CMODE_NONE boolean {
      prompt "no compression" if [<choice>]
      inherited [<choice>]
     }
     config JFFS2_CMODE_PRIORITY boolean {
      prompt "priority" if [<choice>]
      inherited [<choice>]
     }
     config JFFS2_CMODE_SIZE boolean {
      prompt "size (EXPERIMENTAL)" if [<choice>]
      inherited [<choice>]
     }
     config JFFS2_CMODE_FAVOURLZO boolean {
      prompt "Favour LZO" if [<choice>]
      inherited [<choice>]
     }
    }
   }
  }
  config CRAMFS tristate {
   prompt "Compressed ROM file system support (cramfs)" if [BLOCK]
   depends on [BLOCK]
   select ZLIB_INFLATE if [BLOCK]
   inherited [BLOCK]
  }
  config VXFS_FS tristate {
   prompt "FreeVxFS file system support (VERITAS VxFS(TM) compatible)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config HPFS_FS tristate {
   prompt "OS/2 HPFS file system support" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config QNX4FS_FS tristate {
   prompt "QNX4 file system support (read only)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config QNX4FS_RW boolean {
    prompt "QNX4FS write support (DANGEROUS)" if [QNX4FS_FS && EXPERIMENTAL && BROKEN]
    depends on [QNX4FS_FS && EXPERIMENTAL && BROKEN]
    inherited [QNX4FS_FS && EXPERIMENTAL && BROKEN]
   }
  }
  config SYSV_FS tristate {
   prompt "System V/Xenix/V7/Coherent file system support" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
  }
  config UFS_FS tristate {
   prompt "UFS file system support (read only)" if [BLOCK]
   depends on [BLOCK]
   inherited [BLOCK]
   config UFS_FS_WRITE boolean {
    prompt "UFS file system write support (DANGEROUS)" if [UFS_FS && EXPERIMENTAL]
    depends on [UFS_FS && EXPERIMENTAL]
    inherited [UFS_FS && EXPERIMENTAL]
   }
   config UFS_DEBUG boolean {
    prompt "UFS debugging" if [UFS_FS]
    depends on [UFS_FS]
    inherited [UFS_FS]
   }
  }
 }
 menuconfig NETWORK_FILESYSTEMS boolean {
  prompt "Network File Systems" if [NET]
  default [y] if [NET]
  depends on [NET]
  inherited [NET]
  if [NETWORK_FILESYSTEMS] {
   config NFS_FS tristate {
    prompt "NFS file system support" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select LOCKD if [NETWORK_FILESYSTEMS && INET]
    select SUNRPC if [NETWORK_FILESYSTEMS && INET]
    select NFS_ACL_SUPPORT if [NETWORK_FILESYSTEMS && INET && NFS_V3_ACL]
    inherited [NETWORK_FILESYSTEMS && INET]
    config NFS_V3 boolean {
     prompt "Provide NFSv3 client support" if [NETWORK_FILESYSTEMS && NFS_FS]
     depends on [NFS_FS]
     inherited [NETWORK_FILESYSTEMS && NFS_FS]
     config NFS_V3_ACL boolean {
      prompt "Provide client support for the NFSv3 ACL protocol extension" if [NETWORK_FILESYSTEMS && NFS_V3]
      depends on [NFS_V3]
      inherited [NETWORK_FILESYSTEMS && NFS_V3]
     }
    }
    config NFS_V4 boolean {
     prompt "Provide NFSv4 client support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     depends on [NFS_FS && EXPERIMENTAL]
     select RPCSEC_GSS_KRB5 if [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && NFS_FS && EXPERIMENTAL]
    }
    config NFS_DIRECTIO boolean {
     prompt "Allow direct I/O on NFS files" if [NETWORK_FILESYSTEMS && NFS_FS]
     depends on [NFS_FS]
     inherited [NETWORK_FILESYSTEMS && NFS_FS]
    }
   }
   config NFSD tristate {
    prompt "NFS server support" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select LOCKD if [NETWORK_FILESYSTEMS && INET]
    select SUNRPC if [NETWORK_FILESYSTEMS && INET]
    select EXPORTFS if [NETWORK_FILESYSTEMS && INET]
    select NFSD_V2_ACL if [NETWORK_FILESYSTEMS && INET && NFSD_V3_ACL]
    select NFS_ACL_SUPPORT if [NETWORK_FILESYSTEMS && INET && NFSD_V2_ACL]
    select NFSD_TCP if [NETWORK_FILESYSTEMS && INET && NFSD_V4]
    select CRYPTO_MD5 if [NETWORK_FILESYSTEMS && INET && NFSD_V4]
    select CRYPTO if [NETWORK_FILESYSTEMS && INET && NFSD_V4]
    select FS_POSIX_ACL if [NETWORK_FILESYSTEMS && INET && NFSD_V4]
    inherited [NETWORK_FILESYSTEMS && INET]
    config NFSD_V2_ACL boolean {
     depends on [NFSD]
     inherited [NETWORK_FILESYSTEMS && NFSD]
    }
    config NFSD_V3 boolean {
     prompt "Provide NFSv3 server support" if [NETWORK_FILESYSTEMS && NFSD]
     depends on [NFSD]
     inherited [NETWORK_FILESYSTEMS && NFSD]
     config NFSD_V3_ACL boolean {
      prompt "Provide server support for the NFSv3 ACL protocol extension" if [NETWORK_FILESYSTEMS && NFSD_V3]
      depends on [NFSD_V3]
      inherited [NETWORK_FILESYSTEMS && NFSD_V3]
     }
     config NFSD_V4 boolean {
      prompt "Provide NFSv4 server support (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && NFSD && NFSD_V3 && EXPERIMENTAL]
      depends on [NFSD && NFSD_V3 && EXPERIMENTAL]
      select RPCSEC_GSS_KRB5 if [NETWORK_FILESYSTEMS && NFSD && NFSD_V3 && EXPERIMENTAL]
      inherited [NETWORK_FILESYSTEMS && NFSD && NFSD_V3 && EXPERIMENTAL]
     }
    }
    config NFSD_TCP boolean {
     prompt "Provide NFS server over TCP support" if [NETWORK_FILESYSTEMS && NFSD]
     depends on [NFSD]
     default [y] if [NETWORK_FILESYSTEMS && NFSD]
     inherited [NETWORK_FILESYSTEMS && NFSD]
    }
   }
   config ROOT_NFS boolean {
    prompt "Root file system on NFS" if [NETWORK_FILESYSTEMS && NFS_FS="y" && IP_PNP]
    depends on [NFS_FS="y" && IP_PNP]
    inherited [NETWORK_FILESYSTEMS && NFS_FS="y" && IP_PNP]
   }
   config LOCKD tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config LOCKD_V4 boolean {
    depends on [NFSD_V3 || NFS_V3]
    default [y] if [NETWORK_FILESYSTEMS && (NFSD_V3 || NFS_V3)]
    inherited [NETWORK_FILESYSTEMS && (NFSD_V3 || NFS_V3)]
   }
   config EXPORTFS tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config NFS_ACL_SUPPORT tristate {
    select FS_POSIX_ACL if [NETWORK_FILESYSTEMS]
    inherited [NETWORK_FILESYSTEMS]
   }
   config NFS_COMMON boolean {
    depends on [NFSD || NFS_FS]
    default [y] if [NETWORK_FILESYSTEMS && (NFSD || NFS_FS)]
    inherited [NETWORK_FILESYSTEMS && (NFSD || NFS_FS)]
   }
   config SUNRPC tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config SUNRPC_GSS tristate {
    inherited [NETWORK_FILESYSTEMS]
   }
   config SUNRPC_XPRT_RDMA tristate {
    prompt "RDMA transport for sunrpc (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && INFINIBAND && EXPERIMENTAL]
    depends on [SUNRPC && INFINIBAND && EXPERIMENTAL]
    default [m] if [NETWORK_FILESYSTEMS && SUNRPC && INFINIBAND && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && INFINIBAND && EXPERIMENTAL]
   }
   config SUNRPC_BIND34 boolean {
    prompt "Support for rpcbind versions 3 & 4 (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    depends on [SUNRPC && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
   }
   config RPCSEC_GSS_KRB5 tristate {
    prompt "Secure RPC: Kerberos V mechanism (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    depends on [SUNRPC && EXPERIMENTAL]
    select SUNRPC_GSS if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_MD5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_DES if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CBC if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
   }
   config RPCSEC_GSS_SPKM3 tristate {
    prompt "Secure RPC: SPKM3 mechanism (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    depends on [SUNRPC && EXPERIMENTAL]
    select SUNRPC_GSS if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_MD5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_DES if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CAST5 if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    select CRYPTO_CBC if [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && SUNRPC && EXPERIMENTAL]
   }
   config SMB_FS tristate {
    prompt "SMB file system support (to mount Windows shares etc.)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select NLS if [NETWORK_FILESYSTEMS && INET]
    inherited [NETWORK_FILESYSTEMS && INET]
    config SMB_NLS_DEFAULT boolean {
     prompt "Use a default NLS" if [NETWORK_FILESYSTEMS && SMB_FS]
     depends on [SMB_FS]
     inherited [NETWORK_FILESYSTEMS && SMB_FS]
     config SMB_NLS_REMOTE string {
      prompt "Default Remote NLS Option" if [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
      depends on [SMB_NLS_DEFAULT]
      default ["cp437"] if [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
      inherited [NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT]
     }
    }
   }
   config CIFS tristate {
    prompt "CIFS support (advanced network filesystem for Samba, Window and other CIFS compliant servers)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    select NLS if [NETWORK_FILESYSTEMS && INET]
    inherited [NETWORK_FILESYSTEMS && INET]
    config CIFS_STATS boolean {
     prompt "CIFS statistics" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
     config CIFS_STATS2 boolean {
      prompt "Extended statistics" if [NETWORK_FILESYSTEMS && CIFS_STATS]
      depends on [CIFS_STATS]
      inherited [NETWORK_FILESYSTEMS && CIFS_STATS]
     }
    }
    config CIFS_WEAK_PW_HASH boolean {
     prompt "Support legacy servers which use weaker LANMAN security" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
    }
    config CIFS_XATTR boolean {
     prompt "CIFS extended attributes" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
     config CIFS_POSIX boolean {
      prompt "CIFS POSIX Extensions" if [NETWORK_FILESYSTEMS && CIFS_XATTR]
      depends on [CIFS_XATTR]
      inherited [NETWORK_FILESYSTEMS && CIFS_XATTR]
     }
    }
    config CIFS_DEBUG2 boolean {
     prompt "Enable additional CIFS debugging routines" if [NETWORK_FILESYSTEMS && CIFS]
     depends on [CIFS]
     inherited [NETWORK_FILESYSTEMS && CIFS]
    }
    config CIFS_EXPERIMENTAL boolean {
     prompt "CIFS Experimental Features (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && CIFS && EXPERIMENTAL]
     depends on [CIFS && EXPERIMENTAL]
     inherited [NETWORK_FILESYSTEMS && CIFS && EXPERIMENTAL]
     config CIFS_UPCALL boolean {
      prompt "Kerberos/SPNEGO advanced session setup (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && CIFS_EXPERIMENTAL && KEYS]
      depends on [CIFS_EXPERIMENTAL]
      depends on [KEYS]
      inherited [NETWORK_FILESYSTEMS && CIFS_EXPERIMENTAL && KEYS]
     }
    }
   }
   config NCP_FS tristate {
    prompt "NCP file system support (to mount NetWare volumes)" if [NETWORK_FILESYSTEMS && (IPX!="n" || INET)]
    depends on [IPX!="n" || INET]
    inherited [NETWORK_FILESYSTEMS && (IPX!="n" || INET)]
    config NCPFS_PACKET_SIGNING boolean {
     prompt "Packet signatures" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_IOCTL_LOCKING boolean {
     prompt "Proprietary file locking" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_STRONG boolean {
     prompt "Clear remove/delete inhibit when needed" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_NFS_NS boolean {
     prompt "Use NFS namespace if available" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_OS2_NS boolean {
     prompt "Use LONG (OS/2) namespace if available" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_SMALLDOS boolean {
     prompt "Lowercase DOS filenames" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_NLS boolean {
     prompt "Use Native Language Support" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     select NLS if [NETWORK_FILESYSTEMS && NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
    config NCPFS_EXTRAS boolean {
     prompt "Enable symbolic links and execute flags" if [NETWORK_FILESYSTEMS && NCP_FS]
     depends on [NCP_FS]
     inherited [NETWORK_FILESYSTEMS && NCP_FS]
    }
   }
   config CODA_FS tristate {
    prompt "Coda file system support (advanced network fs)" if [NETWORK_FILESYSTEMS && INET]
    depends on [INET]
    inherited [NETWORK_FILESYSTEMS && INET]
    config CODA_FS_OLD_API boolean {
     prompt "Use 96-bit Coda file identifiers" if [NETWORK_FILESYSTEMS && CODA_FS]
     depends on [CODA_FS]
     inherited [NETWORK_FILESYSTEMS && CODA_FS]
    }
   }
   config AFS_FS tristate {
    prompt "Andrew File System support (AFS) (EXPERIMENTAL)" if [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    depends on [INET && EXPERIMENTAL]
    select AF_RXRPC if [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && INET && EXPERIMENTAL]
    config AFS_DEBUG boolean {
     prompt "AFS dynamic debugging" if [NETWORK_FILESYSTEMS && AFS_FS]
     depends on [AFS_FS]
     inherited [NETWORK_FILESYSTEMS && AFS_FS]
    }
   }
   config 9P_FS tristate {
    prompt "Plan 9 Resource Sharing Support (9P2000) (Experimental)" if [NETWORK_FILESYSTEMS && INET && NET_9P && EXPERIMENTAL]
    depends on [INET && NET_9P && EXPERIMENTAL]
    inherited [NETWORK_FILESYSTEMS && INET && NET_9P && EXPERIMENTAL]
   }
  }
 }
 if [BLOCK] {
  menu "Partition Types" {
   depends on [BLOCK]
   config PARTITION_ADVANCED boolean {
    prompt "Advanced partition selection" if [BLOCK]
    inherited [BLOCK]
    config ACORN_PARTITION boolean {
     prompt "Acorn partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ARCH_ACORN]
     inherited [BLOCK]
     config ACORN_PARTITION_CUMANA boolean {
      prompt "Cumana partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_EESOX boolean {
      prompt "EESOX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ICS boolean {
      prompt "ICS partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_ADFS boolean {
      prompt "Native filecore partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_POWERTEC boolean {
      prompt "PowerTec partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
     config ACORN_PARTITION_RISCIX boolean {
      prompt "RISCiX partition support" if [BLOCK && ACORN_PARTITION && PARTITION_ADVANCED]
      default [y] if [BLOCK && ACORN_PARTITION && ARCH_ACORN]
      depends on [ACORN_PARTITION]
      inherited [BLOCK && ACORN_PARTITION]
     }
    }
    config OSF_PARTITION boolean {
     prompt "Alpha OSF partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ALPHA]
     inherited [BLOCK]
    }
    config AMIGA_PARTITION boolean {
     prompt "Amiga partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (AMIGA || AFFS_FS="y")]
     inherited [BLOCK]
    }
    config ATARI_PARTITION boolean {
     prompt "Atari partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && ATARI]
     inherited [BLOCK]
    }
    config IBM_PARTITION boolean {
     prompt "IBM disk label and partition support" if [BLOCK && PARTITION_ADVANCED && S390]
     depends on [PARTITION_ADVANCED && S390]
     inherited [BLOCK && PARTITION_ADVANCED && S390]
    }
    config MAC_PARTITION boolean {
     prompt "Macintosh partition map support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (MAC || PPC_PMAC)]
     inherited [BLOCK]
    }
    config MSDOS_PARTITION boolean {
     prompt "PC BIOS (MSDOS partition tables) support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK]
     inherited [BLOCK]
     config BSD_DISKLABEL boolean {
      prompt "BSD disklabel (FreeBSD partition tables) support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config MINIX_SUBPARTITION boolean {
      prompt "Minix subpartition support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config SOLARIS_X86_PARTITION boolean {
      prompt "Solaris (x86) partition table support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
     config UNIXWARE_DISKLABEL boolean {
      prompt "Unixware slices support" if [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
      depends on [PARTITION_ADVANCED && MSDOS_PARTITION]
      inherited [BLOCK && PARTITION_ADVANCED && MSDOS_PARTITION]
     }
    }
    config LDM_PARTITION boolean {
     prompt "Windows Logical Disk Manager (Dynamic Disk) support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
     config LDM_DEBUG boolean {
      prompt "Windows LDM extra logging" if [BLOCK && LDM_PARTITION]
      depends on [LDM_PARTITION]
      inherited [BLOCK && LDM_PARTITION]
     }
    }
    config SGI_PARTITION boolean {
     prompt "SGI partition support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (SGI_IP22 || SGI_IP27 || (MACH_JAZZ || SNI_RM) && !CPU_LITTLE_ENDIAN)]
     inherited [BLOCK]
    }
    config ULTRIX_PARTITION boolean {
     prompt "Ultrix partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && MACH_DECSTATION]
     inherited [BLOCK]
    }
    config SUN_PARTITION boolean {
     prompt "Sun partition tables support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && (SPARC || SUN3 || SUN3X)]
     inherited [BLOCK]
    }
    config KARMA_PARTITION boolean {
     prompt "Karma Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
    config EFI_PARTITION boolean {
     prompt "EFI GUID Partition support" if [BLOCK && PARTITION_ADVANCED]
     depends on [PARTITION_ADVANCED]
     select CRC32 if [BLOCK && PARTITION_ADVANCED]
     inherited [BLOCK && PARTITION_ADVANCED]
    }
    config SYSV68_PARTITION boolean {
     prompt "SYSV68 partition table support" if [BLOCK && PARTITION_ADVANCED]
     default [y] if [BLOCK && VME]
     inherited [BLOCK]
    }
   }
  }
 }
 menuconfig NLS tristate {
  prompt "Native language support" if []
  if [NLS] {
   config NLS_DEFAULT string {
    prompt "Default NLS Option" if [NLS]
    default ["iso8859-1"] if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_437 tristate {
    prompt "Codepage 437 (United States, Canada)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_737 tristate {
    prompt "Codepage 737 (Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_775 tristate {
    prompt "Codepage 775 (Baltic Rim)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_850 tristate {
    prompt "Codepage 850 (Europe)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_852 tristate {
    prompt "Codepage 852 (Central/Eastern Europe)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_855 tristate {
    prompt "Codepage 855 (Cyrillic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_857 tristate {
    prompt "Codepage 857 (Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_860 tristate {
    prompt "Codepage 860 (Portuguese)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_861 tristate {
    prompt "Codepage 861 (Icelandic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_862 tristate {
    prompt "Codepage 862 (Hebrew)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_863 tristate {
    prompt "Codepage 863 (Canadian French)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_864 tristate {
    prompt "Codepage 864 (Arabic)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_865 tristate {
    prompt "Codepage 865 (Norwegian, Danish)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_866 tristate {
    prompt "Codepage 866 (Cyrillic/Russian)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_869 tristate {
    prompt "Codepage 869 (Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_936 tristate {
    prompt "Simplified Chinese charset (CP936, GB2312)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_950 tristate {
    prompt "Traditional Chinese charset (Big5)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_932 tristate {
    prompt "Japanese charsets (Shift-JIS, EUC-JP)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_949 tristate {
    prompt "Korean charset (CP949, EUC-KR)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_874 tristate {
    prompt "Thai charset (CP874, TIS-620)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_8 tristate {
    prompt "Hebrew charsets (ISO-8859-8, CP1255)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1250 tristate {
    prompt "Windows CP1250 (Slavic/Central European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_CODEPAGE_1251 tristate {
    prompt "Windows CP1251 (Bulgarian, Belarusian)" if [NLS]
    inherited [NLS]
   }
   config NLS_ASCII tristate {
    prompt "ASCII (United States)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_1 tristate {
    prompt "NLS ISO 8859-1  (Latin 1; Western European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_2 tristate {
    prompt "NLS ISO 8859-2  (Latin 2; Slavic/Central European Languages)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_3 tristate {
    prompt "NLS ISO 8859-3  (Latin 3; Esperanto, Galician, Maltese, Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_4 tristate {
    prompt "NLS ISO 8859-4  (Latin 4; old Baltic charset)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_5 tristate {
    prompt "NLS ISO 8859-5  (Cyrillic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_6 tristate {
    prompt "NLS ISO 8859-6  (Arabic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_7 tristate {
    prompt "NLS ISO 8859-7  (Modern Greek)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_9 tristate {
    prompt "NLS ISO 8859-9  (Latin 5; Turkish)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_13 tristate {
    prompt "NLS ISO 8859-13 (Latin 7; Baltic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_14 tristate {
    prompt "NLS ISO 8859-14 (Latin 8; Celtic)" if [NLS]
    inherited [NLS]
   }
   config NLS_ISO8859_15 tristate {
    prompt "NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)" if [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_R tristate {
    prompt "NLS KOI8-R (Russian)" if [NLS]
    inherited [NLS]
   }
   config NLS_KOI8_U tristate {
    prompt "NLS KOI8-U/RU (Ukrainian, Belarusian)" if [NLS]
    inherited [NLS]
   }
   config NLS_UTF8 tristate {
    prompt "NLS UTF-8" if [NLS]
    inherited [NLS]
   }
  }
 }
 menuconfig DLM tristate {
  prompt "Distributed Lock Manager (DLM)" if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  depends on [EXPERIMENTAL && INET]
  depends on [SYSFS && (IPV6 || IPV6="n")]
  select CONFIGFS_FS if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  select IP_SCTP if [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  inherited [EXPERIMENTAL && INET && SYSFS && (IPV6 || IPV6="n")]
  config DLM_DEBUG boolean {
   prompt "DLM debugging" if [DLM]
   depends on [DLM]
   inherited [DLM]
  }
 }
}
menuconfig INSTRUMENTATION boolean {
 prompt "Instrumentation Support" if []
 default [y] if []
 if [INSTRUMENTATION] {
  config PROFILING boolean {
   prompt "Profiling support (EXPERIMENTAL)" if [INSTRUMENTATION]
   inherited [INSTRUMENTATION]
   config OPROFILE tristate {
    prompt "OProfile system profiling (EXPERIMENTAL)" if [INSTRUMENTATION && PROFILING && !UML && (ARCH_SUPPORTS_OPROFILE || ALPHA || ARM || BLACKFIN || IA64 || M32R || PARISC || PPC || S390 || SUPERH || SPARC)]
    depends on [PROFILING && !UML]
    depends on [ARCH_SUPPORTS_OPROFILE || ALPHA || ARM || BLACKFIN || IA64 || M32R || PARISC || PPC || S390 || SUPERH || SPARC]
    inherited [INSTRUMENTATION && PROFILING && !UML && (ARCH_SUPPORTS_OPROFILE || ALPHA || ARM || BLACKFIN || IA64 || M32R || PARISC || PPC || S390 || SUPERH || SPARC)]
   }
  }
  config KPROBES boolean {
   prompt "Kprobes" if [INSTRUMENTATION && KALLSYMS && MODULES && !UML && (X86_32 || IA64 || PPC || S390 || SPARC64 || X86_64 || AVR32)]
   depends on [KALLSYMS && MODULES && !UML]
   depends on [X86_32 || IA64 || PPC || S390 || SPARC64 || X86_64 || AVR32]
   inherited [INSTRUMENTATION && KALLSYMS && MODULES && !UML && (X86_32 || IA64 || PPC || S390 || SPARC64 || X86_64 || AVR32)]
  }
  config MARKERS boolean {
   prompt "Activate markers" if [INSTRUMENTATION]
   inherited [INSTRUMENTATION]
  }
 }
}
menu "Kernel hacking" {
 config TRACE_IRQFLAGS_SUPPORT boolean {
  default [y] if []
 }
 config PRINTK_TIME boolean {
  prompt "Show timing information on printks" if [PRINTK]
  depends on [PRINTK]
  inherited [PRINTK]
 }
 config ENABLE_WARN_DEPRECATED boolean {
  prompt "Enable __deprecated logic" if []
  default [y] if []
 }
 config ENABLE_MUST_CHECK boolean {
  prompt "Enable __must_check logic" if []
  default [y] if []
 }
 config MAGIC_SYSRQ boolean {
  prompt "Magic SysRq key" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config UNUSED_SYMBOLS boolean {
  prompt "Enable unused/obsolete exported symbols" if []
  default [y] if [X86]
 }
 config DEBUG_FS boolean {
  prompt "Debug Filesystem" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
 }
 config HEADERS_CHECK boolean {
  prompt "Run 'make headers_check' when building vmlinux" if [!UML]
  depends on [!UML]
  inherited [!UML]
 }
 config DEBUG_KERNEL boolean {
  prompt "Kernel debugging" if []
  config DEBUG_SHIRQ boolean {
   prompt "Debug shared IRQ handlers" if [DEBUG_KERNEL && GENERIC_HARDIRQS]
   depends on [DEBUG_KERNEL && GENERIC_HARDIRQS]
   inherited [DEBUG_KERNEL && GENERIC_HARDIRQS]
  }
  config DETECT_SOFTLOCKUP boolean {
   prompt "Detect Soft Lockups" if [DEBUG_KERNEL && !S390]
   depends on [DEBUG_KERNEL && !S390]
   default [y] if [DEBUG_KERNEL && !S390]
   inherited [DEBUG_KERNEL && !S390]
  }
  config SCHED_DEBUG boolean {
   prompt "Collect scheduler debugging info" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   default [y] if [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config SCHEDSTATS boolean {
   prompt "Collect scheduler statistics" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config TIMER_STATS boolean {
   prompt "Collect kernel timers statistics" if [DEBUG_KERNEL && PROC_FS]
   depends on [DEBUG_KERNEL && PROC_FS]
   inherited [DEBUG_KERNEL && PROC_FS]
  }
  config DEBUG_SLAB boolean {
   prompt "Debug slab memory allocations" if [DEBUG_KERNEL && SLAB]
   depends on [DEBUG_KERNEL && SLAB]
   inherited [DEBUG_KERNEL && SLAB]
   config DEBUG_SLAB_LEAK boolean {
    prompt "Memory leak debugging" if [DEBUG_SLAB]
    depends on [DEBUG_SLAB]
    inherited [DEBUG_SLAB]
   }
  }
 }
 config SLUB_DEBUG_ON boolean {
  prompt "SLUB debugging on by default" if [SLUB && SLUB_DEBUG]
  depends on [SLUB && SLUB_DEBUG]
  default [n] if [SLUB && SLUB_DEBUG]
  inherited [SLUB && SLUB_DEBUG]
 }
 config DEBUG_PREEMPT boolean {
  prompt "Debug preemptible kernel" if [DEBUG_KERNEL && PREEMPT && (TRACE_IRQFLAGS_SUPPORT || PPC64)]
  depends on [DEBUG_KERNEL && PREEMPT && (TRACE_IRQFLAGS_SUPPORT || PPC64)]
  default [y] if [DEBUG_KERNEL && PREEMPT && (TRACE_IRQFLAGS_SUPPORT || PPC64)]
  inherited [DEBUG_KERNEL && PREEMPT && (TRACE_IRQFLAGS_SUPPORT || PPC64)]
 }
 config DEBUG_RT_MUTEXES boolean {
  prompt "RT Mutex debugging, deadlock detection" if [DEBUG_KERNEL && RT_MUTEXES]
  depends on [DEBUG_KERNEL && RT_MUTEXES]
  inherited [DEBUG_KERNEL && RT_MUTEXES]
  config DEBUG_PI_LIST boolean {
   default [y] if [DEBUG_RT_MUTEXES]
   depends on [DEBUG_RT_MUTEXES]
   inherited [DEBUG_RT_MUTEXES]
  }
 }
 config RT_MUTEX_TESTER boolean {
  prompt "Built-in scriptable tester for rt-mutexes" if [DEBUG_KERNEL && RT_MUTEXES]
  depends on [DEBUG_KERNEL && RT_MUTEXES]
  inherited [DEBUG_KERNEL && RT_MUTEXES]
 }
 config DEBUG_SPINLOCK boolean {
  prompt "Spinlock and rw-lock debugging: basic checks" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_MUTEXES boolean {
  prompt "Mutex debugging: basic checks" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_SEMAPHORE boolean {
  prompt "Semaphore debugging" if [DEBUG_KERNEL && (ALPHA || FRV)]
  depends on [DEBUG_KERNEL]
  depends on [ALPHA || FRV]
  default [n] if [DEBUG_KERNEL && (ALPHA || FRV)]
  inherited [DEBUG_KERNEL && (ALPHA || FRV)]
 }
 config DEBUG_LOCK_ALLOC boolean {
  prompt "Lock debugging: detect incorrect freeing of live locks" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config PROVE_LOCKING boolean {
  prompt "Lock debugging: prove locking correctness" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_LOCK_ALLOC if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  default [n] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config LOCKDEP boolean {
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select STACKTRACE if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select FRAME_POINTER if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT && !X86 && !MIPS]
  select KALLSYMS if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select KALLSYMS_ALL if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config LOCK_STAT boolean {
  prompt "Lock usage statistics" if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  depends on [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select LOCKDEP if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_SPINLOCK if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_MUTEXES if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  select DEBUG_LOCK_ALLOC if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  default [n] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && STACKTRACE_SUPPORT && LOCKDEP_SUPPORT]
 }
 config DEBUG_LOCKDEP boolean {
  prompt "Lock dependency engine debugging" if [DEBUG_KERNEL && LOCKDEP]
  depends on [DEBUG_KERNEL && LOCKDEP]
  inherited [DEBUG_KERNEL && LOCKDEP]
 }
 config TRACE_IRQFLAGS boolean {
  depends on [DEBUG_KERNEL]
  default [y] if [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
  depends on [TRACE_IRQFLAGS_SUPPORT]
  depends on [PROVE_LOCKING]
  inherited [DEBUG_KERNEL && TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING]
 }
 config DEBUG_SPINLOCK_SLEEP boolean {
  prompt "Spinlock debugging: sleep-inside-spinlock checking" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_LOCKING_API_SELFTESTS boolean {
  prompt "Locking API boot-time self-tests" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config STACKTRACE boolean {
  depends on [DEBUG_KERNEL]
  depends on [STACKTRACE_SUPPORT]
  inherited [DEBUG_KERNEL && STACKTRACE_SUPPORT]
 }
 config DEBUG_KOBJECT boolean {
  prompt "kobject debugging" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_HIGHMEM boolean {
  prompt "Highmem debugging" if [DEBUG_KERNEL && HIGHMEM]
  depends on [DEBUG_KERNEL && HIGHMEM]
  inherited [DEBUG_KERNEL && HIGHMEM]
 }
 config DEBUG_BUGVERBOSE boolean {
  prompt "Verbose BUG() reporting (adds 70K)" if [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN) && DEBUG_KERNEL && EMBEDDED]
  depends on [BUG]
  depends on [ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN]
  default [!EMBEDDED] if [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN)]
  inherited [BUG && (ARM || AVR32 || M32R || M68K || SPARC32 || SPARC64 || FRV || SUPERH || GENERIC_BUG || BLACKFIN)]
 }
 config DEBUG_INFO boolean {
  prompt "Compile the kernel with debug info" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_VM boolean {
  prompt "Debug VM" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_LIST boolean {
  prompt "Debug linked list manipulation" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_SG boolean {
  prompt "Debug SG table operations" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config FRAME_POINTER boolean {
  prompt "Compile the kernel with frame pointers" if [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH || BLACKFIN)]
  depends on [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH || BLACKFIN)]
  default [y] if [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH || BLACKFIN) && DEBUG_INFO && UML]
  inherited [DEBUG_KERNEL && (X86 || CRIS || M68K || M68KNOMMU || FRV || UML || S390 || AVR32 || SUPERH || BLACKFIN)]
 }
 config FORCED_INLINING boolean {
  prompt "Force gcc to inline functions marked 'inline'" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  default [y] if [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config BOOT_PRINTK_DELAY boolean {
  prompt "Delay each boot printk message by N milliseconds" if [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
  depends on [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
  inherited [DEBUG_KERNEL && PRINTK && GENERIC_CALIBRATE_DELAY]
 }
 config RCU_TORTURE_TEST tristate {
  prompt "torture tests for RCU" if [DEBUG_KERNEL && m && <choice>]
  depends on [DEBUG_KERNEL]
  depends on [m]
  default [n] if [DEBUG_KERNEL && m && <choice>]
  inherited [DEBUG_KERNEL && m && <choice>]
 }
 config LKDTM tristate {
  prompt "Linux Kernel Dump Test Tool Module" if [DEBUG_KERNEL && KPROBES]
  depends on [DEBUG_KERNEL]
  depends on [KPROBES]
  default [n] if [DEBUG_KERNEL && KPROBES]
  inherited [DEBUG_KERNEL && KPROBES]
 }
 config FAULT_INJECTION boolean {
  prompt "Fault-injection framework" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
  config FAILSLAB boolean {
   prompt "Fault-injection capability for kmalloc" if [FAULT_INJECTION]
   depends on [FAULT_INJECTION]
   inherited [FAULT_INJECTION]
  }
  config FAIL_PAGE_ALLOC boolean {
   prompt "Fault-injection capabilitiy for alloc_pages()" if [FAULT_INJECTION]
   depends on [FAULT_INJECTION]
   inherited [FAULT_INJECTION]
  }
  config FAIL_MAKE_REQUEST boolean {
   prompt "Fault-injection capability for disk IO" if [FAULT_INJECTION]
   depends on [FAULT_INJECTION]
   inherited [FAULT_INJECTION]
  }
  config FAULT_INJECTION_DEBUG_FS boolean {
   prompt "Debugfs entries for fault-injection capabilities" if [FAULT_INJECTION && SYSFS && DEBUG_FS]
   depends on [FAULT_INJECTION && SYSFS && DEBUG_FS]
   inherited [FAULT_INJECTION && SYSFS && DEBUG_FS]
   config FAULT_INJECTION_STACKTRACE_FILTER boolean {
    prompt "stacktrace filter for fault-injection capabilities" if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
    depends on [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT]
    depends on [!X86_64]
    select STACKTRACE if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
    select FRAME_POINTER if [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
    inherited [FAULT_INJECTION_DEBUG_FS && STACKTRACE_SUPPORT && !X86_64]
   }
  }
 }
 menuconfig SAMPLES boolean {
  prompt "Sample kernel code" if []
  if [SAMPLES] {
   config SAMPLE_MARKERS tristate {
    prompt "Build markers examples -- loadable modules only" if [SAMPLES && MARKERS && m && <choice>]
    depends on [MARKERS && m]
    inherited [SAMPLES && MARKERS && m && <choice>]
   }
  }
 }
 config EARLY_PRINTK boolean {
  prompt "Early printk" if [EMBEDDED && DEBUG_KERNEL && X86_32]
  default [y] if []
 }
 config DEBUG_STACKOVERFLOW boolean {
  prompt "Check for stack overflows" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_STACK_USAGE boolean {
  prompt "Stack utilization instrumentation" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config DEBUG_PAGEALLOC boolean {
  prompt "Debug page memory allocations" if [DEBUG_KERNEL && !HIBERNATION && !HUGETLBFS && X86_32]
  depends on [DEBUG_KERNEL && !HIBERNATION && !HUGETLBFS]
  depends on [X86_32]
  inherited [DEBUG_KERNEL && !HIBERNATION && !HUGETLBFS && X86_32]
 }
 config DEBUG_RODATA boolean {
  prompt "Write protect kernel read-only data structures" if [DEBUG_KERNEL]
  depends on [DEBUG_KERNEL]
  inherited [DEBUG_KERNEL]
 }
 config 4KSTACKS boolean {
  prompt "Use 4Kb for kernel stacks instead of 8Kb" if [DEBUG_KERNEL && X86_32]
  depends on [DEBUG_KERNEL]
  depends on [X86_32]
  inherited [DEBUG_KERNEL && X86_32]
 }
 config X86_FIND_SMP_CONFIG boolean {
  default [y] if [(X86_LOCAL_APIC || X86_VOYAGER) && X86_32]
  depends on [X86_LOCAL_APIC || X86_VOYAGER]
  depends on [X86_32]
  inherited [(X86_LOCAL_APIC || X86_VOYAGER) && X86_32]
 }
 config X86_MPPARSE boolean {
  default [y] if [X86_LOCAL_APIC && !X86_VISWS && X86_32]
  depends on [X86_LOCAL_APIC && !X86_VISWS]
  depends on [X86_32]
  inherited [X86_LOCAL_APIC && !X86_VISWS && X86_32]
 }
 config DOUBLEFAULT boolean {
  default [y] if [X86_32]
  prompt "Enable doublefault exception handler" if [X86_32 && EMBEDDED]
  depends on [X86_32]
  inherited [X86_32]
 }
 config IOMMU_DEBUG boolean {
  prompt "Enable IOMMU debugging" if [GART_IOMMU && DEBUG_KERNEL && X86_64]
  depends on [GART_IOMMU && DEBUG_KERNEL]
  depends on [X86_64]
  inherited [GART_IOMMU && DEBUG_KERNEL && X86_64]
  config IOMMU_LEAK boolean {
   prompt "IOMMU leak tracing" if [DEBUG_KERNEL && IOMMU_DEBUG]
   depends on [DEBUG_KERNEL]
   depends on [IOMMU_DEBUG]
   inherited [DEBUG_KERNEL && IOMMU_DEBUG]
  }
 }
}
menu "Security options" {
 config KEYS boolean {
  prompt "Enable access key retention support" if []
  config KEYS_DEBUG_PROC_KEYS boolean {
   prompt "Enable the /proc/keys file by which keys may be viewed" if [KEYS]
   depends on [KEYS]
   inherited [KEYS]
  }
 }
 config SECURITY boolean {
  prompt "Enable different security models" if [SYSFS]
  depends on [SYSFS]
  inherited [SYSFS]
  config SECURITY_NETWORK boolean {
   prompt "Socket and Networking Security Hooks" if [SECURITY]
   depends on [SECURITY]
   inherited [SECURITY]
   config SECURITY_NETWORK_XFRM boolean {
    prompt "XFRM (IPSec) Networking Security Hooks" if [XFRM && SECURITY_NETWORK]
    depends on [XFRM && SECURITY_NETWORK]
    inherited [XFRM && SECURITY_NETWORK]
   }
  }
  config SECURITY_CAPABILITIES boolean {
   prompt "Default Linux Capabilities" if [SECURITY]
   depends on [SECURITY]
   inherited [SECURITY]
  }
 }
 config SECURITY_FILE_CAPABILITIES boolean {
  prompt "File POSIX Capabilities (EXPERIMENTAL)" if [(!SECURITY || SECURITY_CAPABILITIES) && EXPERIMENTAL]
  depends on [(SECURITY="n" || SECURITY_CAPABILITIES!="n") && EXPERIMENTAL]
  default [n] if [(!SECURITY || SECURITY_CAPABILITIES) && EXPERIMENTAL]
  inherited [(!SECURITY || SECURITY_CAPABILITIES) && EXPERIMENTAL]
 }
 config SECURITY_ROOTPLUG boolean {
  prompt "Root Plug Support" if [USB="y" && SECURITY]
  depends on [USB="y" && SECURITY]
  inherited [USB="y" && SECURITY]
 }
 config SECURITY_SELINUX boolean {
  prompt "NSA SELinux Support" if [SECURITY_NETWORK && AUDIT && NET && INET]
  depends on [SECURITY_NETWORK && AUDIT && NET && INET]
  select NETWORK_SECMARK if [SECURITY_NETWORK && AUDIT && NET && INET]
  default [n] if [SECURITY_NETWORK && AUDIT && NET && INET]
  inherited [SECURITY_NETWORK && AUDIT && NET && INET]
  config SECURITY_SELINUX_BOOTPARAM boolean {
   prompt "NSA SELinux boot parameter" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_BOOTPARAM_VALUE integer {
    prompt "NSA SELinux boot parameter default value" if [SECURITY_SELINUX_BOOTPARAM]
    depends on [SECURITY_SELINUX_BOOTPARAM]
    range [0 1] if [SECURITY_SELINUX_BOOTPARAM]
    default [1] if [SECURITY_SELINUX_BOOTPARAM]
    inherited [SECURITY_SELINUX_BOOTPARAM]
   }
  }
  config SECURITY_SELINUX_DISABLE boolean {
   prompt "NSA SELinux runtime disable" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_DEVELOP boolean {
   prompt "NSA SELinux Development Support" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_AVC_STATS boolean {
   prompt "NSA SELinux AVC Statistics" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [y] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_CHECKREQPROT_VALUE integer {
   prompt "NSA SELinux checkreqprot default value" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   range [0 1] if [SECURITY_SELINUX]
   default [1] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_ENABLE_SECMARK_DEFAULT boolean {
   prompt "NSA SELinux enable new secmark network controls by default" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
  }
  config SECURITY_SELINUX_POLICYDB_VERSION_MAX boolean {
   prompt "NSA SELinux maximum supported policy format version" if [SECURITY_SELINUX]
   depends on [SECURITY_SELINUX]
   default [n] if [SECURITY_SELINUX]
   inherited [SECURITY_SELINUX]
   config SECURITY_SELINUX_POLICYDB_VERSION_MAX_VALUE integer {
    prompt "NSA SELinux maximum supported policy format version value" if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    depends on [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    range [15 21] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    default [19] if [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
    inherited [SECURITY_SELINUX_POLICYDB_VERSION_MAX]
   }
  }
 }
}
config XOR_BLOCKS tristate {
}
config ASYNC_CORE tristate {
}
config ASYNC_MEMCPY tristate {
 select ASYNC_CORE if []
}
config ASYNC_XOR tristate {
 select ASYNC_CORE if []
 select XOR_BLOCKS if []
}
config ASYNC_MEMSET tristate {
 select ASYNC_CORE if []
}
menuconfig CRYPTO boolean {
 prompt "Cryptographic API" if []
 if [CRYPTO] {
  config CRYPTO_ALGAPI tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_ABLKCIPHER tristate {
   select CRYPTO_BLKCIPHER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AEAD tristate {
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLKCIPHER tristate {
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HASH tristate {
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MANAGER tristate {
   prompt "Cryptographic algorithm manager" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_HMAC tristate {
   prompt "HMAC support" if [CRYPTO]
   select CRYPTO_HASH if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_XCBC tristate {
   prompt "XCBC support" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_HASH if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_NULL tristate {
   prompt "Null algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MD4 tristate {
   prompt "MD4 digest algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MD5 tristate {
   prompt "MD5 digest algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA1 tristate {
   prompt "SHA1 digest algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA256 tristate {
   prompt "SHA256 digest algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SHA512 tristate {
   prompt "SHA384 and SHA512 digest algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_WP512 tristate {
   prompt "Whirlpool digest algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TGR192 tristate {
   prompt "Tiger digest algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_GF128MUL tristate {
   prompt "GF(2^128) multiplication functions (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_ECB tristate {
   prompt "ECB support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CBC tristate {
   prompt "CBC support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_PCBC tristate {
   prompt "PCBC support" if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_LRW tristate {
   prompt "LRW support (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_GF128MUL if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_XTS tristate {
   prompt "XTS support (EXPERIMENTAL)" if [CRYPTO && EXPERIMENTAL]
   depends on [EXPERIMENTAL]
   select CRYPTO_BLKCIPHER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_MANAGER if [CRYPTO && EXPERIMENTAL]
   select CRYPTO_GF128MUL if [CRYPTO && EXPERIMENTAL]
   inherited [CRYPTO && EXPERIMENTAL]
  }
  config CRYPTO_CRYPTD tristate {
   prompt "Software async crypto daemon" if [CRYPTO]
   select CRYPTO_ABLKCIPHER if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_DES tristate {
   prompt "DES and Triple DES EDE cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_FCRYPT tristate {
   prompt "FCrypt cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_BLKCIPHER if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_BLOWFISH tristate {
   prompt "Blowfish cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH tristate {
   prompt "Twofish cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH_COMMON tristate {
   inherited [CRYPTO]
  }
  config CRYPTO_TWOFISH_586 tristate {
   prompt "Twofish cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
   depends on [(X86 || UML_X86) && !64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && !64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
  }
  config CRYPTO_TWOFISH_X86_64 tristate {
   prompt "Twofish cipher algorithm (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   select CRYPTO_TWOFISH_COMMON if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_SERPENT tristate {
   prompt "Serpent cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AES tristate {
   prompt "AES cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_AES_586 tristate {
   prompt "AES cipher algorithms (i586)" if [CRYPTO && (X86 || UML_X86) && !64BIT]
   depends on [(X86 || UML_X86) && !64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && !64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && !64BIT]
  }
  config CRYPTO_AES_X86_64 tristate {
   prompt "AES cipher algorithms (x86_64)" if [CRYPTO && (X86 || UML_X86) && 64BIT]
   depends on [(X86 || UML_X86) && 64BIT]
   select CRYPTO_ALGAPI if [CRYPTO && (X86 || UML_X86) && 64BIT]
   inherited [CRYPTO && (X86 || UML_X86) && 64BIT]
  }
  config CRYPTO_CAST5 tristate {
   prompt "CAST5 (CAST-128) cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAST6 tristate {
   prompt "CAST6 (CAST-256) cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TEA tristate {
   prompt "TEA, XTEA and XETA cipher algorithms" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ARC4 tristate {
   prompt "ARC4 cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_KHAZAD tristate {
   prompt "Khazad cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_ANUBIS tristate {
   prompt "Anubis cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_SEED tristate {
   prompt "SEED cipher algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_DEFLATE tristate {
   prompt "Deflate compression algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select ZLIB_INFLATE if [CRYPTO]
   select ZLIB_DEFLATE if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_MICHAEL_MIC tristate {
   prompt "Michael MIC keyed digest algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CRC32C tristate {
   prompt "CRC32c CRC algorithm" if [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   select LIBCRC32C if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_CAMELLIA tristate {
   prompt "Camellia cipher algorithms" if [CRYPTO]
   depends on [CRYPTO]
   select CRYPTO_ALGAPI if [CRYPTO]
   inherited [CRYPTO]
  }
  config CRYPTO_TEST tristate {
   prompt "Testing module" if [CRYPTO && m && <choice>]
   depends on [m]
   select CRYPTO_ALGAPI if [CRYPTO && m && <choice>]
   inherited [CRYPTO && m && <choice>]
  }
  config CRYPTO_AUTHENC tristate {
   prompt "Authenc support" if [CRYPTO]
   select CRYPTO_AEAD if [CRYPTO]
   select CRYPTO_MANAGER if [CRYPTO]
   inherited [CRYPTO]
  }
  menuconfig CRYPTO_HW boolean {
   prompt "Hardware crypto devices" if [CRYPTO]
   default [y] if [CRYPTO]
   inherited [CRYPTO]
   if [CRYPTO && CRYPTO_HW] {
    config CRYPTO_DEV_PADLOCK tristate {
     prompt "Support for VIA PadLock ACE" if [CRYPTO && CRYPTO_HW && X86_32 && !UML]
     depends on [X86_32 && !UML]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && X86_32 && !UML]
     inherited [CRYPTO && CRYPTO_HW && X86_32 && !UML]
     config CRYPTO_DEV_PADLOCK_AES tristate {
      prompt "PadLock driver for AES algorithm" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
     }
     config CRYPTO_DEV_PADLOCK_SHA tristate {
      prompt "PadLock driver for SHA1 and SHA256 algorithms" if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      depends on [CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA1 if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      select CRYPTO_SHA256 if [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
      inherited [CRYPTO && CRYPTO_HW && CRYPTO_DEV_PADLOCK]
     }
    }
    config CRYPTO_SHA1_S390 tristate {
     prompt "SHA1 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_SHA256_S390 tristate {
     prompt "SHA256 digest algorithm" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_DES_S390 tristate {
     prompt "DES and Triple DES cipher algorithms" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_AES_S390 tristate {
     prompt "AES cipher algorithms" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && S390]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config S390_PRNG tristate {
     prompt "Pseudo random number generator device driver" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     default [m] if [CRYPTO && CRYPTO_HW && S390]
     inherited [CRYPTO && CRYPTO_HW && S390]
    }
    config CRYPTO_DEV_GEODE tristate {
     prompt "Support for the Geode LX AES engine" if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     depends on [X86_32 && PCI]
     select CRYPTO_ALGAPI if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     select CRYPTO_BLKCIPHER if [CRYPTO && CRYPTO_HW && X86_32 && PCI]
     inherited [CRYPTO && CRYPTO_HW && X86_32 && PCI]
    }
    config ZCRYPT tristate {
     prompt "Support for PCI-attached cryptographic adapters" if [CRYPTO && CRYPTO_HW && S390]
     depends on [S390]
     select ZCRYPT_MONOLITHIC if [CRYPTO && CRYPTO_HW && S390 && ZCRYPT="y"]
     inherited [CRYPTO && CRYPTO_HW && S390]
     config ZCRYPT_MONOLITHIC boolean {
      prompt "Monolithic zcrypt module" if [CRYPTO && CRYPTO_HW && ZCRYPT="m"]
      depends on [ZCRYPT="m"]
      inherited [CRYPTO && CRYPTO_HW && ZCRYPT="m"]
     }
    }
   }
  }
 }
}
menu "Library routines" {
 config BITREVERSE tristate {
 }
 config CRC_CCITT tristate {
  prompt "CRC-CCITT functions" if []
 }
 config CRC16 tristate {
  prompt "CRC16 functions" if []
 }
 config CRC_ITU_T tristate {
  prompt "CRC ITU-T V.41 functions" if []
 }
 config CRC32 tristate {
  prompt "CRC32 functions" if []
  default [y] if []
  select BITREVERSE if []
 }
 config CRC7 tristate {
  prompt "CRC7 functions" if []
 }
 config LIBCRC32C tristate {
  prompt "CRC32c (Castagnoli, et al) Cyclic Redundancy-Check" if []
 }
 config AUDIT_GENERIC boolean {
  depends on [AUDIT && !AUDIT_ARCH]
  default [y] if [AUDIT && !AUDIT_ARCH]
  inherited [AUDIT && !AUDIT_ARCH]
 }
 config ZLIB_INFLATE tristate {
 }
 config ZLIB_DEFLATE tristate {
 }
 config LZO_COMPRESS tristate {
 }
 config LZO_DECOMPRESS tristate {
 }
 config GENERIC_ALLOCATOR boolean {
 }
 config REED_SOLOMON tristate {
 }
 config REED_SOLOMON_ENC8 boolean {
 }
 config REED_SOLOMON_DEC8 boolean {
 }
 config REED_SOLOMON_ENC16 boolean {
 }
 config REED_SOLOMON_DEC16 boolean {
 }
 config TEXTSEARCH boolean {
 }
 config TEXTSEARCH_KMP tristate {
 }
 config TEXTSEARCH_BM tristate {
 }
 config TEXTSEARCH_FSM tristate {
 }
 config PLIST boolean {
 }
 config HAS_IOMEM boolean {
  depends on [!NO_IOMEM]
  default [y] if [!NO_IOMEM]
  inherited [!NO_IOMEM]
 }
 config HAS_IOPORT boolean {
  depends on [HAS_IOMEM && !NO_IOPORT]
  default [y] if [HAS_IOMEM && !NO_IOPORT]
  inherited [HAS_IOMEM && !NO_IOPORT]
 }
 config HAS_DMA boolean {
  depends on [!NO_DMA]
  default [y] if [!NO_DMA]
  inherited [!NO_DMA]
 }
 config CHECK_SIGNATURE boolean {
 }
}
